<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FireKnight-HJ</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-04T18:28:04.727Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>fireknight</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WebGoat安装+General</title>
    <link href="http://example.com/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/"/>
    <id>http://example.com/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/</id>
    <published>2022-04-04T18:21:59.000Z</published>
    <updated>2022-04-04T18:28:04.727Z</updated>
    
    <content type="html"><![CDATA[<p>WebGoat 安全学习计划 Part 1</p><span id="more"></span><h2 id="用docker启动webgoat"><a href="#用docker启动webgoat" class="headerlink" title="用docker启动webgoat"></a>用docker启动webgoat</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8080:8080 -p 9090:9090 -p 8888:8888 -e TZ=Europe/Amsterdam webgoat/goatandwolf:latest</span><br></pre></td></tr></table></figure><p>之后：通过浏览器访问<a href="http://localhost:8080/WebGoat">http://localhost:8080/WebGoat</a></p><ul><li><p>注意：网址中的<em>WebGoat</em>，必须区分大小写！</p></li><li><p>注意：docker下载卡住的问题，用镜像参考：<a href="https://www.cnblogs.com/manmanchanglu/p/11968269.html阿里云很顶">https://www.cnblogs.com/manmanchanglu/p/11968269.html阿里云很顶</a></p></li></ul><p>我的本地VMware虚拟机：</p><p><a href="http://192.168.146.141:8080/WebGoat/login">http://192.168.146.141:8080/WebGoat/login</a></p><p><a href="http://192.168.146.141:9090/login">http://192.168.146.141:9090/login</a></p><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1648645754057.png" alt="uTools_1648645754057"></p><h2 id="General"><a href="#General" class="headerlink" title="General"></a>General</h2><h3 id="HTTP-Basics"><a href="#HTTP-Basics" class="headerlink" title="HTTP Basics"></a>HTTP Basics</h3><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1649081157493.png" alt="uTools_1649081157493"></p><p>用Get还是Post很简单，get是url传参：”?key=value”</p><p>这个看样子是用Post，随便填点啥，先go，用burpsuite抓包看看</p><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1649081220726.png" alt="uTools_1649081220726"></p><p>报文头的最后一行：77, POST都出现了</p><h3 id="HTTP-Basics-1"><a href="#HTTP-Basics-1" class="headerlink" title="HTTP Basics"></a>HTTP Basics</h3><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1649086409212.png" alt="uTools_1649086409212"></p><p>让修改request头到规定的样子，我们用burp suite抓包，右键Change Request method</p><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1649086469910.png" alt="uTools_1649086469910"></p><p>右键send to repeater，在repeater上修改，之后点send，收到response</p><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1649086626579.png" alt="uTools_1649086626579"></p><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1649086640671.png" alt="uTools_1649086640671"></p><p>可以看到response上提示成功了，我们回到Proxy，将Repeater上的内容粘过去，关闭intercept，发包出去，题目就完成了。</p><h3 id="Developer-Tools"><a href="#Developer-Tools" class="headerlink" title="Developer Tools"></a>Developer Tools</h3><ol><li>F12-&gt;Console-&gt;CtrL cv: webgoat.customjs.phoneHome()-&gt;submit结果</li></ol><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1649087391762.png" alt="uTools_1649087391762"></p><ol><li>F12-&gt;Network-&gt;找network包点开-&gt;Headers-&gt;查阅networkNum</li></ol><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1649087711796.png" alt="uTools_1649087711796"></p><h3 id="Crypto-Basics"><a href="#Crypto-Basics" class="headerlink" title="Crypto Basics"></a>Crypto Basics</h3><ol><li><p>直接滚去Base64解密</p></li><li><p>base64解密结果：;&gt;+&gt;=&gt;,:/&gt;,,(0-; 这个信息是用IBM的<strong>WebSphere</strong>工具中的编码规则处理的！！！所以我们从网上找到专门解码WebSphere规则的应用进行解码：<a href="http://www.sysman.nl/wasdecoder/">http://www.sysman.nl/wasdecoder/</a></p></li></ol><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1649089039058.png" alt="uTools_1649089039058"></p><ol><li><p>在线反向硬破解MD5明文网站<a href="https://www.cmd5.com/">https://www.cmd5.com/</a></p></li><li><p>生成模数的命令：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lyq@lyq-virtual-machine:~/Desktop$ touch sk</span><br><span class="line">lyq@lyq-virtual-machine:~/Desktop$ vim sk</span><br><span class="line">lyq@lyq-virtual-machine:~/Desktop$ openssl rsa -in ./sk -modulus</span><br></pre></td></tr></table></figure><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1649089792965.png" alt="uTools_1649089792965"></p><p>生成签名的指令：此处用RAW signatures</p><p>openssl资料：<a href="https://www.openssl.net.cn/docs/224.html">https://www.openssl.net.cn/docs/224.html</a></p><p>dgst用于数据摘要。</p><p>-sign    privatekeyfile</p><p>​    用privatekeyfile中的私钥签名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo -n &quotquot; | openssl dgst -sign ./sk -sha256 -out ./dgst.txt</span><br><span class="line">base64 ./dgst.txt &gt; result</span><br><span class="line"><span class="meta">#</span><span class="bash"> result中的内容就是签名</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>先敲题目给的命令，之后进入对应打开了的容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">lyq@lyq-virtual-machine:~/Desktop$ docker run -d webgoat/assignments:findthesecret</span><br><span class="line"><span class="meta">#</span><span class="bash"> -d默认放到了后台去运行docker，不会有显式的命令行</span></span><br><span class="line">lyq@lyq-virtual-machine:~/Desktop$ sudo docker container ls</span><br><span class="line">CONTAINER ID        IMAGE                               COMMAND                  CREATED              STATUS              PORTS</span><br><span class="line">                 NAMES</span><br><span class="line">a9b080a12c88        webgoat/assignments:findthesecret   &quot;/bin/bash /home/web…&quot;   About a minute ago   Up About a minute</span><br><span class="line">                 sharp_dubinsky</span><br><span class="line">b22c19eb35f1        webgoat/goatandwolf:latest          &quot;/bin/sh -c &#x27;/bin/ba…&quot;   5 hours ago          Up 5 hours          0.0.0.0:8080-&gt;8080/tcp, 0.0.0.0:8888-&gt;8888/tcp, 0.0.0.0:9090-&gt;9090/tcp   wonderful_ride</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以看到展示出的两个docker容器，我们刚刚新建的是container id为a9b080a12c88的容器</span></span><br><span class="line">lyq@lyq-virtual-machine:~/Desktop$ docker exec -it a9b080a12c88 bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 用<span class="built_in">exec</span> -it进入容器里面，发现死路，不知道下一步怎么解</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1649091660470.png" alt="uTools_1649091660470"></p><p>参考网上的解决方案<a href="https://www.rizkymd.com/2021/05/walkthrough-webgoat-assignment-crypto.html">https://www.rizkymd.com/2021/05/walkthrough-webgoat-assignment-crypto.html</a></p><p>原题目提示：</p><ul><li>After starting the docker container enter the container using docker exec -ti _dockerid_ /bin/bash</li><li>Try to gain access to /root. Try to become user root by su -</li><li>Try to change the /etc/shadow file using docker cp</li></ul><p>我们需要</p><ol><li>从container中把存了UID和GID的文件 /etc/passwd 拷贝下来</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp a9b080a12c88:/etc/passwd test.passwd</span><br></pre></td></tr></table></figure><ol><li><p>查看这个复制下来的test.passwd</p></li><li><p>编辑这个test.passwd，将webgoat UID和GID 从1000:1000改成0:0（最后一行）</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</span><br><span class="line">man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</span><br><span class="line">lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin</span><br><span class="line">mail:x:8:8:mail:/var/mail:/usr/sbin/nologin</span><br><span class="line">news:x:9:9:news:/var/spool/news:/usr/sbin/nologin</span><br><span class="line">uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin</span><br><span class="line">proxy:x:13:13:proxy:/bin:/usr/sbin/nologin</span><br><span class="line">www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin</span><br><span class="line">backup:x:34:34:backup:/var/backups:/usr/sbin/nologin</span><br><span class="line">list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin</span><br><span class="line">irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin</span><br><span class="line">_apt:x:100:65534::/nonexistent:/bin/false</span><br><span class="line">webgoat:x:0:0::/home/webgoat:</span><br></pre></td></tr></table></figure><p>为什么这么改？？参考：<a href="https://www.cyberciti.biz/faq/understanding-etcpasswd-file-format/">https://www.cyberciti.biz/faq/understanding-etcpasswd-file-format/</a></p><p>这里有对/etc/passwd文件的讲解</p><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/passwd-file-791527.png" alt="img"></p><ol><li><strong>Username</strong>: It is used when user logs in. It should be between 1 and 32 characters in length.</li><li><strong>Password</strong>: An x character indicates that encrypted password is stored in <a href="https://www.cyberciti.biz/faq/understanding-etcshadow-file/">/etc/shadow file</a>. Please note that you need to use the passwd command to computes the hash of a password typed at the CLI or to store/update the hash of the password in /etc/shadow file.</li><li><strong>User ID (UID)</strong>: Each user must be assigned a user ID (UID). UID 0 (zero) is reserved for root and UIDs 1-99 are reserved for other predefined accounts. Further UID 100-999 are reserved by system for administrative and system accounts/groups.</li><li><strong>Group ID (GID)</strong>: The primary group ID (stored in /etc/group file)</li><li><strong>User ID Info (GECOS)</strong>: The comment field. It allow you to add extra information about the users such as user’s full name, phone number etc. This field use by finger command.</li><li><strong>Home directory</strong>: The absolute path to the directory the user will be in when they log in. If this directory does not exists then users directory becomes /</li><li><strong>Command/shell</strong>: The absolute path of a command or shell (/bin/bash). Typically, this is a shell. Please note that it does not have to be a shell. For example, sysadmin can use the nologin shell, which acts as a replacement shell for the user accounts. If shell set to /sbin/nologin and the user tries to log in to the Linux system directly, the /sbin/nologin shell closes the connection.</li></ol><p>大意就是：3，4两个位置分别是User ID和Group ID字段，而UID=0是专门为root用户保留的，UID 1-99 为其他预定义帐户保留。进一步的 UID 100-999 由系统保留用于管理和系统帐户/组，因此我们的普通用户（eg: webgoat）是从序号1000开始的，我们把webgoat的字段改成0:0, 就相当于赋予了webgoat用户一个root权限。</p><ol><li>将这个改过的test.passwd 从本地系统拷贝回Container</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp test.passwd a9b080a12c88:/etc/passwd</span><br></pre></td></tr></table></figure><ol><li>再次进入容器，此时理论上我们有了root权限，可以进我们之前进不去的root目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it a9b080a12c88 /bin/bash</span><br></pre></td></tr></table></figure><ol><li>到 /root/目录下，发现只有一个default_secret文件，这里存着的就是私钥。我们再利用题目给的命令进行解密。（实际上我是用—user root进入root权限的）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lyq@lyq-virtual-machine:~/Desktop$ sudo docker exec -it --user root a9b080a12c88 /bin/bash</span><br><span class="line">root@a9b080a12c88:/# ls</span><br><span class="line">bin   dev               etc   lib    media  opt   root  sbin  sys  usr</span><br><span class="line">boot  docker-java-home  home  lib64  mnt    proc  run   srv   tmp  var</span><br><span class="line">root@a9b080a12c88:/# cd root</span><br><span class="line">root@a9b080a12c88:~# ls</span><br><span class="line">default_secret</span><br><span class="line">root@a9b080a12c88:~# echo &quot;U2FsdGVkX199jgh5oANElFdtCxIEvdEvciLi+v+5loE+VCuy6Ii0b+5byb5DXp32RPmT02Ek1pf55ctQN+DHbwCPiVRfFQamDmbHBUpD7as=&quot; | openssl enc -aes-256-cbc -d -a -kfile default_secret</span><br><span class="line">Leaving passwords in docker images is not so secure</span><br></pre></td></tr></table></figure><p>结果截图：</p><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1649095531918.png" alt="uTools_1649095531918"></p><p>答案：default_secret，Leaving passwords in docker images is not so secure</p><p>一点疑惑：</p><p>当我用<strong>docker exec -it a9b080a12c88 /bin/bash</strong>命令进去之后，没有预想中的root，反而变成了daemon用户，而不是webgoat，不理解为什么。</p><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1649095704263.png" alt="uTools_1649095704263"></p><p>如果我直接用docker命令参数<strong>—user root </strong>，也能成功用root权限进入容器中，那么问题就来了，有必要弄这么麻烦改配置文件吗？是不是直接就可以进root呢？？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lyq@lyq-virtual-machine:~/Desktop$ sudo docker exec -it --user root a9b080a12c88 /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这样也完全可行？？</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;WebGoat 安全学习计划 Part 1&lt;/p&gt;</summary>
    
    
    
    
    <category term="WebGoat" scheme="http://example.com/tags/WebGoat/"/>
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>LintCode-java：872-终止进程.md</title>
    <link href="http://example.com/2022/01/15/LintCode-java%EF%BC%9A872-%E7%BB%88%E6%AD%A2%E8%BF%9B%E7%A8%8B-md/"/>
    <id>http://example.com/2022/01/15/LintCode-java%EF%BC%9A872-%E7%BB%88%E6%AD%A2%E8%BF%9B%E7%A8%8B-md/</id>
    <published>2022-01-15T07:04:50.000Z</published>
    <updated>2022-01-15T07:05:56.909Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.lintcode.com/problem/872/">Lintcode 872. 终止进程</a></p><p>难度：中等</p><span id="more"></span><h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><p>描述</p><p>这个问题中. 每个进程都有一个唯一的 <strong>PID(进程id)</strong> 和 <strong>PPID(父进程id)</strong>。每个进程只有一个父进程，但可能有一个或多个子进程，这就像一个树形结构。并且只有一个进程的PPID是0，这意味着这个进程没有父进程。所有的pid都是不同的正整数。</p><p>我们使用两个整数列表来表示进程列表，其中第一个列表包含每个进程的PID，第二个列表包含对应的PPID。</p><p>现在给定这两个列表，以及一个你要终止(kill)的进程的ID，返回将在最后被终止的进程的PID列表。（当一个进程被终止时，它的所有子进程将被终止。返回的列表没有顺序要求）</p><hr><p>给定的kill id一定是PID列表中的某个id给定的PID列表中至少含有一个进程</p><p>样例</p><p><strong>样例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: PID = [1, 3, 10, 5], PPID = [3, 0, 5, 3], killID = 5</span><br><span class="line">输出: [5, 10]</span><br><span class="line">解释: 终止进程5同样会终止进程10.</span><br><span class="line">     3</span><br><span class="line">   /   \</span><br><span class="line">  1     5</span><br><span class="line">       /</span><br><span class="line">      10</span><br></pre></td></tr></table></figure><p><strong>样例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: PID = [1, 2, 3], PPID = [0, 1, 1], killID = 2</span><br><span class="line">输出: [2]</span><br></pre></td></tr></table></figure><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>一个简单的深度优先搜索算法，使用递归实现。</p><p>找到终止kill需要的进程-&gt;找到kill的所有子孙进程-&gt;找到kill的所有子进程的子孙进程-&gt;递归</p><p>最小问题：终止一个没有子进程的进程p：单纯返回只有一个元素p的ArrayList。</p><h4 id="程序展示"><a href="#程序展示" class="headerlink" title="程序展示"></a>程序展示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pid: the process id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ppid: the parent process id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> kill: a PID you want to kill</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: a list of PIDs of processes that will be killed in the end</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">killProcess</span><span class="params">(List&lt;Integer&gt; pid, List&lt;Integer&gt; ppid, <span class="keyword">int</span> kill)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Write your code here</span></span><br><span class="line">        List&lt;Integer&gt; tokill = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//先添加进程kill</span></span><br><span class="line">        tokill.add(kill);</span><br><span class="line">        <span class="comment">//添加kill的子进程</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ppid.size();i++)&#123;</span><br><span class="line">            <span class="comment">//找到kill的子进程后，递归调用kill子进程</span></span><br><span class="line">            <span class="keyword">if</span>(ppid.get(i)==kill)&#123;</span><br><span class="line">                tokill.addAll(killProcess(pid, ppid, pid.get(i)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tokill;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java复习-预习-："><a href="#Java复习-预习-：" class="headerlink" title="Java复习(预习)："></a>Java复习(预习)：</h4><p><strong>Java ArrayList addAll() 方法</strong></p><p>addAll() 方法将给定集合中的所有元素添加到 arraylist 中。</p><p>addAll() 方法的语法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arraylist.addAll(<span class="keyword">int</span> index, Collection c)</span><br></pre></td></tr></table></figure><p><strong>注：</strong>arraylist 是 ArrayList 类的一个对象。</p><p><strong>参数说明：</strong></p><ul><li>index（可选参数）- 表示集合元素插入处的索引值</li><li>c - 要插入的集合元素</li></ul><p>如果 index 没有传入实际参数，元素将追加至数组的最末尾。</p><p><strong>返回值</strong></p><p>如果成功插入元素，返回 true。</p><p>如果给定的集合为 null，则超出 NullPointerException 异常。</p><p>注意：如果 index 超出范围，则该方法抛出 IndexOutOfBoundsException 异常。</p><p><strong>泛型相关</strong></p><p>List是一个接口，而ArrayList是List接口的一个实现类。 ArrayList类是继承AbstractList抽象类和实现List接口的一个实现类。 向自己的对象引用，而ArrayList实现类的实例对象就在这充当了这个指向List接口的对象引用。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.lintcode.com/problem/872/&quot;&gt;Lintcode 872. 终止进程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;难度：中等&lt;/p&gt;</summary>
    
    
    
    
    <category term="LintCode" scheme="http://example.com/tags/LintCode/"/>
    
    <category term="深度优先搜索" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
    <category term="递归" scheme="http://example.com/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>LintCode+java：101-最小路径和</title>
    <link href="http://example.com/2022/01/15/LintCode-java%EF%BC%9A101-%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/"/>
    <id>http://example.com/2022/01/15/LintCode-java%EF%BC%9A101-%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/</id>
    <published>2022-01-14T18:01:08.000Z</published>
    <updated>2022-01-14T18:04:27.960Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.lintcode.com/problem/110/">Lintcode 110. 最小路径和</a></p><p>难度：简单</p><span id="more"></span><h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><p>给定一个只含非负整数的$m*n$网格，找到一条从左上角到右下角的可以使数字和最小的路径。</p><hr><p>你在同一时间只能向下或者向右移动一步</p><p>样例</p><p><strong>样例 1：</strong></p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid = [[1,3,1],[1,5,1],[4,2,1]]</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><p>解释：</p><p>路线为： 1 -&gt; 3 -&gt; 1 -&gt; 1 -&gt; 1</p><p><strong>样例 2：</strong></p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid = [[1,3,2]]</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><p>解释：</p><p>路线是： 1 -&gt; 3 -&gt; 2</p><p><strong>描述</strong><br>给定一个只含非负整数的m*n网格，找到一条从左上角到右下角的可以使数字和最小的路径。</p><p>你在同一时间只能向下或者向右移动一步</p><p><strong>样例</strong><br>[[1,3,1],</p><p>[1,5,1],</p><p>[4,2,1]]</p><p>输出: 7</p><p>路径: 1 -&gt; 3 -&gt; 1 -&gt; 1 -&gt; 1</p><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>动态规划问题，坐标型动态规划</p><p>建立$sumL[][]$数组存储到达每个节点的数字和最小路径</p><p>我们可以发现：</p><ol><li><p>$sumL[0][0]=grid[0][0]$</p></li><li><p>第0行，第0列没有上方元素，或者没有左方元素，即$sumL[0][i] = grid[0][i] + sumL[0][i-1]$ ，$sumL[i][0] = grid[i][0] + sumL[i-1][0]$</p></li><li>对其余位置i，j，如果其左，上元素都确定的话，有$sumL[i][j] = Math.min(sumL[i][j-1], sumL[i-1][j]) + grid[i][j]$</li><li>最后的结果即完全更新完毕后的sumL数组中的$sumL[xlen-1][ylen-1]$值，其中xlen和ylen分别为grid数组的行数与列数</li></ol><h4 id="程序展示："><a href="#程序展示：" class="headerlink" title="程序展示："></a>程序展示：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> grid: a list of lists of integers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: An integer, minimizes the sum of all numbers along its path</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> xlen = grid.length;</span><br><span class="line">        <span class="keyword">int</span> ylen = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="comment">// write your code here</span></span><br><span class="line">        <span class="keyword">int</span>[][] sumL = <span class="keyword">new</span> <span class="keyword">int</span>[xlen][ylen];</span><br><span class="line">        <span class="comment">//初始位置sumL[0][0]</span></span><br><span class="line">        sumL[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//更新第一行</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;ylen;i++)&#123;</span><br><span class="line">            sumL[<span class="number">0</span>][i] = grid[<span class="number">0</span>][i] + sumL[<span class="number">0</span>][i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新第一列</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;xlen;i++)&#123;</span><br><span class="line">            sumL[i][<span class="number">0</span>] = grid[i][<span class="number">0</span>] + sumL[i-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新剩下的位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;xlen;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;ylen;j++)&#123;</span><br><span class="line">                sumL[i][j] = Math.min(sumL[i][j-<span class="number">1</span>], sumL[i-<span class="number">1</span>][j]) + grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回右下角的sumL</span></span><br><span class="line">        <span class="keyword">return</span> sumL[xlen-<span class="number">1</span>][ylen-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.lintcode.com/problem/110/&quot;&gt;Lintcode 110. 最小路径和&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;难度：简单&lt;/p&gt;</summary>
    
    
    
    
    <category term="LintCode" scheme="http://example.com/tags/LintCode/"/>
    
    <category term="动态规划" scheme="http://example.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>计网复习：拥塞控制</title>
    <link href="http://example.com/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/"/>
    <id>http://example.com/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/</id>
    <published>2022-01-14T16:50:02.000Z</published>
    <updated>2022-01-14T17:00:45.579Z</updated>
    
    <content type="html"><![CDATA[<p>数据通信与网络24章 前半部分</p><span id="more"></span><h3 id="数据通信量"><a href="#数据通信量" class="headerlink" title="数据通信量"></a>数据通信量</h3><h5 id="通信量描述符"><a href="#通信量描述符" class="headerlink" title="通信量描述符"></a>通信量描述符</h5><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005120833.png" alt="image-20220115005120833"></p><p>平均数据速率=一段时间内发送数据比特数/时间</p><p>峰值数据速率=平均数据速率最大值：重要，它表明了让通信量通过网络而无需改变数据流的情况下，网络所需的峰值带宽</p><p>最大突发长度=峰值速率传输通信量持续时间的最大值：如果峰值持续时间很短可以忽略不计</p><p>有效带宽=网络需要分配给通信留的带宽。f(平均数据速率，峰值速率，最大突发长度) 计算过程很复杂。</p><h5 id="通信量特征值"><a href="#通信量特征值" class="headerlink" title="通信量特征值"></a>通信量特征值</h5><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005150444.png" alt="image-20220115005150444"></p><p>恒定比特率CBR：数据速率恒定不变</p><p>可变比特率VBR：数据流速率随时间平滑变化（（不是几句的突然的）</p><p>突发性数据 bursty data：短时间内数据速率突然发生变化：为了处理这种，需要重新整形技术进行重新整形</p><p>突发性通信量时网络中拥塞的主要原因之一</p><h4 id="拥塞"><a href="#拥塞" class="headerlink" title="拥塞"></a>拥塞</h4><p>拥塞：网络中的载荷（发闪送到网络中的分组数量）超过网络容量，即可能发生</p><p>拥塞控制：控制拥塞和时载荷抵御网络容量的机制和技术</p><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005207933.png" alt="image-20220115005207933"></p><p>为什么发生？</p><p>1.分组到达速率高举分组处理速率，输入队列越来越长</p><p>2.分组转发速率抵御分组处理速率输出队列也会越来越长</p><p>网络性能</p><p>两个测试网络性能的要素：延迟和吞吐量</p><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005226352.png" alt="image-20220115005226352"></p><p>延迟：载荷必容量小得多时，延迟最小，载荷大于网络容量时，延迟变为无穷大</p><p>吞吐量：网络吞吐量定义为单位时间内通过网络的分组数量：当载荷小于网络容量，吞吐量随载荷增加成比例增长，载荷达到网络容量时，期望吞吐量却不会恒定，而是急剧下降（丢弃分组 ，之后网络中分组数量也不会少，源端会重发，加重延迟和阻塞）</p><h4 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h4><p>两大类：开环拥塞控制（预防），闭环拥塞控制 (消除)</p><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005247592.png" alt="image-20220115005247592"></p><h4 id="开环拥塞控制"><a href="#开环拥塞控制" class="headerlink" title="开环拥塞控制"></a>开环拥塞控制</h4><p><strong>重传策略</strong></p><p>有时<em>重发不可避免</em>，而重发会增加拥塞现象，但是一个<em>好的重传策略可以预防拥塞</em></p><p><strong>窗口策略</strong></p><p>发送方窗口类型会影响拥塞，对拥塞控制了而言，选择重复窗口优于回退n帧窗口</p><p><strong>确认策略</strong></p><p>接收方确认策略也可影响拥塞，如果接收方并不对它所接收的每个分组都进行确认，则它会使发送方放慢发送速度，从而预防拥塞（？？？）</p><p><strong>丢弃策略</strong></p><p>路由器用好的丢弃策略可以预防拥塞，同时不破哦坏传输的完整性。eg：声音传输时丢弃不明干的分组，仍能保证通信声音质量</p><p><strong>许可策略</strong></p><p>虚电路网络中的一种QOS机制，也能预防拥塞。</p><h3 id="闭环拥塞控制"><a href="#闭环拥塞控制" class="headerlink" title="闭环拥塞控制"></a>闭环拥塞控制</h3><p>拥塞发生后，用闭环拥塞控制可以缓解拥塞状况</p><p><strong>背压</strong></p><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005311932.png" alt="image-20220115005311932"></p><p>仅用于虚电路网络，因为必须要知道其上行节点。</p><p>一个用色点停止接收来自直接上行节点的数据，这样上行节点只进不出，也会拥塞，这样一次拥塞传播到源端。</p><p>被压技术时点到点的拥塞控制</p><p><strong>抑制分组</strong></p><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005320519.png" alt="image-20220115005320519"></p><p>抑制分组时一个有节点发送给源端的分组，通知其发生了拥塞情况（注意这里时直接传到源端的）如ICMP源站点抑制报文</p><p><strong>隐含信令</strong></p><p>拥塞节点，节点，源端间没有通信，源端自行察觉，例如源端发送多个分组暂时没有得到确认。</p><p>eg：TCP拥塞控制</p><p><strong>显式信令</strong></p><p>大概与抑制分组方法相似，不同处在于：信号包含再携带数据的分组中。</p><p>前向信令：提示目的端网络发生拥塞</p><p>后向信令：提示源端网络发生拥塞</p><h3 id="两个例子"><a href="#两个例子" class="headerlink" title="两个例子"></a>两个例子</h3><h4 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h4><h5 id="拥塞窗口"><a href="#拥塞窗口" class="headerlink" title="拥塞窗口"></a>拥塞窗口</h5><p>实际窗口大小=min(rwnd,cwnd) rwnd：接收方缓冲空间大小，cwnd：拥塞窗口大小</p><h5 id="拥塞策略"><a href="#拥塞策略" class="headerlink" title="拥塞策略"></a>拥塞策略</h5><p>慢速启动，拥塞避免，拥塞检测。</p><h6 id="慢速启动：指数增长"><a href="#慢速启动：指数增长" class="headerlink" title="慢速启动：指数增长"></a>慢速启动：指数增长</h6><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005334497.png" alt="image-20220115005334497"></p><p>慢启动：指数增长，TCP拥塞控制所使用一种算法为慢速启动</p><p>开始时设置拥塞窗口大小(cwnd)为一个最大段长度MSS（MSS在连接建立期间由最大段长度选项决定）</p><p>每次收到一个ACK确认时，窗口大小增加一个MSS值，窗口慢速启动，但每次将所有段传输并收到ACK后，cwnd大小相当于按指数按规律增长。</p><p>当慢速启动到达阈值时停止，这个阈值由发送方保存的一个变量（ssthresh慢速启动阈值）决定，在大多数实现中，ssthresh值为65535字节。</p><p>图中这里省略了MSS的大小(MSS=1，实际不可能这样)</p><h6 id="拥塞避免：加性增加"><a href="#拥塞避免：加性增加" class="headerlink" title="拥塞避免：加性增加"></a>拥塞避免：加性增加</h6><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005353703.png" alt="image-20220115005353703"></p><p>拥塞窗口大小达到阈值，慢速启动停止，碱性增加开始，这样，每次整个窗口所有段都确认后，cwnd+1</p><p>拥塞窗口大小线性增加知道检测到拥塞</p><h6 id="拥塞检测：乘性减少"><a href="#拥塞检测：乘性减少" class="headerlink" title="拥塞检测：乘性减少"></a>拥塞检测：乘性减少</h6><p>复习：发生重传==重传计时器到时 or 收到了三个ACK</p><p><strong>计时器倒时</strong>存在非常严重的拥塞可能性：</p><p>a.设置阈值为当前cwnd的一半</p><p>b.设置cwnd为1个MSS</p><p>c.启动慢速启动阶段</p><p><strong>接收到三个ACK</strong>存在轻度拥塞的可能性：</p><p>a.设置阈值为当前cwnd的一半</p><p>b.设置cwnd为阈值</p><p>c.启动拥塞避免阶段</p><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005433172.png" alt="image-20220115005433172"></p><p>如图是一个例子</p><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005455533.png" alt="image-20220115005455533"></p><h4 id="帧中继中的拥塞控制"><a href="#帧中继中的拥塞控制" class="headerlink" title="帧中继中的拥塞控制"></a>帧中继中的拥塞控制</h4><p>2个位明确提示源端与目的端拥塞发生，即只有拥塞避免措施。</p><p>BECN 后向显示拥塞通知—&gt;：用来提示发送方网络中的拥塞情况。</p><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005506089.png" alt="image-20220115005506089"></p><p>FECN 前向显示拥塞通知&lt;—：用来提示接收方网络中的拥塞情况。</p><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005511529.png" alt="image-20220115005511529"></p><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005523462.png" alt="image-20220115005523462"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;数据通信与网络24章 前半部分&lt;/p&gt;</summary>
    
    
    
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="期末复习" scheme="http://example.com/tags/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>hexo_next_blog搭建</title>
    <link href="http://example.com/2022/01/13/hexo-next-blog%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2022/01/13/hexo-next-blog%E6%90%AD%E5%BB%BA/</id>
    <published>2022-01-13T07:44:54.000Z</published>
    <updated>2022-01-13T08:35:25.687Z</updated>
    
    <content type="html"><![CDATA[<p>搭建hexo，NexT主题博客时收集到的部分内容</p><span id="more"></span><h3 id="添加鼠标点击效果"><a href="#添加鼠标点击效果" class="headerlink" title="添加鼠标点击效果"></a>添加鼠标点击效果</h3><p>基本copy该网址内容，但是其实只需要改动_layout.swig即可，没必要新建swig文件</p><p><a href="https://blog.csdn.net/qq_42889280/article/details/103087564">https://blog.csdn.net/qq_42889280/article/details/103087564</a></p><p>在主题theme/next的 <code>_config.yml</code> 中添加动态配置项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cursor_effect:</span><br><span class="line">  enabled: true</span><br><span class="line">  type: love  # fireworks：礼花 | explosion：爆炸 | love：浮出爱心 | text：浮出文字</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 /themes/next/layout/_layout.swig，添加如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.cursor_effect %&#125;</span><br><span class="line">  &#123;% if theme.cursor_effect.type == &quot;fireworks&quot; %&#125;</span><br><span class="line">    &lt;script src=&quot;/js/cursor/fireworks.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &#123;% elseif theme.cursor_effect.type == &quot;explosion&quot; %&#125;</span><br><span class="line">    &lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt;</span><br><span class="line">    &lt;script src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;/js/cursor/explosion.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &#123;% elseif theme.cursor_effect.type == &quot;love&quot; %&#125;</span><br><span class="line">    &lt;script src=&quot;/js/cursor/love.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &#123;% elseif theme.cursor_effect.type == &quot;text&quot; %&#125;</span><br><span class="line">    &lt;script src=&quot;/js/cursor/text.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>添加时注意：粘到body标签里面</p><p>将以下四个JS文件复制到目录 /themes/next/source/js/cursor/ 下</p><p>fireworks.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line">class Circle &#123;</span><br><span class="line">  constructor(&#123; origin, speed, color, angle, context &#125;) &#123;</span><br><span class="line">    this.origin = origin</span><br><span class="line">    this.position = &#123; ...this.origin &#125;</span><br><span class="line">    this.color = color</span><br><span class="line">    this.speed = speed</span><br><span class="line">    this.angle = angle</span><br><span class="line">    this.context = context</span><br><span class="line">    this.renderCount = 0</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  draw() &#123;</span><br><span class="line">    this.context.fillStyle = this.color</span><br><span class="line">    this.context.beginPath()</span><br><span class="line">    this.context.arc(this.position.x, this.position.y, 2, 0, Math.PI * 2)</span><br><span class="line">    this.context.fill()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  move() &#123;</span><br><span class="line">    this.position.x = (Math.sin(this.angle) * this.speed) + this.position.x</span><br><span class="line">    this.position.y = (Math.cos(this.angle) * this.speed) + this.position.y + (this.renderCount * 0.3)</span><br><span class="line">    this.renderCount++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Boom &#123;</span><br><span class="line">  constructor (&#123; origin, context, circleCount = 16, area &#125;) &#123;</span><br><span class="line">    this.origin = origin</span><br><span class="line">    this.context = context</span><br><span class="line">    this.circleCount = circleCount</span><br><span class="line">    this.area = area</span><br><span class="line">    this.stop = false</span><br><span class="line">    this.circles = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  randomArray(range) &#123;</span><br><span class="line">    const length = range.length</span><br><span class="line">    const randomIndex = Math.floor(length * Math.random())</span><br><span class="line">    return range[randomIndex]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  randomColor() &#123;</span><br><span class="line">    const range = [&#x27;8&#x27;, &#x27;9&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;]</span><br><span class="line">    return &#x27;#&#x27; + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  randomRange(start, end) &#123;</span><br><span class="line">    return (end - start) * Math.random() + start</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  init() &#123;</span><br><span class="line">    for(let i = 0; i &lt; this.circleCount; i++) &#123;</span><br><span class="line">      const circle = new Circle(&#123;</span><br><span class="line">        context: this.context,</span><br><span class="line">        origin: this.origin,</span><br><span class="line">        color: this.randomColor(),</span><br><span class="line">        angle: this.randomRange(Math.PI - 1, Math.PI + 1),</span><br><span class="line">        speed: this.randomRange(1, 6)</span><br><span class="line">      &#125;)</span><br><span class="line">      this.circles.push(circle)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  move() &#123;</span><br><span class="line">    this.circles.forEach((circle, index) =&gt; &#123;</span><br><span class="line">      if (circle.position.x &gt; this.area.width || circle.position.y &gt; this.area.height) &#123;</span><br><span class="line">        return this.circles.splice(index, 1)</span><br><span class="line">      &#125;</span><br><span class="line">      circle.move()</span><br><span class="line">    &#125;)</span><br><span class="line">    if (this.circles.length == 0) &#123;</span><br><span class="line">      this.stop = true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  draw() &#123;</span><br><span class="line">    this.circles.forEach(circle =&gt; circle.draw())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class CursorSpecialEffects &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.computerCanvas = document.createElement(&#x27;canvas&#x27;)</span><br><span class="line">    this.renderCanvas = document.createElement(&#x27;canvas&#x27;)</span><br><span class="line"></span><br><span class="line">    this.computerContext = this.computerCanvas.getContext(&#x27;2d&#x27;)</span><br><span class="line">    this.renderContext = this.renderCanvas.getContext(&#x27;2d&#x27;)</span><br><span class="line"></span><br><span class="line">    this.globalWidth = window.innerWidth</span><br><span class="line">    this.globalHeight = window.innerHeight</span><br><span class="line"></span><br><span class="line">    this.booms = []</span><br><span class="line">    this.running = false</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleMouseDown(e) &#123;</span><br><span class="line">    const boom = new Boom(&#123;</span><br><span class="line">      origin: &#123; x: e.clientX, y: e.clientY &#125;,</span><br><span class="line">      context: this.computerContext,</span><br><span class="line">      area: &#123;</span><br><span class="line">        width: this.globalWidth,</span><br><span class="line">        height: this.globalHeight</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    boom.init()</span><br><span class="line">    this.booms.push(boom)</span><br><span class="line">    this.running || this.run()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handlePageHide() &#123;</span><br><span class="line">    this.booms = []</span><br><span class="line">    this.running = false</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  init() &#123;</span><br><span class="line">    const style = this.renderCanvas.style</span><br><span class="line">    style.position = &#x27;fixed&#x27;</span><br><span class="line">    style.top = style.left = 0</span><br><span class="line">    style.zIndex = &#x27;999999999999999999999999999999999999999999&#x27;</span><br><span class="line">    style.pointerEvents = &#x27;none&#x27;</span><br><span class="line"></span><br><span class="line">    style.width = this.renderCanvas.width = this.computerCanvas.width = this.globalWidth</span><br><span class="line">    style.height = this.renderCanvas.height = this.computerCanvas.height = this.globalHeight</span><br><span class="line"></span><br><span class="line">    document.body.append(this.renderCanvas)</span><br><span class="line"></span><br><span class="line">    window.addEventListener(&#x27;mousedown&#x27;, this.handleMouseDown.bind(this))</span><br><span class="line">    window.addEventListener(&#x27;pagehide&#x27;, this.handlePageHide.bind(this))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  run() &#123;</span><br><span class="line">    this.running = true</span><br><span class="line">    if (this.booms.length == 0) &#123;</span><br><span class="line">      return this.running = false</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    requestAnimationFrame(this.run.bind(this))</span><br><span class="line"></span><br><span class="line">    this.computerContext.clearRect(0, 0, this.globalWidth, this.globalHeight)</span><br><span class="line">    this.renderContext.clearRect(0, 0, this.globalWidth, this.globalHeight)</span><br><span class="line"></span><br><span class="line">    this.booms.forEach((boom, index) =&gt; &#123;</span><br><span class="line">      if (boom.stop) &#123;</span><br><span class="line">        return this.booms.splice(index, 1)</span><br><span class="line">      &#125;</span><br><span class="line">      boom.move()</span><br><span class="line">      boom.draw()</span><br><span class="line">    &#125;)</span><br><span class="line">    this.renderContext.drawImage(this.computerCanvas, 0, 0, this.globalWidth, this.globalHeight)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const cursorSpecialEffects = new CursorSpecialEffects()</span><br><span class="line">cursorSpecialEffects.init()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>explosion.min.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>love.min.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.οnclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>text.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var a_idx = 0;</span><br><span class="line">jQuery(document).ready(function($) &#123;</span><br><span class="line">  $(&quot;body&quot;).click(function(e) &#123;</span><br><span class="line">    var a = new Array(&quot;富强&quot;, &quot;民主&quot;, &quot;文明&quot;, &quot;和谐&quot;, &quot;自由&quot;, &quot;平等&quot;, &quot;公正&quot; ,&quot;法治&quot;, &quot;爱国&quot;, &quot;敬业&quot;, &quot;诚信&quot;, &quot;友善&quot;);</span><br><span class="line">    var $i = $(&quot;&lt;span/&gt;&quot;).text(a[a_idx]);</span><br><span class="line">    var x = e.pageX,</span><br><span class="line">      y = e.pageY;</span><br><span class="line">    $i.css(&#123;</span><br><span class="line">      &quot;z-index&quot;: 99999,</span><br><span class="line">      &quot;top&quot;: y - 28,</span><br><span class="line">      &quot;left&quot;: x - a[a_idx].length * 8,</span><br><span class="line">      &quot;position&quot;: &quot;absolute&quot;,</span><br><span class="line">      &quot;color&quot;: &quot;#ff7a45&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">    $(&quot;body&quot;).append($i);</span><br><span class="line">    $i.animate(&#123;</span><br><span class="line">      &quot;top&quot;: y - 180,</span><br><span class="line">      &quot;opacity&quot;: 0</span><br><span class="line">    &#125;, 1500, function() &#123;</span><br><span class="line">      $i.remove();</span><br><span class="line">    &#125;);</span><br><span class="line">    a_idx = (a_idx + 1) % a.length;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Next添加数学公式支持"><a href="#Next添加数学公式支持" class="headerlink" title="Next添加数学公式支持"></a>Next添加数学公式支持</h3><p>有效解决方案：<a href="https://xiaozhoua.top/2021/04/13/Blog/%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BALatex%E5%85%AC%E5%BC%8F/">https://xiaozhoua.top/2021/04/13/Blog/%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BALatex%E5%85%AC%E5%BC%8F/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;搭建hexo，NexT主题博客时收集到的部分内容&lt;/p&gt;</summary>
    
    
    
    
    <category term="blog" scheme="http://example.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>RSA 加密体制破译</title>
    <link href="http://example.com/2022/01/12/RSA_breaking/"/>
    <id>http://example.com/2022/01/12/RSA_breaking/</id>
    <published>2022-01-12T04:03:55.000Z</published>
    <updated>2022-01-13T08:25:55.387Z</updated>
    
    <content type="html"><![CDATA[<p>首届（2016）全国高校密码数学挑战赛</p><span id="more"></span><p><strong>赛题三：RSA 加密体制破译</strong></p><p>​    <strong>1 问题描述</strong></p><pre><code>     有人制作了一个 RSA 加解密软件（采用的 RSA 体制的参数特点描 述见密码背景部分）。已知该软件发送某个明文的所有参数和加密过 程的全部数据（加密案例文件详见附件 3-1）。Alice 使用该软件发送 了一个通关密语，且所有加密数据已经被截获，请问能否仅从加密数 据恢复该通关密语及 RSA 体制参数？如能请给出原文和参数，如不能 请给出已恢复部分并说明剩余部分不能恢复的理由？</code></pre><p>​    <strong>2.求解过程</strong></p><p>​        本次实验通过多种RSA攻击策略还原了13个Frame片段的明文。</p><h2 id="用到的RSA攻击方法"><a href="#用到的RSA攻击方法" class="headerlink" title="用到的RSA攻击方法"></a>用到的RSA攻击方法</h2><h3 id="1-公共模数攻击"><a href="#1-公共模数攻击" class="headerlink" title="1.公共模数攻击"></a>1.公共模数攻击</h3><p><em>攻击条件：</em>当两个用户使用相同模数N，不同私钥，加密同一明文消息时存在此攻击</p><p><em>攻击原理：</em></p><p>设两用户公钥为$e_1,e_2$，二者互质。明文消息$m$，密文$c1，c2$则有：</p><script type="math/tex; mode=display">c_1=m^{e1}mod\ N</script><script type="math/tex; mode=display">c_2=m^{e2}mod\ N</script><p>当$Adversary$截获了$c_1,c_2$后，可以用扩展欧几里得算法计算：$re_1+se_2=1\ mod\ n $的两个整数$r$和$s$，由此：</p><script type="math/tex; mode=display">\begin{align}c_1^rc_2^s &=m^{re_1}m^{se_2}\ mod\ n\\&=m^{re_1+se_2}\ mod\ n\\&=m\ mod\ n\end{align}</script><p>共模攻击代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">公共模数攻击,输入对应frame序号a,b</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sameModulAttack</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> ns[a]!=ns[b]:</span><br><span class="line">        <span class="keyword">return</span>-<span class="number">1</span></span><br><span class="line">    e1,e2,c1,c2,n = <span class="built_in">int</span>(es[a], <span class="number">16</span>),<span class="built_in">int</span>(es[b], <span class="number">16</span>),<span class="built_in">int</span>(cs[a], <span class="number">16</span>),<span class="built_in">int</span>(cs[b], <span class="number">16</span>),<span class="built_in">int</span>(ns[a],<span class="number">16</span>)</span><br><span class="line">    <span class="comment">#r*e1+s*e2=g(g=1)mod n，其中rs有一个是负的</span></span><br><span class="line">    g,r,s = egcd(e1, e2)</span><br><span class="line">    <span class="comment">#这里pow不能算负多少次方于是吧那个负项拆成了c^&#123;s&#125;=c^&#123;-1*s&#125;=(c^&#123;-1&#125;)^s</span></span><br><span class="line">    <span class="keyword">if</span> r&lt;<span class="number">0</span>:</span><br><span class="line">        r = - r</span><br><span class="line">        c1 = gmpy2.invert(c1, n)</span><br><span class="line">    <span class="keyword">elif</span> s&lt;<span class="number">0</span>:</span><br><span class="line">        s = - s</span><br><span class="line">        c2 = gmpy2.invert(c2, n)</span><br><span class="line">    <span class="comment">#message解出来就是此处的m</span></span><br><span class="line">    m = <span class="built_in">pow</span>(c1,r,n)*<span class="built_in">pow</span>(c2,s,n) % n</span><br><span class="line">    <span class="comment">#print(m)</span></span><br><span class="line">    <span class="built_in">print</span>(binascii.a2b_hex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line">    <span class="keyword">return</span> binascii.a2b_hex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-低加密指数广播攻击"><a href="#2-低加密指数广播攻击" class="headerlink" title="2.低加密指数广播攻击"></a>2.低加密指数广播攻击</h3><p><em>攻击条件：</em>选取的加密指数$e$较小，并且使用相同的加密指数给一个接收者群发送了相同的信息</p><p><em>攻击原理：</em></p><p>例如选取接收者群有三个成员的情况：</p><script type="math/tex; mode=display">c_1=m^e\ mod\ n_1\\c_2=m^e\ mod\ n_2\\c_3=m^e\ mod\ n_3</script><p>对上述几个等式，用中国剩余定理求解，可以得到：</p><script type="math/tex; mode=display">c_x =N_1N_1^{-1}c_1+N_2N_2^{-1}c_2+N_3N_3^{-1}c_3\ mod\ N\ \ \ (N=n_1n_2n_3)</script><p>又当e=3时，可以求得：</p><script type="math/tex; mode=display">m=\sqrt[3]{c_x}</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">低加密指数爆破攻击（广播攻击）</span></span><br><span class="line"><span class="string">c1 = m^5 mod N1</span></span><br><span class="line"><span class="string">c2 = m^5 mod N2</span></span><br><span class="line"><span class="string">c3 = m^5 mod N3</span></span><br><span class="line"><span class="string">c4 = m^5 mod N4</span></span><br><span class="line"><span class="string">c5 = m^5 mod N5</span></span><br><span class="line"><span class="string">用中国剩余定理解出m^5，之后开五次根即求出m</span></span><br><span class="line"><span class="string">这种也只有在几个m相同的情况下有的算</span></span><br><span class="line"><span class="string">Frame3,Frame8,Frame12,Frame16,Frame20采用低加密指数e=5进行加密，恰好能够进行爆破</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lowEburp5</span>():</span></span><br><span class="line">    sessions = [[<span class="built_in">int</span>(cs[<span class="number">3</span>],<span class="number">16</span>),<span class="built_in">int</span>(ns[<span class="number">3</span>],<span class="number">16</span>)],[<span class="built_in">int</span>(cs[<span class="number">8</span>],<span class="number">16</span>),<span class="built_in">int</span>(ns[<span class="number">8</span>],<span class="number">16</span>)],[<span class="built_in">int</span>(cs[<span class="number">12</span>],<span class="number">16</span>),<span class="built_in">int</span>(ns[<span class="number">12</span>],<span class="number">16</span>)],[<span class="built_in">int</span>(cs[<span class="number">16</span>],<span class="number">16</span>),<span class="built_in">int</span>(ns[<span class="number">16</span>],<span class="number">16</span>)],[<span class="built_in">int</span>(cs[<span class="number">20</span>],<span class="number">16</span>),<span class="built_in">int</span>(ns[<span class="number">20</span>],<span class="number">16</span>)]]</span><br><span class="line">    ret,N = chinese_remainder_theorem(sessions)</span><br><span class="line">    ans = gmpy2.iroot(ret,<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(binascii.a2b_hex(<span class="built_in">hex</span>(ans[<span class="number">0</span>])[<span class="number">2</span>:]))</span><br><span class="line">    <span class="keyword">return</span> binascii.a2b_hex(<span class="built_in">hex</span>(ans[<span class="number">0</span>])[<span class="number">2</span>:])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-因数碰撞攻击"><a href="#3-因数碰撞攻击" class="headerlink" title="3.因数碰撞攻击"></a>3.因数碰撞攻击</h3><p><em>攻击条件</em>：获取到两个公钥参数$N_1，N_2$ 不互素的密文信息</p><p><em>攻击原理</em>：</p><p>当存在两个公钥的$ N_1，N_2$ 不互素时，我们显然可以直接对这两个数求最大公因数，获得二者的共同的p然后直接获得$ q=n/p$，进而获得相应的私钥。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">因数碰撞攻击</span></span><br><span class="line"><span class="string">当存在两个公钥的 N 不互素时，我们显然可以直接对这两个数求最大公因数，然后直接获得 p，q，进而获得相应的私钥。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_factor_pairs</span>():</span></span><br><span class="line">    pairs = []</span><br><span class="line">    <span class="comment"># 遍历每个组合，找到有最大公约数不为1的n1，n2对</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ns)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="built_in">len</span>(ns)):</span><br><span class="line">            ni = <span class="built_in">int</span>(ns[i],<span class="number">16</span>)</span><br><span class="line">            nj = <span class="built_in">int</span>(ns[j],<span class="number">16</span>)</span><br><span class="line">            <span class="keyword">if</span> ni == nj:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> gmpy2.gcd(ni,nj)!=<span class="number">1</span>:</span><br><span class="line">                pairs.append([i,j,gmpy2.gcd(ni,nj)])</span><br><span class="line">    <span class="comment"># print打印pairs</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> pairs:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;出现碰撞的frame序号为 &quot;</span>,i[<span class="number">0</span>],<span class="string">&quot; &quot;</span>,i[<span class="number">1</span>],<span class="string">&quot; 公因数为 &quot;</span>,i[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">return</span> pairs</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sameFactorAttack</span>(<span class="params">i,j</span>):</span></span><br><span class="line">    <span class="comment"># 对pairs中的每个组合进行破解</span></span><br><span class="line">    ni = <span class="built_in">int</span>(ns[i], <span class="number">16</span>); nj = <span class="built_in">int</span>(ns[j], <span class="number">16</span>)</span><br><span class="line">    ci = <span class="built_in">int</span>(cs[i], <span class="number">16</span>); cj = <span class="built_in">int</span>(cs[j], <span class="number">16</span>)</span><br><span class="line">    ei = <span class="built_in">int</span>(es[i], <span class="number">16</span>); ej = <span class="built_in">int</span>(es[j], <span class="number">16</span>)</span><br><span class="line">    <span class="comment"># 求ni nj公因数得到p</span></span><br><span class="line">    p = gmpy2.gcd(ni,nj)</span><br><span class="line">    qi = ni//p</span><br><span class="line">    qj = nj//p</span><br><span class="line">    <span class="comment"># 根据欧拉定理，求phi</span></span><br><span class="line">    phi_i = (p-<span class="number">1</span>)*(qi-<span class="number">1</span>)</span><br><span class="line">    phi_j = (p-<span class="number">1</span>)*(qj-<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 由ed = 1 mod phi可以得到 d = e^-1 mod phi</span></span><br><span class="line">    di = gmpy2.invert(ei,phi_i)</span><br><span class="line">    dj = gmpy2.invert(ej,phi_j)</span><br><span class="line">    <span class="comment"># 明文m = c^d mod n</span></span><br><span class="line">    mi = gmpy2.powmod(ci,di,ni)</span><br><span class="line">    mj = gmpy2.powmod(cj,dj,nj)</span><br><span class="line">    <span class="built_in">print</span>(binascii.a2b_hex(<span class="built_in">hex</span>(mi)[<span class="number">2</span>:]))</span><br><span class="line">    <span class="built_in">print</span>(binascii.a2b_hex(<span class="built_in">hex</span>(mj)[<span class="number">2</span>:]))</span><br><span class="line">    <span class="keyword">return</span> binascii.a2b_hex(<span class="built_in">hex</span>(mi)[<span class="number">2</span>:]),binascii.a2b_hex(<span class="built_in">hex</span>(mj)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><h3 id="4-费马分解法：p-q分解"><a href="#4-费马分解法：p-q分解" class="headerlink" title="4.费马分解法：p-q分解"></a>4.费马分解法：p-q分解</h3><p><em>攻击条件：</em>p或q选择不当：|p-q|较小</p><p><em>攻击原理：</em></p><p>由如下式子：</p><script type="math/tex; mode=display">\frac{(p+q)^2}{4}-n=\frac{(p+q)^2}{4}-pq=\frac{(p-q)^2}{4}</script><p>可以看到，$|p-q|$较小时，$\frac{(p-q)^2}{4}$也较小，从而$\frac{(p+q)^2}{4}$只是比$n$稍微大了一点点，从而$\frac{p+q}{2}$与$\sqrt{n}$相近。那么我们可以：</p><ul><li>顺序检查$\sqrt{n}$的每一个整数$x$，直到找到一个$x$使得$x^2-n$是平方数，记为$y^2$</li><li>那么$x^2-n=y^2$，进而根据平方差公式即可分解$N$</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fermat_pq_get_p</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="comment"># 定义一个较小（也没有很小）的常数b</span></span><br><span class="line">    b = math.factorial(<span class="number">2</span>**<span class="number">14</span>)</span><br><span class="line">    <span class="comment"># 从u0 = sqrt(n)开始遍历</span></span><br><span class="line">    u0 = gmpy2.iroot(n,<span class="number">2</span>)[<span class="number">0</span>]+<span class="number">1</span></span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; b-<span class="number">1</span>:</span><br><span class="line">        u = (u0+i)*(u0+i)-n</span><br><span class="line">        <span class="comment"># 如果u是某个数的平方张，则u为y^2，u0+i为x</span></span><br><span class="line">        <span class="keyword">if</span> gmpy2.is_square(u):</span><br><span class="line">            v=gmpy2.isqrt(u)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    <span class="comment"># 此时p，q为x-y 和 x+y，我们返回x+y的值</span></span><br><span class="line">    <span class="keyword">return</span> (u0+i)+v</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fermart_crack</span>(<span class="params">i</span>):</span></span><br><span class="line">    n = <span class="built_in">int</span>(ns[i], <span class="number">16</span>)</span><br><span class="line">    c = <span class="built_in">int</span>(cs[i], <span class="number">16</span>)</span><br><span class="line">    e = <span class="built_in">int</span>(es[i], <span class="number">16</span>)</span><br><span class="line">    <span class="comment"># 分解n得到p，q</span></span><br><span class="line">    p = fermat_pq_get_p(n)</span><br><span class="line">    q = n//p</span><br><span class="line">    <span class="comment"># 根据欧拉定理，求phi</span></span><br><span class="line">    phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 由ed = 1 mod phi可以得到 d = e^-1 mod phi</span></span><br><span class="line">    d = gmpy2.invert(e,phi)</span><br><span class="line">    <span class="comment"># 明文m = c^d mod n</span></span><br><span class="line">    m = gmpy2.powmod(c,d,n)</span><br><span class="line">    <span class="built_in">print</span>(binascii.a2b_hex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line">    <span class="keyword">return</span> binascii.a2b_hex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><h3 id="5-pollard-p-1分解法"><a href="#5-pollard-p-1分解法" class="headerlink" title="5.pollard p-1分解法"></a>5.pollard p-1分解法</h3><p>攻击条件：适用于$p-1$或$q-1$能够被小素数整除的情况，通过此分解法可以找到一个因子$d$满足$d|n$</p><p>攻击原理：</p><p>寻找一个整数k，k要满足(p-1)|k!，由欧拉定理可以得知，若a和p互素：</p><script type="math/tex; mode=display">a^{p-1}=1\ mod\ p</script><p>即：</p><script type="math/tex; mode=display">a^{k!}=1\ mod\ p</script><p>则：$p|(a^{k!}-1)$，这样的话，$n$和$(a^{k!}-1)$必由一个公因数p，这样的话只需求$p=gcd(n,a^{k!}-1)$，之后就能够轻易地分解出n来了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Pollard p-1 分解法</span></span><br><span class="line"><span class="string">适用于p-1或q-1能够被小素数整除的情况</span></span><br><span class="line"><span class="string">通过此分解法可以找到一个因子d|n</span></span><br><span class="line"><span class="string">原理是找到一个满足(p-1)|k!的整数k，由fermart小定理，a^p-1=1 mod p ----&gt; p|(a^k!-1)</span></span><br><span class="line"><span class="string">这样n与(a^k!-1)有公因数p，n被分解出来</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pollard_p_1</span>(<span class="params">n</span>):</span></span><br><span class="line">    m = <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n):</span><br><span class="line">        <span class="comment"># 此时每次遍历，m=2^(k!)</span></span><br><span class="line">        m = <span class="built_in">pow</span>(m,k,n)</span><br><span class="line">        <span class="comment"># 找到一个k使得p|(a^k!-1)，即(a^k!-1)与n有公因数p</span></span><br><span class="line">        <span class="keyword">if</span> gmpy2.gcd(m - <span class="number">1</span>, n) != <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># 返回p</span></span><br><span class="line">            <span class="keyword">return</span> gmpy2.gcd(m - <span class="number">1</span>, n)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">(github上原文的内容有问题，解不出来)</span></span><br><span class="line"><span class="string">0.固定一个整数B=2**20</span></span><br><span class="line"><span class="string">1.选择一个整数k，k为满足b&lt;=B的大部分或者全部b的乘积，可以选：k = B!</span></span><br><span class="line"><span class="string">2.选择一个随机整数a：2&lt;a&lt;n-2</span></span><br><span class="line"><span class="string">3.计算r = a^k mod n</span></span><br><span class="line"><span class="string">4.计算d = gcd(r-1,n)</span></span><br><span class="line"><span class="string">5.如果d=1或d=n,回到1，否则我们找到d为一个因子</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># def pollard_p_1(n):</span></span><br><span class="line"><span class="comment">#     B = 2**20</span></span><br><span class="line"><span class="comment">#     while True:</span></span><br><span class="line"><span class="comment">#         k = math.factorial(B)</span></span><br><span class="line"><span class="comment">#         a = random.randint(3,n-2)</span></span><br><span class="line"><span class="comment">#         r = a**k%n</span></span><br><span class="line"><span class="comment">#         d = gmpy2.gcd(r-1,n)</span></span><br><span class="line"><span class="comment">#         if d==1 or d==n:</span></span><br><span class="line"><span class="comment">#             continue</span></span><br><span class="line"><span class="comment">#         return d</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p1_crack</span>(<span class="params">i</span>):</span></span><br><span class="line">    n = <span class="built_in">int</span>(ns[i], <span class="number">16</span>)</span><br><span class="line">    c = <span class="built_in">int</span>(cs[i], <span class="number">16</span>)</span><br><span class="line">    e = <span class="built_in">int</span>(es[i], <span class="number">16</span>)</span><br><span class="line">    <span class="comment"># 分解n得到d=p，之后算q</span></span><br><span class="line">    p = pollard_p_1(n)</span><br><span class="line">    q = n//p</span><br><span class="line">    phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 由ed = 1 mod phi可以得到 d = e^-1 mod phi</span></span><br><span class="line">    d = gmpy2.invert(e,phi)</span><br><span class="line">    <span class="comment"># 明文m = c^d mod n</span></span><br><span class="line">    m = gmpy2.powmod(c,d,n)</span><br><span class="line">    <span class="built_in">print</span>(binascii.a2b_hex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line">    <span class="keyword">return</span> binascii.a2b_hex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><h2 id="分析Frame文件，进行RSA攻击"><a href="#分析Frame文件，进行RSA攻击" class="headerlink" title="分析Frame文件，进行RSA攻击"></a>分析Frame文件，进行RSA攻击</h2><ul><li>Frame0和Frame4的模数N相同，假设这两片段对应的明文内容相同，则可以使用公共模数攻击的方法</li><li>Frame1和Frame18的模数N具有公共因子，可以通过因数碰撞法还原明文</li><li>Frame3，Frame8，Frame12，Frame16和Frame20采用低加密指数<code>e=5</code>进行加密</li><li>Frame7，Frame11，Frame15采用低加密指数<code>e=3</code>进行加密</li><li>Frame10 经尝试后发现其p，q选择较为接近，采用费马分解法(p-q法)进行破解</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">数据读取</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readFrames</span>():</span></span><br><span class="line">    ns = []</span><br><span class="line">    cs = []</span><br><span class="line">    es = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;RSA大礼包/frame_set/Frame&quot;</span>+<span class="built_in">str</span>(i), <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            tmp = f.read()</span><br><span class="line">            ns.append(tmp[<span class="number">0</span>:<span class="number">256</span>])</span><br><span class="line">            es.append(tmp[<span class="number">256</span>:<span class="number">512</span>])</span><br><span class="line">            cs.append(tmp[<span class="number">512</span>:<span class="number">768</span>])</span><br><span class="line">    <span class="keyword">return</span> ns,cs,es</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ns,cs,es = readFrames()</span><br><span class="line">    pt = [<span class="string">&quot;&quot;</span>]*<span class="built_in">len</span>(ns)</span><br><span class="line">    <span class="comment">#针对Frame0和Frame4，构建共模攻击函数</span></span><br><span class="line">    pt[<span class="number">4</span>] = sameModulAttack(<span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">    pt[<span class="number">0</span>]=pt[<span class="number">4</span>]</span><br><span class="line">    <span class="comment">#针对Frame1和Frame18，构造因数碰撞函数</span></span><br><span class="line">    pairs = get_factor_pairs()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> pairs:</span><br><span class="line">        pt[i[<span class="number">0</span>]],pt[i[<span class="number">1</span>]] = sameFactorAttack(i[<span class="number">0</span>],i[<span class="number">1</span>])</span><br><span class="line">    <span class="comment">#针对Frame10采用费马分解法(p-q法)进行破解</span></span><br><span class="line">    pt[<span class="number">10</span>] = fermart_crack(<span class="number">10</span>)</span><br><span class="line">    <span class="comment">#针对Frame2,Frame6,Frame19,构造Pollard p-1分解函数分解</span></span><br><span class="line">    pt[<span class="number">2</span>] = p1_crack(<span class="number">2</span>)</span><br><span class="line">    pt[<span class="number">6</span>] = p1_crack(<span class="number">6</span>)</span><br><span class="line">    pt[<span class="number">19</span>] = p1_crack(<span class="number">19</span>)</span><br><span class="line">    <span class="comment">#针对Frame3,Frame8,Frame12,Frame16,Frame20采用低加密指数e=5进行加密，恰好能够进行爆破</span></span><br><span class="line">    pt[<span class="number">3</span>] = lowEburp5()</span><br><span class="line">    pt[<span class="number">8</span>] = pt[<span class="number">3</span>]</span><br><span class="line">    pt[<span class="number">12</span>] = pt[<span class="number">3</span>]</span><br><span class="line">    pt[<span class="number">16</span>] = pt[<span class="number">3</span>]</span><br><span class="line">    pt[<span class="number">20</span>] = pt[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示结果</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pt)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Frame &quot;</span>,i,<span class="string">&quot; 破译结果为：&quot;</span>,pt[i][-<span class="number">8</span>:])</span><br></pre></td></tr></table></figure><p>​    <strong>3.实验结果</strong></p><p>程序运行的结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;\x98vT2\x10\xab\xcd\xef\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00My secre&#x27;</span><br><span class="line">出现碰撞的frame序号为  1   18  公因数为  72732681634</span><br><span class="line">65293471933643674908027120929096536045429682300347130226398442391418956862476173798834057392247872274441320512158525416407044516675402521694747</span><br><span class="line">b&#x27;\x98vT2\x10\xab\xcd\xef\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00. Imagin&#x27;</span><br><span class="line">b&#x27;\x98vT2\x10\xab\xcd\xef\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00m A to B&#x27;</span><br><span class="line">b&#x27;\x98vT2\x10\xab\xcd\xef\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00will get&#x27;</span><br><span class="line">b&#x27;\x98vT2\x10\xab\xcd\xef\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 That is&#x27;</span><br><span class="line">b&#x27;\x98vT2\x10\xab\xcd\xef\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 &quot;Logic &#x27;</span><br><span class="line">b&#x27;\x98vT2\x10\xab\xcd\xef\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00instein.&#x27;</span><br><span class="line">b&#x27;\x98vT2\x10\xab\xcd\xef\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00t is a f&#x27;</span><br><span class="line"></span><br><span class="line">Frame  0  破译结果为： b&#x27;My secre&#x27;</span><br><span class="line">Frame  1  破译结果为： b&#x27;. Imagin&#x27;</span><br><span class="line">Frame  2  破译结果为： b&#x27; That is&#x27;</span><br><span class="line">Frame  3  破译结果为： b&#x27;t is a f&#x27;</span><br><span class="line">Frame  4  破译结果为： b&#x27;My secre&#x27;</span><br><span class="line">Frame  5  破译结果为： </span><br><span class="line">Frame  6  破译结果为： b&#x27; &quot;Logic &#x27;</span><br><span class="line">Frame  7  破译结果为： </span><br><span class="line">Frame  8  破译结果为： b&#x27;t is a f&#x27;</span><br><span class="line">Frame  9  破译结果为： </span><br><span class="line">Frame  10  破译结果为： b&#x27;will get&#x27;</span><br><span class="line">Frame  11  破译结果为： </span><br><span class="line">Frame  12  破译结果为： b&#x27;t is a f&#x27;</span><br><span class="line">Frame  13  破译结果为： </span><br><span class="line">Frame  14  破译结果为： </span><br><span class="line">Frame  15  破译结果为： </span><br><span class="line">Frame  16  破译结果为： b&#x27;t is a f&#x27;</span><br><span class="line">Frame  17  破译结果为： </span><br><span class="line">Frame  18  破译结果为： b&#x27;m A to B&#x27;</span><br><span class="line">Frame  19  破译结果为： b&#x27;instein.&#x27;</span><br><span class="line">Frame  20  破译结果为： b&#x27;t is a f&#x27;</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    <strong>4.总结</strong></p><p>通过完成本次大作业我学习了一些针对RSA算法的攻击方式，收获很大。同时我了解到即便 RSA 算法目前来说是安全可靠的，但是错误的应用场景，错误的环境配置，以及错误的使用方法都会导致 RSA 的算法体系出现问题，因此日后学习过程中遇到相关的问题时要多留心思考研究，以免出现疏漏。</p><p>​    <strong>5.参考</strong></p><p><a href="https://www.tr0y.wang/2017/11/06/CTFRSA/#例题-6">https://www.tr0y.wang/2017/11/06/CTFRSA/#%E4%BE%8B%E9%A2%98-6</a> </p><p><a href="https://www.tr0y.wang/2017/10/31/RSA2016/">https://www.tr0y.wang/2017/10/31/RSA2016/</a>  </p><p><a href="https://github.com/blank-vax/RSA_breaking">https://github.com/blank-vax/RSA_breaking</a>  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;首届（2016）全国高校密码数学挑战赛&lt;/p&gt;</summary>
    
    
    
    
    <category term="密码学" scheme="http://example.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    <category term="作业" scheme="http://example.com/tags/%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/01/12/hello-world/"/>
    <id>http://example.com/2022/01/12/hello-world/</id>
    <published>2022-01-11T17:33:36.569Z</published>
    <updated>2022-01-13T07:15:32.382Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
